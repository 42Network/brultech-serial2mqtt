"""
This type stub file was generated by pyright.
"""

import aiohttp
from collections.abc import Awaitable
from typing import Any, TYPE_CHECKING
from aiohttp import web
from homeassistant.core import HomeAssistant, callback
from homeassistant.loader import bind_hass
from aiohttp.typedefs import JSONDecoder

"""Helper for aiohttp webclient stuff."""
if TYPE_CHECKING:
    ...
DATA_CONNECTOR = ...
DATA_CLIENTSESSION = ...
SERVER_SOFTWARE = ...
ENABLE_CLEANUP_CLOSED = ...
WARN_CLOSE_MSG = ...
MAXIMUM_CONNECTIONS = ...
MAXIMUM_CONNECTIONS_PER_HOST = ...
class HassClientResponse(aiohttp.ClientResponse):
    """aiohttp.ClientResponse with a json method that uses json_loads by default."""
    async def json(self, *args: Any, loads: JSONDecoder = ..., **kwargs: Any) -> Any:
        """Send a json request and parse the json response."""
        ...
    


@callback
@bind_hass
def async_get_clientsession(hass: HomeAssistant, verify_ssl: bool = ..., family: int = ...) -> aiohttp.ClientSession:
    """Return default aiohttp ClientSession.

    This method must be run in the event loop.
    """
    ...

@callback
@bind_hass
def async_create_clientsession(hass: HomeAssistant, verify_ssl: bool = ..., auto_cleanup: bool = ..., family: int = ..., **kwargs: Any) -> aiohttp.ClientSession:
    """Create a new ClientSession with kwargs, i.e. for cookies.

    If auto_cleanup is False, you need to call detach() after the session
    returned is no longer used. Default is True, the session will be
    automatically detached on homeassistant_stop or when being created
    in config entry setup, the config entry is unloaded.

    This method must be run in the event loop.
    """
    ...

@bind_hass
async def async_aiohttp_proxy_web(hass: HomeAssistant, request: web.BaseRequest, web_coro: Awaitable[aiohttp.ClientResponse], buffer_size: int = ..., timeout: int = ...) -> web.StreamResponse | None:
    """Stream websession request to aiohttp web response."""
    ...

@bind_hass
async def async_aiohttp_proxy_stream(hass: HomeAssistant, request: web.BaseRequest, stream: aiohttp.StreamReader, content_type: str | None, buffer_size: int = ..., timeout: int = ...) -> web.StreamResponse:
    """Stream a stream to aiohttp web response."""
    ...

