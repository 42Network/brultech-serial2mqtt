"""
This type stub file was generated by pyright.
"""

import logging
from abc import ABC, ABCMeta, abstractmethod
from collections.abc import Awaitable, Callable
from typing import Any
from aiohttp import client, web
from homeassistant import config_entries
from homeassistant.components import http
from homeassistant.core import HomeAssistant, callback
from homeassistant.data_entry_flow import FlowResult

"""Config Flow using OAuth2.

This module exists of the following parts:
 - OAuth2 config flow which supports multiple OAuth2 implementations
 - OAuth2 implementation that works with local provided client ID/secret

"""
_LOGGER = ...
DATA_JWT_SECRET = ...
DATA_IMPLEMENTATIONS = ...
DATA_PROVIDERS = ...
AUTH_CALLBACK_PATH = ...
HEADER_FRONTEND_BASE = ...
MY_AUTH_CALLBACK_PATH = ...
CLOCK_OUT_OF_SYNC_MAX_SEC = ...
OAUTH_AUTHORIZE_URL_TIMEOUT_SEC = ...
OAUTH_TOKEN_TIMEOUT_SEC = ...
class AbstractOAuth2Implementation(ABC):
    """Base class to abstract OAuth2 authentication."""
    @property
    @abstractmethod
    def name(self) -> str:
        """Name of the implementation."""
        ...
    
    @property
    @abstractmethod
    def domain(self) -> str:
        """Domain that is providing the implementation."""
        ...
    
    @abstractmethod
    async def async_generate_authorize_url(self, flow_id: str) -> str:
        """Generate a url for the user to authorize.

        This step is called when a config flow is initialized. It should redirect the
        user to the vendor website where they can authorize Home Assistant.

        The implementation is responsible to get notified when the user is authorized
        and pass this to the specified config flow. Do as little work as possible once
        notified. You can do the work inside async_resolve_external_data. This will
        give the best UX.

        Pass external data in with:

        await hass.config_entries.flow.async_configure(
            flow_id=flow_id, user_input={'code': 'abcd', 'state': â€¦ }

        )

        """
        ...
    
    @abstractmethod
    async def async_resolve_external_data(self, external_data: Any) -> dict:
        """Resolve external data to tokens.

        Turn the data that the implementation passed to the config flow as external
        step data into tokens. These tokens will be stored as 'token' in the
        config entry data.
        """
        ...
    
    async def async_refresh_token(self, token: dict) -> dict:
        """Refresh a token and update expires info."""
        ...
    


class LocalOAuth2Implementation(AbstractOAuth2Implementation):
    """Local OAuth2 implementation."""
    def __init__(self, hass: HomeAssistant, domain: str, client_id: str, client_secret: str, authorize_url: str, token_url: str) -> None:
        """Initialize local auth implementation."""
        ...
    
    @property
    def name(self) -> str:
        """Name of the implementation."""
        ...
    
    @property
    def domain(self) -> str:
        """Domain providing the implementation."""
        ...
    
    @property
    def redirect_uri(self) -> str:
        """Return the redirect uri."""
        ...
    
    @property
    def extra_authorize_data(self) -> dict:
        """Extra data that needs to be appended to the authorize url."""
        ...
    
    async def async_generate_authorize_url(self, flow_id: str) -> str:
        """Generate a url for the user to authorize."""
        ...
    
    async def async_resolve_external_data(self, external_data: Any) -> dict:
        """Resolve the authorization code to tokens."""
        ...
    


class AbstractOAuth2FlowHandler(config_entries.ConfigFlow, metaclass=ABCMeta):
    """Handle a config flow."""
    DOMAIN = ...
    VERSION = ...
    def __init__(self) -> None:
        """Instantiate config flow."""
        ...
    
    @property
    @abstractmethod
    def logger(self) -> logging.Logger:
        """Return logger."""
        ...
    
    @property
    def extra_authorize_data(self) -> dict:
        """Extra data that needs to be appended to the authorize url."""
        ...
    
    async def async_generate_authorize_url(self) -> str:
        """Generate a url for the user to authorize."""
        ...
    
    async def async_step_pick_implementation(self, user_input: dict | None = ...) -> FlowResult:
        """Handle a flow start."""
        ...
    
    async def async_step_auth(self, user_input: dict[str, Any] | None = ...) -> FlowResult:
        """Create an entry for auth."""
        ...
    
    async def async_step_creation(self, user_input: dict[str, Any] | None = ...) -> FlowResult:
        """Create config entry from external data."""
        ...
    
    async def async_step_authorize_rejected(self, data: None = ...) -> FlowResult:
        """Step to handle flow rejection."""
        ...
    
    async def async_oauth_create_entry(self, data: dict) -> FlowResult:
        """Create an entry for the flow.

        Ok to override if you want to fetch extra info or even add another step.
        """
        ...
    
    async def async_step_user(self, user_input: dict[str, Any] | None = ...) -> FlowResult:
        """Handle a flow start."""
        ...
    
    @classmethod
    def async_register_implementation(cls, hass: HomeAssistant, local_impl: LocalOAuth2Implementation) -> None:
        """Register a local implementation."""
        ...
    


@callback
def async_register_implementation(hass: HomeAssistant, domain: str, implementation: AbstractOAuth2Implementation) -> None:
    """Register an OAuth2 flow implementation for an integration."""
    ...

async def async_get_implementations(hass: HomeAssistant, domain: str) -> dict[str, AbstractOAuth2Implementation]:
    """Return OAuth2 implementations for specified domain."""
    ...

async def async_get_config_entry_implementation(hass: HomeAssistant, config_entry: config_entries.ConfigEntry) -> AbstractOAuth2Implementation:
    """Return the implementation for this config entry."""
    ...

@callback
def async_add_implementation_provider(hass: HomeAssistant, provider_domain: str, async_provide_implementation: Callable[[HomeAssistant, str], Awaitable[list[AbstractOAuth2Implementation]]]) -> None:
    """Add an implementation provider.

    If no implementation found, return None.
    """
    ...

class OAuth2AuthorizeCallbackView(http.HomeAssistantView):
    """OAuth2 Authorization Callback View."""
    requires_auth = ...
    url = ...
    name = ...
    async def get(self, request: web.Request) -> web.Response:
        """Receive authorization code."""
        ...
    


class OAuth2Session:
    """Session to make requests authenticated with OAuth2."""
    def __init__(self, hass: HomeAssistant, config_entry: config_entries.ConfigEntry, implementation: AbstractOAuth2Implementation) -> None:
        """Initialize an OAuth2 session."""
        ...
    
    @property
    def token(self) -> dict:
        """Return the token."""
        ...
    
    @property
    def valid_token(self) -> bool:
        """Return if token is still valid."""
        ...
    
    async def async_ensure_token_valid(self) -> None:
        """Ensure that the current token is valid."""
        ...
    
    async def async_request(self, method: str, url: str, **kwargs: Any) -> client.ClientResponse:
        """Make a request."""
        ...
    


async def async_oauth2_request(hass: HomeAssistant, token: dict, method: str, url: str, **kwargs: Any) -> client.ClientResponse:
    """Make an OAuth2 authenticated request.

    This method will not refresh tokens. Use OAuth2 session for that.
    """
    ...

