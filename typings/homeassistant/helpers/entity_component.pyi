"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from collections.abc import Callable, Iterable
from datetime import timedelta
from typing import Any, Generic
from typing_extensions import TypeVar
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, ServiceCall, SupportsResponse, callback
from homeassistant.loader import bind_hass
from . import entity
from .typing import ConfigType, DiscoveryInfoType

"""Helpers for components that manage entities."""
DEFAULT_SCAN_INTERVAL = ...
DATA_INSTANCES = ...
_EntityT = TypeVar("_EntityT", bound=entity.Entity, default=entity.Entity)
@bind_hass
async def async_update_entity(hass: HomeAssistant, entity_id: str) -> None:
    """Trigger an update for an entity."""
    ...

class EntityComponent(Generic[_EntityT]):
    """The EntityComponent manages platforms that manages entities.

    This class has the following responsibilities:
     - Process the configuration and set up a platform based component.
     - Manage the platforms and their entities.
     - Help extract the entities from a service call.
     - Listen for discovery events for platforms related to the domain.
    """
    def __init__(self, logger: logging.Logger, domain: str, hass: HomeAssistant, scan_interval: timedelta = ...) -> None:
        """Initialize an entity component."""
        ...
    
    @property
    def entities(self) -> Iterable[_EntityT]:
        """Return an iterable that returns all entities.

        As the underlying dicts may change when async context is lost,
        callers that iterate over this asynchronously should make a copy
        using list() before iterating.
        """
        ...
    
    def get_entity(self, entity_id: str) -> _EntityT | None:
        """Get an entity."""
        ...
    
    def register_shutdown(self) -> None:
        """Register shutdown on Home Assistant STOP event.

        Note: this is only required if the integration never calls
        `setup` or `async_setup`.
        """
        ...
    
    def setup(self, config: ConfigType) -> None:
        """Set up a full entity component.

        This doesn't block the executor to protect from deadlocks.
        """
        ...
    
    async def async_setup(self, config: ConfigType) -> None:
        """Set up a full entity component.

        Loads the platforms from the config and will listen for supported
        discovered platforms.

        This method must be run in the event loop.
        """
        ...
    
    async def async_setup_entry(self, config_entry: ConfigEntry) -> bool:
        """Set up a config entry."""
        ...
    
    async def async_unload_entry(self, config_entry: ConfigEntry) -> bool:
        """Unload a config entry."""
        ...
    
    async def async_extract_from_service(self, service_call: ServiceCall, expand_group: bool = ...) -> list[_EntityT]:
        """Extract all known and available entities from a service call.

        Will return an empty list if entities specified but unknown.

        This method must be run in the event loop.
        """
        ...
    
    @callback
    def async_register_legacy_entity_service(self, name: str, schema: dict[str | vol.Marker, Any] | vol.Schema, func: str | Callable[..., Any], required_features: list[int] | None = ..., supports_response: SupportsResponse = ...) -> None:
        """Register an entity service with a legacy response format."""
        ...
    
    @callback
    def async_register_entity_service(self, name: str, schema: dict[str | vol.Marker, Any] | vol.Schema, func: str | Callable[..., Any], required_features: list[int] | None = ..., supports_response: SupportsResponse = ...) -> None:
        """Register an entity service."""
        ...
    
    async def async_setup_platform(self, platform_type: str, platform_config: ConfigType, discovery_info: DiscoveryInfoType | None = ...) -> None:
        """Set up a platform for this component."""
        ...
    
    async def async_remove_entity(self, entity_id: str) -> None:
        """Remove an entity managed by one of the platforms."""
        ...
    
    async def async_prepare_reload(self, *, skip_reset: bool = ...) -> ConfigType | None:
        """Prepare reloading this entity component.

        This method must be run in the event loop.
        """
        ...
    


