"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Self
from homeassistant.core import HomeAssistant, State, callback
from .entity import Entity

"""Support for restoring entity states on startup."""
DATA_RESTORE_STATE = ...
_LOGGER = ...
STORAGE_KEY = ...
STORAGE_VERSION = ...
STATE_DUMP_INTERVAL = ...
STATE_EXPIRATION = ...
class ExtraStoredData(ABC):
    """Object to hold extra stored data."""
    @abstractmethod
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the extra data.

        Must be serializable by Home Assistant's JSONEncoder.
        """
        ...
    


class RestoredExtraData(ExtraStoredData):
    """Object to hold extra stored data loaded from storage."""
    def __init__(self, json_dict: dict[str, Any]) -> None:
        """Object to hold extra stored data."""
        ...
    
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the extra data."""
        ...
    


class StoredState:
    """Object to represent a stored state."""
    def __init__(self, state: State, extra_data: ExtraStoredData | None, last_seen: datetime) -> None:
        """Initialize a new stored state."""
        ...
    
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the stored state."""
        ...
    
    @classmethod
    def from_dict(cls, json_dict: dict) -> Self:
        """Initialize a stored state from a dict."""
        ...
    


async def async_load(hass: HomeAssistant) -> None:
    """Load the restore state task."""
    ...

@callback
def async_get(hass: HomeAssistant) -> RestoreStateData:
    """Get the restore state data helper."""
    ...

class RestoreStateData:
    """Helper class for managing the helper saved data."""
    @classmethod
    async def async_save_persistent_states(cls, hass: HomeAssistant) -> None:
        """Dump states now."""
        ...
    
    @classmethod
    async def async_get_instance(cls, hass: HomeAssistant) -> RestoreStateData:
        """Return the instance of this class."""
        ...
    
    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize the restore state data class."""
        ...
    
    async def async_setup(self) -> None:
        """Set up up the instance of this data helper."""
        ...
    
    async def async_load(self) -> None:
        """Load the instance of this data helper."""
        ...
    
    @callback
    def async_get_stored_states(self) -> list[StoredState]:
        """Get the set of states which should be stored.

        This includes the states of all registered entities, as well as the
        stored states from the previous run, which have not been created as
        entities on this run, and have not expired.
        """
        ...
    
    async def async_dump_states(self) -> None:
        """Save the current state machine to storage."""
        ...
    
    @callback
    def async_setup_dump(self, *args: Any) -> None:
        """Set up the restore state listeners."""
        ...
    
    @callback
    def async_restore_entity_added(self, entity: RestoreEntity) -> None:
        """Store this entity's state when hass is shutdown."""
        ...
    
    @callback
    def async_restore_entity_removed(self, entity_id: str, extra_data: ExtraStoredData | None) -> None:
        """Unregister this entity from saving state."""
        ...
    


class RestoreEntity(Entity):
    """Mixin class for restoring previous entity state."""
    async def async_internal_added_to_hass(self) -> None:
        """Register this entity as a restorable entity."""
        ...
    
    async def async_internal_will_remove_from_hass(self) -> None:
        """Run when entity will be removed from hass."""
        ...
    
    async def async_get_last_state(self) -> State | None:
        """Get the entity state from the previous run."""
        ...
    
    async def async_get_last_extra_data(self) -> ExtraStoredData | None:
        """Get the entity specific state data from the previous run."""
        ...
    
    @property
    def extra_restore_state_data(self) -> ExtraStoredData | None:
        """Return entity specific state data to be restored.

        Implemented by platform classes.
        """
        ...
    


