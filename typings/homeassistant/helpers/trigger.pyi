"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from collections.abc import Callable, Coroutine
from dataclasses import dataclass
from typing import Any, Protocol, TypedDict
from homeassistant.core import CALLBACK_TYPE, Context, HassJob, HomeAssistant, callback
from .typing import ConfigType, TemplateVarsType

"""Triggers."""
_PLATFORM_ALIASES = ...
DATA_PLUGGABLE_ACTIONS = ...
class TriggerProtocol(Protocol):
    """Define the format of trigger modules.

    Each module must define either TRIGGER_SCHEMA or async_validate_trigger_config.
    """
    TRIGGER_SCHEMA: vol.Schema
    async def async_validate_trigger_config(self, hass: HomeAssistant, config: ConfigType) -> ConfigType:
        """Validate config."""
        ...
    
    async def async_attach_trigger(self, hass: HomeAssistant, config: ConfigType, action: TriggerActionType, trigger_info: TriggerInfo) -> CALLBACK_TYPE:
        """Attach a trigger."""
        ...
    


class TriggerActionType(Protocol):
    """Protocol type for trigger action callback."""
    async def __call__(self, run_variables: dict[str, Any], context: Context | None = ...) -> None:
        """Define action callback type."""
        ...
    


class TriggerData(TypedDict):
    """Trigger data."""
    id: str
    idx: str
    alias: str | None
    ...


class TriggerInfo(TypedDict):
    """Information about trigger."""
    domain: str
    name: str
    home_assistant_start: bool
    variables: TemplateVarsType
    trigger_data: TriggerData
    ...


@dataclass(slots=True)
class PluggableActionsEntry:
    """Holder to keep track of all plugs and actions for a given trigger."""
    plugs: set[PluggableAction] = ...
    actions: dict[object, tuple[HassJob[[dict[str, Any], Context | None], Coroutine[Any, Any, None]], dict[str, Any],],] = ...


class PluggableAction:
    """A pluggable action handler."""
    _entry: PluggableActionsEntry | None = ...
    def __init__(self, update: CALLBACK_TYPE | None = ...) -> None:
        """Initialize a pluggable action.

        :param update: callback triggered whenever triggers are attached or removed.
        """
        ...
    
    def __bool__(self) -> bool:
        """Return if we have something attached."""
        ...
    
    @callback
    def async_run_update(self) -> None:
        """Run update function if one exists."""
        ...
    
    @staticmethod
    @callback
    def async_get_registry(hass: HomeAssistant) -> dict[tuple, PluggableActionsEntry]:
        """Return the pluggable actions registry."""
        ...
    
    @staticmethod
    @callback
    def async_attach_trigger(hass: HomeAssistant, trigger: dict[str, str], action: TriggerActionType, variables: dict[str, Any]) -> CALLBACK_TYPE:
        """Attach an action to a trigger entry.

        Existing or future plugs registered will be attached.
        """
        ...
    
    @callback
    def async_register(self, hass: HomeAssistant, trigger: dict[str, str]) -> CALLBACK_TYPE:
        """Register plug in the global plugs dictionary."""
        ...
    
    async def async_run(self, hass: HomeAssistant, context: Context | None = ...) -> None:
        """Run all actions."""
        ...
    


async def async_validate_trigger_config(hass: HomeAssistant, trigger_config: list[ConfigType]) -> list[ConfigType]:
    """Validate triggers."""
    ...

async def async_initialize_triggers(hass: HomeAssistant, trigger_config: list[ConfigType], action: Callable, domain: str, name: str, log_cb: Callable, home_assistant_start: bool = ..., variables: TemplateVarsType = ...) -> CALLBACK_TYPE | None:
    """Initialize triggers."""
    ...

