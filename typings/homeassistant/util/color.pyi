"""
This type stub file was generated by pyright.
"""

import attr
from typing import NamedTuple

"""Color util methods."""
class RGBColor(NamedTuple):
    """RGB hex values."""
    r: int
    g: int
    b: int
    ...


COLORS = ...
@attr.s()
class XYPoint:
    """Represents a CIE 1931 XY coordinate pair."""
    x: float = ...
    y: float = ...


@attr.s()
class GamutType:
    """Represents the Gamut of a light."""
    red: XYPoint = ...
    green: XYPoint = ...
    blue: XYPoint = ...


def color_name_to_rgb(color_name: str) -> RGBColor:
    """Convert color name to RGB hex value."""
    ...

def color_RGB_to_xy(iR: int, iG: int, iB: int, Gamut: GamutType | None = ...) -> tuple[float, float]:
    """Convert from RGB color to XY color."""
    ...

def color_RGB_to_xy_brightness(iR: int, iG: int, iB: int, Gamut: GamutType | None = ...) -> tuple[float, float, int]:
    """Convert from RGB color to XY color."""
    ...

def color_xy_to_RGB(vX: float, vY: float, Gamut: GamutType | None = ...) -> tuple[int, int, int]:
    """Convert from XY to a normalized RGB."""
    ...

def color_xy_brightness_to_RGB(vX: float, vY: float, ibrightness: int, Gamut: GamutType | None = ...) -> tuple[int, int, int]:
    """Convert from XYZ to RGB."""
    ...

def color_hsb_to_RGB(fH: float, fS: float, fB: float) -> tuple[int, int, int]:
    """Convert a hsb into its rgb representation."""
    ...

def color_RGB_to_hsv(iR: float, iG: float, iB: float) -> tuple[float, float, float]:
    """Convert an rgb color to its hsv representation.

    Hue is scaled 0-360
    Sat is scaled 0-100
    Val is scaled 0-100
    """
    ...

def color_RGB_to_hs(iR: float, iG: float, iB: float) -> tuple[float, float]:
    """Convert an rgb color to its hs representation."""
    ...

def color_hsv_to_RGB(iH: float, iS: float, iV: float) -> tuple[int, int, int]:
    """Convert an hsv color into its rgb representation.

    Hue is scaled 0-360
    Sat is scaled 0-100
    Val is scaled 0-100
    """
    ...

def color_hs_to_RGB(iH: float, iS: float) -> tuple[int, int, int]:
    """Convert an hsv color into its rgb representation."""
    ...

def color_xy_to_hs(vX: float, vY: float, Gamut: GamutType | None = ...) -> tuple[float, float]:
    """Convert an xy color to its hs representation."""
    ...

def color_hs_to_xy(iH: float, iS: float, Gamut: GamutType | None = ...) -> tuple[float, float]:
    """Convert an hs color to its xy representation."""
    ...

def match_max_scale(input_colors: tuple[int, ...], output_colors: tuple[float, ...]) -> tuple[int, ...]:
    """Match the maximum value of the output to the input."""
    ...

def color_rgb_to_rgbw(r: int, g: int, b: int) -> tuple[int, int, int, int]:
    """Convert an rgb color to an rgbw representation."""
    ...

def color_rgbw_to_rgb(r: int, g: int, b: int, w: int) -> tuple[int, int, int]:
    """Convert an rgbw color to an rgb representation."""
    ...

def color_rgb_to_rgbww(r: int, g: int, b: int, min_kelvin: int, max_kelvin: int) -> tuple[int, int, int, int, int]:
    """Convert an rgb color to an rgbww representation."""
    ...

def color_rgbww_to_rgb(r: int, g: int, b: int, cw: int, ww: int, min_kelvin: int, max_kelvin: int) -> tuple[int, int, int]:
    """Convert an rgbww color to an rgb representation."""
    ...

def color_rgb_to_hex(r: int, g: int, b: int) -> str:
    """Return a RGB color from a hex color string."""
    ...

def rgb_hex_to_rgb_list(hex_string: str) -> list[int]:
    """Return an RGB color value list from a hex color string."""
    ...

def color_temperature_to_hs(color_temperature_kelvin: float) -> tuple[float, float]:
    """Return an hs color from a color temperature in Kelvin."""
    ...

def color_temperature_to_rgb(color_temperature_kelvin: float) -> tuple[float, float, float]:
    """Return an RGB color from a color temperature in Kelvin.

    This is a rough approximation based on the formula provided by T. Helland
    http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
    """
    ...

def color_temperature_to_rgbww(temperature: int, brightness: int, min_kelvin: int, max_kelvin: int) -> tuple[int, int, int, int, int]:
    """Convert color temperature in kelvin to rgbcw.

    Returns a (r, g, b, cw, ww) tuple.
    """
    ...

def rgbww_to_color_temperature(rgbww: tuple[int, int, int, int, int], min_kelvin: int, max_kelvin: int) -> tuple[int, int]:
    """Convert rgbcw to color temperature in kelvin.

    Returns a tuple (color_temperature, brightness).
    """
    ...

def color_temperature_mired_to_kelvin(mired_temperature: float) -> int:
    """Convert absolute mired shift to degrees kelvin."""
    ...

def color_temperature_kelvin_to_mired(kelvin_temperature: float) -> int:
    """Convert degrees kelvin to mired shift."""
    ...

def cross_product(p1: XYPoint, p2: XYPoint) -> float:
    """Calculate the cross product of two XYPoints."""
    ...

def get_distance_between_two_points(one: XYPoint, two: XYPoint) -> float:
    """Calculate the distance between two XYPoints."""
    ...

def get_closest_point_to_line(A: XYPoint, B: XYPoint, P: XYPoint) -> XYPoint:
    """Find the closest point from P to a line defined by A and B.

    This point will be reproducible by the lamp
    as it is on the edge of the gamut.
    """
    ...

def get_closest_point_to_point(xy_tuple: tuple[float, float], Gamut: GamutType) -> tuple[float, float]:
    """Get the closest matching color within the gamut of the light.

    Should only be used if the supplied color is outside of the color gamut.
    """
    ...

def check_point_in_lamps_reach(p: tuple[float, float], Gamut: GamutType) -> bool:
    """Check if the provided XYPoint can be recreated by a Hue lamp."""
    ...

def check_valid_gamut(Gamut: GamutType) -> bool:
    """Check if the supplied gamut is valid."""
    ...

