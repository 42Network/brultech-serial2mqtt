"""
This type stub file was generated by pyright.
"""

import asyncio
import collections
import datetime as dt
import functools as ft
import hashlib
import logging
import secrets
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Callable
from contextlib import suppress
from dataclasses import dataclass
from enum import StrEnum
from http import HTTPStatus
from typing import Any, Final, Required, TypedDict, final
from urllib.parse import quote, urlparse
from aiohttp import web
from aiohttp.hdrs import CACHE_CONTROL, CONTENT_TYPE
from aiohttp.typedefs import LooseHeaders
from yarl import URL
from homeassistant.components import websocket_api
from homeassistant.components.http import HomeAssistantView, KEY_AUTHENTICATED
from homeassistant.components.websocket_api import ERR_NOT_SUPPORTED, ERR_UNKNOWN_ERROR
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_ENTITY_PICTURE, SERVICE_MEDIA_NEXT_TRACK, SERVICE_MEDIA_PAUSE, SERVICE_MEDIA_PLAY, SERVICE_MEDIA_PLAY_PAUSE, SERVICE_MEDIA_PREVIOUS_TRACK, SERVICE_MEDIA_SEEK, SERVICE_MEDIA_STOP, SERVICE_REPEAT_SET, SERVICE_SHUFFLE_SET, SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, SERVICE_VOLUME_DOWN, SERVICE_VOLUME_MUTE, SERVICE_VOLUME_SET, SERVICE_VOLUME_UP, STATE_IDLE, STATE_OFF, STATE_PLAYING, STATE_STANDBY
from homeassistant.core import HomeAssistant
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.network import get_url
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from .browse_media import BrowseMedia, async_process_play_media_url
from .const import ATTR_APP_ID, ATTR_APP_NAME, ATTR_ENTITY_PICTURE_LOCAL, ATTR_GROUP_MEMBERS, ATTR_INPUT_SOURCE, ATTR_INPUT_SOURCE_LIST, ATTR_MEDIA_ALBUM_ARTIST, ATTR_MEDIA_ALBUM_NAME, ATTR_MEDIA_ANNOUNCE, ATTR_MEDIA_ARTIST, ATTR_MEDIA_CHANNEL, ATTR_MEDIA_CONTENT_ID, ATTR_MEDIA_CONTENT_TYPE, ATTR_MEDIA_DURATION, ATTR_MEDIA_ENQUEUE, ATTR_MEDIA_EPISODE, ATTR_MEDIA_EXTRA, ATTR_MEDIA_PLAYLIST, ATTR_MEDIA_POSITION, ATTR_MEDIA_POSITION_UPDATED_AT, ATTR_MEDIA_REPEAT, ATTR_MEDIA_SEASON, ATTR_MEDIA_SEEK_POSITION, ATTR_MEDIA_SERIES_TITLE, ATTR_MEDIA_SHUFFLE, ATTR_MEDIA_TITLE, ATTR_MEDIA_TRACK, ATTR_MEDIA_VOLUME_LEVEL, ATTR_MEDIA_VOLUME_MUTED, ATTR_SOUND_MODE, ATTR_SOUND_MODE_LIST, CONTENT_AUTH_EXPIRY_TIME, DOMAIN, MEDIA_CLASS_DIRECTORY, MediaClass, MediaPlayerEntityFeature, MediaPlayerState, MediaType, REPEAT_MODES, RepeatMode, SERVICE_CLEAR_PLAYLIST, SERVICE_JOIN, SERVICE_PLAY_MEDIA, SERVICE_SELECT_SOUND_MODE, SERVICE_SELECT_SOURCE, SERVICE_UNJOIN, SUPPORT_BROWSE_MEDIA, SUPPORT_CLEAR_PLAYLIST, SUPPORT_GROUPING, SUPPORT_NEXT_TRACK, SUPPORT_PAUSE, SUPPORT_PLAY, SUPPORT_PLAY_MEDIA, SUPPORT_PREVIOUS_TRACK, SUPPORT_REPEAT_SET, SUPPORT_SEEK, SUPPORT_SELECT_SOUND_MODE, SUPPORT_SELECT_SOURCE, SUPPORT_SHUFFLE_SET, SUPPORT_STOP, SUPPORT_TURN_OFF, SUPPORT_TURN_ON, SUPPORT_VOLUME_MUTE, SUPPORT_VOLUME_SET, SUPPORT_VOLUME_STEP
from .errors import BrowseError

"""Component to interface with various media players."""
_LOGGER = ...
ENTITY_ID_FORMAT = ...
CACHE_IMAGES: Final = ...
CACHE_MAXSIZE: Final = ...
CACHE_LOCK: Final = ...
CACHE_URL: Final = ...
CACHE_CONTENT: Final = ...
SCAN_INTERVAL = ...
class MediaPlayerEnqueue(StrEnum):
    """Enqueue types for playing media."""
    ADD = ...
    NEXT = ...
    PLAY = ...
    REPLACE = ...


class MediaPlayerDeviceClass(StrEnum):
    """Device class for media players."""
    TV = ...
    SPEAKER = ...
    RECEIVER = ...


DEVICE_CLASSES_SCHEMA = ...
DEVICE_CLASSES = ...
DEVICE_CLASS_TV = ...
DEVICE_CLASS_SPEAKER = ...
DEVICE_CLASS_RECEIVER = ...
MEDIA_PLAYER_PLAY_MEDIA_SCHEMA = ...
ATTR_TO_PROPERTY = ...
class _CacheImage(TypedDict, total=False):
    """Class to hold a cached image."""
    lock: Required[asyncio.Lock]
    content: tuple[bytes | None, str | None]
    ...


class _ImageCache(TypedDict):
    """Class to hold a cached image."""
    images: collections.OrderedDict[str, _CacheImage]
    maxsize: int
    ...


_ENTITY_IMAGE_CACHE = ...
@bind_hass
def is_on(hass: HomeAssistant, entity_id: str | None = ...) -> bool:
    """Return true if specified media player entity_id is on.

    Check all media player if no entity_id specified.
    """
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for media_players."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class MediaPlayerEntityDescription(EntityDescription):
    """A class that describes media player entities."""
    device_class: MediaPlayerDeviceClass | None = ...


class MediaPlayerEntity(Entity):
    """ABC for media player entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: MediaPlayerEntityDescription
    _access_token: str | None = ...
    _attr_app_id: str | None = ...
    _attr_app_name: str | None = ...
    _attr_device_class: MediaPlayerDeviceClass | None
    _attr_group_members: list[str] | None = ...
    _attr_is_volume_muted: bool | None = ...
    _attr_media_album_artist: str | None = ...
    _attr_media_album_name: str | None = ...
    _attr_media_artist: str | None = ...
    _attr_media_channel: str | None = ...
    _attr_media_content_id: str | None = ...
    _attr_media_content_type: MediaType | str | None = ...
    _attr_media_duration: int | None = ...
    _attr_media_episode: str | None = ...
    _attr_media_image_hash: str | None
    _attr_media_image_remotely_accessible: bool = ...
    _attr_media_image_url: str | None = ...
    _attr_media_playlist: str | None = ...
    _attr_media_position_updated_at: dt.datetime | None = ...
    _attr_media_position: int | None = ...
    _attr_media_season: str | None = ...
    _attr_media_series_title: str | None = ...
    _attr_media_title: str | None = ...
    _attr_media_track: int | None = ...
    _attr_repeat: RepeatMode | str | None = ...
    _attr_shuffle: bool | None = ...
    _attr_sound_mode_list: list[str] | None = ...
    _attr_sound_mode: str | None = ...
    _attr_source_list: list[str] | None = ...
    _attr_source: str | None = ...
    _attr_state: MediaPlayerState | None = ...
    _attr_supported_features: MediaPlayerEntityFeature = ...
    _attr_volume_level: float | None = ...
    @property
    def device_class(self) -> MediaPlayerDeviceClass | None:
        """Return the class of this entity."""
        ...
    
    @property
    def state(self) -> MediaPlayerState | None:
        """State of the player."""
        ...
    
    @property
    def access_token(self) -> str:
        """Access token for this media player."""
        ...
    
    @property
    def volume_level(self) -> float | None:
        """Volume level of the media player (0..1)."""
        ...
    
    @property
    def is_volume_muted(self) -> bool | None:
        """Boolean if volume is currently muted."""
        ...
    
    @property
    def media_content_id(self) -> str | None:
        """Content ID of current playing media."""
        ...
    
    @property
    def media_content_type(self) -> MediaType | str | None:
        """Content type of current playing media."""
        ...
    
    @property
    def media_duration(self) -> int | None:
        """Duration of current playing media in seconds."""
        ...
    
    @property
    def media_position(self) -> int | None:
        """Position of current playing media in seconds."""
        ...
    
    @property
    def media_position_updated_at(self) -> dt.datetime | None:
        """When was the position of the current playing media valid.

        Returns value from homeassistant.util.dt.utcnow().
        """
        ...
    
    @property
    def media_image_url(self) -> str | None:
        """Image url of current playing media."""
        ...
    
    @property
    def media_image_remotely_accessible(self) -> bool:
        """If the image url is remotely accessible."""
        ...
    
    @property
    def media_image_hash(self) -> str | None:
        """Hash value for media image."""
        ...
    
    async def async_get_media_image(self) -> tuple[bytes | None, str | None]:
        """Fetch media image of current playing image."""
        ...
    
    async def async_get_browse_image(self, media_content_type: str, media_content_id: str, media_image_id: str | None = ...) -> tuple[bytes | None, str | None]:
        """Optionally fetch internally accessible image for media browser.

        Must be implemented by integration.
        """
        ...
    
    @property
    def media_title(self) -> str | None:
        """Title of current playing media."""
        ...
    
    @property
    def media_artist(self) -> str | None:
        """Artist of current playing media, music track only."""
        ...
    
    @property
    def media_album_name(self) -> str | None:
        """Album name of current playing media, music track only."""
        ...
    
    @property
    def media_album_artist(self) -> str | None:
        """Album artist of current playing media, music track only."""
        ...
    
    @property
    def media_track(self) -> int | None:
        """Track number of current playing media, music track only."""
        ...
    
    @property
    def media_series_title(self) -> str | None:
        """Title of series of current playing media, TV show only."""
        ...
    
    @property
    def media_season(self) -> str | None:
        """Season of current playing media, TV show only."""
        ...
    
    @property
    def media_episode(self) -> str | None:
        """Episode of current playing media, TV show only."""
        ...
    
    @property
    def media_channel(self) -> str | None:
        """Channel currently playing."""
        ...
    
    @property
    def media_playlist(self) -> str | None:
        """Title of Playlist currently playing."""
        ...
    
    @property
    def app_id(self) -> str | None:
        """ID of the current running app."""
        ...
    
    @property
    def app_name(self) -> str | None:
        """Name of the current running app."""
        ...
    
    @property
    def source(self) -> str | None:
        """Name of the current input source."""
        ...
    
    @property
    def source_list(self) -> list[str] | None:
        """List of available input sources."""
        ...
    
    @property
    def sound_mode(self) -> str | None:
        """Name of the current sound mode."""
        ...
    
    @property
    def sound_mode_list(self) -> list[str] | None:
        """List of available sound modes."""
        ...
    
    @property
    def shuffle(self) -> bool | None:
        """Boolean if shuffle is enabled."""
        ...
    
    @property
    def repeat(self) -> RepeatMode | str | None:
        """Return current repeat mode."""
        ...
    
    @property
    def group_members(self) -> list[str] | None:
        """List of members which are currently grouped together."""
        ...
    
    @property
    def supported_features(self) -> MediaPlayerEntityFeature:
        """Flag media player features that are supported."""
        ...
    
    def turn_on(self) -> None:
        """Turn the media player on."""
        ...
    
    async def async_turn_on(self) -> None:
        """Turn the media player on."""
        ...
    
    def turn_off(self) -> None:
        """Turn the media player off."""
        ...
    
    async def async_turn_off(self) -> None:
        """Turn the media player off."""
        ...
    
    def mute_volume(self, mute: bool) -> None:
        """Mute the volume."""
        ...
    
    async def async_mute_volume(self, mute: bool) -> None:
        """Mute the volume."""
        ...
    
    def set_volume_level(self, volume: float) -> None:
        """Set volume level, range 0..1."""
        ...
    
    async def async_set_volume_level(self, volume: float) -> None:
        """Set volume level, range 0..1."""
        ...
    
    def media_play(self) -> None:
        """Send play command."""
        ...
    
    async def async_media_play(self) -> None:
        """Send play command."""
        ...
    
    def media_pause(self) -> None:
        """Send pause command."""
        ...
    
    async def async_media_pause(self) -> None:
        """Send pause command."""
        ...
    
    def media_stop(self) -> None:
        """Send stop command."""
        ...
    
    async def async_media_stop(self) -> None:
        """Send stop command."""
        ...
    
    def media_previous_track(self) -> None:
        """Send previous track command."""
        ...
    
    async def async_media_previous_track(self) -> None:
        """Send previous track command."""
        ...
    
    def media_next_track(self) -> None:
        """Send next track command."""
        ...
    
    async def async_media_next_track(self) -> None:
        """Send next track command."""
        ...
    
    def media_seek(self, position: float) -> None:
        """Send seek command."""
        ...
    
    async def async_media_seek(self, position: float) -> None:
        """Send seek command."""
        ...
    
    def play_media(self, media_type: MediaType | str, media_id: str, **kwargs: Any) -> None:
        """Play a piece of media."""
        ...
    
    async def async_play_media(self, media_type: MediaType | str, media_id: str, **kwargs: Any) -> None:
        """Play a piece of media."""
        ...
    
    def select_source(self, source: str) -> None:
        """Select input source."""
        ...
    
    async def async_select_source(self, source: str) -> None:
        """Select input source."""
        ...
    
    def select_sound_mode(self, sound_mode: str) -> None:
        """Select sound mode."""
        ...
    
    async def async_select_sound_mode(self, sound_mode: str) -> None:
        """Select sound mode."""
        ...
    
    def clear_playlist(self) -> None:
        """Clear players playlist."""
        ...
    
    async def async_clear_playlist(self) -> None:
        """Clear players playlist."""
        ...
    
    def set_shuffle(self, shuffle: bool) -> None:
        """Enable/disable shuffle mode."""
        ...
    
    async def async_set_shuffle(self, shuffle: bool) -> None:
        """Enable/disable shuffle mode."""
        ...
    
    def set_repeat(self, repeat: RepeatMode) -> None:
        """Set repeat mode."""
        ...
    
    async def async_set_repeat(self, repeat: RepeatMode) -> None:
        """Set repeat mode."""
        ...
    
    @final
    @property
    def support_play(self) -> bool:
        """Boolean if play is supported."""
        ...
    
    @final
    @property
    def support_pause(self) -> bool:
        """Boolean if pause is supported."""
        ...
    
    @final
    @property
    def support_stop(self) -> bool:
        """Boolean if stop is supported."""
        ...
    
    @final
    @property
    def support_seek(self) -> bool:
        """Boolean if seek is supported."""
        ...
    
    @final
    @property
    def support_volume_set(self) -> bool:
        """Boolean if setting volume is supported."""
        ...
    
    @final
    @property
    def support_volume_mute(self) -> bool:
        """Boolean if muting volume is supported."""
        ...
    
    @final
    @property
    def support_previous_track(self) -> bool:
        """Boolean if previous track command supported."""
        ...
    
    @final
    @property
    def support_next_track(self) -> bool:
        """Boolean if next track command supported."""
        ...
    
    @final
    @property
    def support_play_media(self) -> bool:
        """Boolean if play media command supported."""
        ...
    
    @final
    @property
    def support_select_source(self) -> bool:
        """Boolean if select source command supported."""
        ...
    
    @final
    @property
    def support_select_sound_mode(self) -> bool:
        """Boolean if select sound mode command supported."""
        ...
    
    @final
    @property
    def support_clear_playlist(self) -> bool:
        """Boolean if clear playlist command supported."""
        ...
    
    @final
    @property
    def support_shuffle_set(self) -> bool:
        """Boolean if shuffle is supported."""
        ...
    
    @final
    @property
    def support_grouping(self) -> bool:
        """Boolean if player grouping is supported."""
        ...
    
    async def async_toggle(self) -> None:
        """Toggle the power on the media player."""
        ...
    
    async def async_volume_up(self) -> None:
        """Turn volume up for media player.

        This method is a coroutine.
        """
        ...
    
    async def async_volume_down(self) -> None:
        """Turn volume down for media player.

        This method is a coroutine.
        """
        ...
    
    async def async_media_play_pause(self) -> None:
        """Play or pause the media player."""
        ...
    
    @property
    def entity_picture(self) -> str | None:
        """Return image of the media playing."""
        ...
    
    @property
    def media_image_local(self) -> str | None:
        """Return local url to media image."""
        ...
    
    @property
    def capability_attributes(self) -> dict[str, Any]:
        """Return capability attributes."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the state attributes."""
        ...
    
    async def async_browse_media(self, media_content_type: MediaType | str | None = ..., media_content_id: str | None = ...) -> BrowseMedia:
        """Return a BrowseMedia instance.

        The BrowseMedia instance will be used by the
        "media_player/browse_media" websocket command.
        """
        ...
    
    def join_players(self, group_members: list[str]) -> None:
        """Join `group_members` as a player group with the current player."""
        ...
    
    async def async_join_players(self, group_members: list[str]) -> None:
        """Join `group_members` as a player group with the current player."""
        ...
    
    def unjoin_player(self) -> None:
        """Remove this player from any group."""
        ...
    
    async def async_unjoin_player(self) -> None:
        """Remove this player from any group."""
        ...
    
    def get_browse_image_url(self, media_content_type: str, media_content_id: str, media_image_id: str | None = ...) -> str:
        """Generate an url for a media browser image."""
        ...
    


class MediaPlayerImageView(HomeAssistantView):
    """Media player view to serve an image."""
    requires_auth = ...
    url = ...
    name = ...
    extra_urls = ...
    def __init__(self, component: EntityComponent[MediaPlayerEntity]) -> None:
        """Initialize a media player view."""
        ...
    
    async def get(self, request: web.Request, entity_id: str, media_content_type: MediaType | str | None = ..., media_content_id: str | None = ...) -> web.Response:
        """Start a get request."""
        ...
    


@websocket_api.websocket_command({ vol.Required("type"): "media_player/browse_media",vol.Required("entity_id"): cv.entity_id,vol.Inclusive(ATTR_MEDIA_CONTENT_TYPE, "media_ids", "media_content_type and media_content_id must be provided together"): str,vol.Inclusive(ATTR_MEDIA_CONTENT_ID, "media_ids", "media_content_type and media_content_id must be provided together"): str })
@websocket_api.async_response
async def websocket_browse_media(hass: HomeAssistant, connection: websocket_api.connection.ActiveConnection, msg: dict[str, Any]) -> None:
    """Browse media available to the media_player entity.

    To use, media_player integrations can implement
    MediaPlayerEntity.async_browse_media()
    """
    ...

async def async_fetch_image(logger: logging.Logger, hass: HomeAssistant, url: str) -> tuple[bytes | None, str | None]:
    """Retrieve an image."""
    ...

