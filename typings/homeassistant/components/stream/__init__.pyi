"""
This type stub file was generated by pyright.
"""

import asyncio
import copy
import logging
import secrets
import threading
import time
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Callable, Mapping
from types import MappingProxyType
from typing import Any, Final, TYPE_CHECKING, cast
from yarl import URL
from homeassistant.const import EVENT_HOMEASSISTANT_STOP, EVENT_LOGGING_CHANGED
from homeassistant.core import Event, HomeAssistant, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.typing import ConfigType
from .const import ATTR_ENDPOINTS, ATTR_SETTINGS, ATTR_STREAMS, CONF_EXTRA_PART_WAIT_TIME, CONF_LL_HLS, CONF_PART_DURATION, CONF_RTSP_TRANSPORT, CONF_SEGMENT_DURATION, CONF_USE_WALLCLOCK_AS_TIMESTAMPS, DOMAIN, FORMAT_CONTENT_TYPE, HLS_PROVIDER, MAX_SEGMENTS, OUTPUT_FORMATS, OUTPUT_IDLE_TIMEOUT, RECORDER_PROVIDER, RTSP_TRANSPORTS, SEGMENT_DURATION_ADJUSTER, SOURCE_TIMEOUT, STREAM_RESTART_INCREMENT, STREAM_RESTART_RESET_TIME
from .core import IdleTimer, KeyFrameConverter, Orientation, PROVIDERS, STREAM_SETTINGS_NON_LL_HLS, StreamOutput, StreamSettings
from .diagnostics import Diagnostics
from .hls import HlsStreamOutput, async_setup_hls
from homeassistant.components.camera import DynamicStreamSettings

"""Provide functionality to stream video source.

Components use create_stream with a stream source (e.g. an rtsp url) to create
a new Stream object. Stream manages:
  - Background work to fetch and decode a stream
  - Desired output formats
  - Home Assistant URLs for viewing a stream
  - Access tokens for URLs for viewing a stream

A Stream consists of a background worker, and one or more output formats each
with their own idle timeout managed by the stream component. When an output
format is no longer in use, the stream component will expire it. When there
are no active output formats, the background worker is shut down and access
tokens are expired. Alternatively, a Stream can be configured with keepalive
to always keep workers active.
"""
if TYPE_CHECKING:
    ...
__all__ = ["ATTR_SETTINGS", "CONF_EXTRA_PART_WAIT_TIME", "CONF_RTSP_TRANSPORT", "CONF_USE_WALLCLOCK_AS_TIMESTAMPS", "DOMAIN", "FORMAT_CONTENT_TYPE", "HLS_PROVIDER", "OUTPUT_FORMATS", "RTSP_TRANSPORTS", "SOURCE_TIMEOUT", "Stream", "create_stream", "Orientation"]
_LOGGER = ...
def redact_credentials(url: str) -> str:
    """Redact credentials from string data."""
    ...

def create_stream(hass: HomeAssistant, stream_source: str, options: Mapping[str, str | bool | float], dynamic_stream_settings: DynamicStreamSettings, stream_label: str | None = ...) -> Stream:
    """Create a stream with the specified identifier based on the source url.

    The stream_source is typically an rtsp url (though any url accepted by ffmpeg is fine) and
    options (see STREAM_OPTIONS_SCHEMA) are converted and passed into pyav / ffmpeg.

    The stream_label is a string used as an additional message in logging.
    """
    ...

DOMAIN_SCHEMA = ...
CONFIG_SCHEMA = ...
@callback
def update_pyav_logging(_event: Event | None = ...) -> None:
    """Adjust libav logging to only log when the stream logger is at DEBUG."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up stream."""
    ...

class Stream:
    """Represents a single stream."""
    def __init__(self, hass: HomeAssistant, source: str, pyav_options: dict[str, str], stream_settings: StreamSettings, dynamic_stream_settings: DynamicStreamSettings, stream_label: str | None = ...) -> None:
        """Initialize a stream."""
        ...
    
    def endpoint_url(self, fmt: str) -> str:
        """Start the stream and returns a url for the output format."""
        ...
    
    def outputs(self) -> Mapping[str, StreamOutput]:
        """Return a copy of the stream outputs."""
        ...
    
    def add_provider(self, fmt: str, timeout: int = ...) -> StreamOutput:
        """Add provider output stream."""
        ...
    
    async def remove_provider(self, provider: StreamOutput) -> None:
        """Remove provider output stream."""
        ...
    
    def check_idle(self) -> None:
        """Reset access token if all providers are idle."""
        ...
    
    @property
    def available(self) -> bool:
        """Return False if the stream is started and known to be unavailable."""
        ...
    
    def set_update_callback(self, update_callback: Callable[[], None]) -> None:
        """Set callback to run when state changes."""
        ...
    
    async def start(self) -> None:
        """Start a stream.

        Uses an asyncio.Lock to avoid conflicts with _stop().
        """
        ...
    
    def update_source(self, new_source: str) -> None:
        """Restart the stream with a new stream source."""
        ...
    
    async def stop(self) -> None:
        """Remove outputs and access token."""
        ...
    
    async def async_record(self, video_path: str, duration: int = ..., lookback: int = ...) -> None:
        """Make a .mp4 recording from a provided stream."""
        ...
    
    async def async_get_image(self, width: int | None = ..., height: int | None = ..., wait_for_next_keyframe: bool = ...) -> bytes | None:
        """Fetch an image from the Stream and return it as a jpeg in bytes.

        Calls async_get_image from KeyFrameConverter. async_get_image should only be
        called directly from the main loop and not from an executor thread as it uses
        hass.add_executor_job underneath the hood.
        """
        ...
    
    def get_diagnostics(self) -> dict[str, Any]:
        """Return diagnostics information for the stream."""
        ...
    


STREAM_OPTIONS_SCHEMA: Final = ...
