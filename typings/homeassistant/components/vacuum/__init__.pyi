"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import voluptuous as vol
from __future__ import annotations
from collections.abc import Mapping
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag
from functools import partial
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_BATTERY_LEVEL, ATTR_COMMAND, SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_IDLE, STATE_ON, STATE_PAUSED
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import config_validation as cv, issue_registry as ir
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, make_entity_service_schema
from homeassistant.helpers.entity import Entity, EntityDescription, ToggleEntity, ToggleEntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.entity_platform import EntityPlatform
from homeassistant.helpers.icon import icon_for_battery_level
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import async_get_issue_tracker, async_suggest_report_issue, bind_hass

"""Support for vacuum cleaner robots (botvacs)."""
_LOGGER = ...
DOMAIN = ...
ENTITY_ID_FORMAT = ...
SCAN_INTERVAL = ...
ATTR_BATTERY_ICON = ...
ATTR_CLEANED_AREA = ...
ATTR_FAN_SPEED = ...
ATTR_FAN_SPEED_LIST = ...
ATTR_PARAMS = ...
ATTR_STATUS = ...
SERVICE_CLEAN_SPOT = ...
SERVICE_LOCATE = ...
SERVICE_RETURN_TO_BASE = ...
SERVICE_SEND_COMMAND = ...
SERVICE_SET_FAN_SPEED = ...
SERVICE_START_PAUSE = ...
SERVICE_START = ...
SERVICE_PAUSE = ...
SERVICE_STOP = ...
STATE_CLEANING = ...
STATE_DOCKED = ...
STATE_RETURNING = ...
STATE_ERROR = ...
STATES = ...
DEFAULT_NAME = ...
class VacuumEntityFeature(IntFlag):
    """Supported features of the vacuum entity."""
    TURN_ON = ...
    TURN_OFF = ...
    PAUSE = ...
    STOP = ...
    RETURN_HOME = ...
    FAN_SPEED = ...
    BATTERY = ...
    STATUS = ...
    SEND_COMMAND = ...
    LOCATE = ...
    CLEAN_SPOT = ...
    MAP = ...
    STATE = ...
    START = ...


SUPPORT_TURN_ON = ...
SUPPORT_TURN_OFF = ...
SUPPORT_PAUSE = ...
SUPPORT_STOP = ...
SUPPORT_RETURN_HOME = ...
SUPPORT_FAN_SPEED = ...
SUPPORT_BATTERY = ...
SUPPORT_STATUS = ...
SUPPORT_SEND_COMMAND = ...
SUPPORT_LOCATE = ...
SUPPORT_CLEAN_SPOT = ...
SUPPORT_MAP = ...
SUPPORT_STATE = ...
SUPPORT_START = ...
@bind_hass
def is_on(hass: HomeAssistant, entity_id: str) -> bool:
    """Return if the vacuum is on based on the statemachine."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the vacuum component."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

class _BaseVacuum(Entity):
    """Representation of a base vacuum.

    Contains common properties and functions for all vacuum devices.
    """
    _entity_component_unrecorded_attributes = ...
    _attr_battery_icon: str
    _attr_battery_level: int | None = ...
    _attr_fan_speed: str | None = ...
    _attr_fan_speed_list: list[str]
    _attr_supported_features: VacuumEntityFeature = ...
    @property
    def supported_features(self) -> VacuumEntityFeature:
        """Flag vacuum cleaner features that are supported."""
        ...
    
    @property
    def battery_level(self) -> int | None:
        """Return the battery level of the vacuum cleaner."""
        ...
    
    @property
    def battery_icon(self) -> str:
        """Return the battery icon for the vacuum cleaner."""
        ...
    
    @property
    def fan_speed(self) -> str | None:
        """Return the fan speed of the vacuum cleaner."""
        ...
    
    @property
    def fan_speed_list(self) -> list[str]:
        """Get the list of available fan speed steps of the vacuum cleaner."""
        ...
    
    @property
    def capability_attributes(self) -> Mapping[str, Any] | None:
        """Return capability attributes."""
        ...
    
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the state attributes of the vacuum cleaner."""
        ...
    
    def stop(self, **kwargs: Any) -> None:
        """Stop the vacuum cleaner."""
        ...
    
    async def async_stop(self, **kwargs: Any) -> None:
        """Stop the vacuum cleaner.

        This method must be run in the event loop.
        """
        ...
    
    def return_to_base(self, **kwargs: Any) -> None:
        """Set the vacuum cleaner to return to the dock."""
        ...
    
    async def async_return_to_base(self, **kwargs: Any) -> None:
        """Set the vacuum cleaner to return to the dock.

        This method must be run in the event loop.
        """
        ...
    
    def clean_spot(self, **kwargs: Any) -> None:
        """Perform a spot clean-up."""
        ...
    
    async def async_clean_spot(self, **kwargs: Any) -> None:
        """Perform a spot clean-up.

        This method must be run in the event loop.
        """
        ...
    
    def locate(self, **kwargs: Any) -> None:
        """Locate the vacuum cleaner."""
        ...
    
    async def async_locate(self, **kwargs: Any) -> None:
        """Locate the vacuum cleaner.

        This method must be run in the event loop.
        """
        ...
    
    def set_fan_speed(self, fan_speed: str, **kwargs: Any) -> None:
        """Set fan speed."""
        ...
    
    async def async_set_fan_speed(self, fan_speed: str, **kwargs: Any) -> None:
        """Set fan speed.

        This method must be run in the event loop.
        """
        ...
    
    def send_command(self, command: str, params: dict[str, Any] | list[Any] | None = ..., **kwargs: Any) -> None:
        """Send a command to a vacuum cleaner."""
        ...
    
    async def async_send_command(self, command: str, params: dict[str, Any] | list[Any] | None = ..., **kwargs: Any) -> None:
        """Send a command to a vacuum cleaner.

        This method must be run in the event loop.
        """
        ...
    


@dataclass
class VacuumEntityDescription(ToggleEntityDescription):
    """A class that describes vacuum entities."""
    ...


class VacuumEntity(_BaseVacuum, ToggleEntity):
    """Representation of a vacuum cleaner robot."""
    @callback
    def add_to_platform_start(self, hass: HomeAssistant, platform: EntityPlatform, parallel_updates: asyncio.Semaphore | None) -> None:
        """Start adding an entity to a platform."""
        ...
    
    entity_description: VacuumEntityDescription
    _attr_status: str | None = ...
    @property
    def status(self) -> str | None:
        """Return the status of the vacuum cleaner."""
        ...
    
    @property
    def battery_icon(self) -> str:
        """Return the battery icon for the vacuum cleaner."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the state attributes of the vacuum cleaner."""
        ...
    
    def turn_on(self, **kwargs: Any) -> None:
        """Turn the vacuum on and start cleaning."""
        ...
    
    async def async_turn_on(self, **kwargs: Any) -> None:
        """Turn the vacuum on and start cleaning.

        This method must be run in the event loop.
        """
        ...
    
    def turn_off(self, **kwargs: Any) -> None:
        """Turn the vacuum off stopping the cleaning and returning home."""
        ...
    
    async def async_turn_off(self, **kwargs: Any) -> None:
        """Turn the vacuum off stopping the cleaning and returning home.

        This method must be run in the event loop.
        """
        ...
    
    def start_pause(self, **kwargs: Any) -> None:
        """Start, pause or resume the cleaning task."""
        ...
    
    async def async_start_pause(self, **kwargs: Any) -> None:
        """Start, pause or resume the cleaning task.

        This method must be run in the event loop.
        """
        ...
    


@dataclass
class StateVacuumEntityDescription(EntityDescription):
    """A class that describes vacuum entities."""
    ...


class StateVacuumEntity(_BaseVacuum):
    """Representation of a vacuum cleaner robot that supports states."""
    entity_description: StateVacuumEntityDescription
    _attr_state: str | None = ...
    @property
    def state(self) -> str | None:
        """Return the state of the vacuum cleaner."""
        ...
    
    @property
    def battery_icon(self) -> str:
        """Return the battery icon for the vacuum cleaner."""
        ...
    
    def start(self) -> None:
        """Start or resume the cleaning task."""
        ...
    
    async def async_start(self) -> None:
        """Start or resume the cleaning task.

        This method must be run in the event loop.
        """
        ...
    
    def pause(self) -> None:
        """Pause the cleaning task."""
        ...
    
    async def async_pause(self) -> None:
        """Pause the cleaning task.

        This method must be run in the event loop.
        """
        ...
    


