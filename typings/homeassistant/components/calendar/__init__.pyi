"""
This type stub file was generated by pyright.
"""

import dataclasses
import datetime
import logging
import re
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Callable, Iterable
from http import HTTPStatus
from itertools import groupby
from typing import Any, Final, cast, final
from aiohttp import web
from dateutil.rrule import rrulestr
from homeassistant.components import frontend, http, websocket_api
from homeassistant.components.websocket_api import ERR_NOT_FOUND, ERR_NOT_SUPPORTED
from homeassistant.components.websocket_api.connection import ActiveConnection
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import STATE_OFF, STATE_ON
from homeassistant.core import CALLBACK_TYPE, HomeAssistant, ServiceCall, ServiceResponse, SupportsResponse, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, time_period_str
from homeassistant.helpers.entity import Entity
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.event import async_track_point_in_time
from homeassistant.helpers.issue_registry import IssueSeverity, async_create_issue
from homeassistant.helpers.template import DATE_STR_FORMAT
from homeassistant.helpers.typing import ConfigType
from homeassistant.util import dt as dt_util
from homeassistant.util.json import JsonValueType
from .const import CONF_EVENT, CalendarEntityFeature, EVENT_DESCRIPTION, EVENT_DURATION, EVENT_END, EVENT_END_DATE, EVENT_END_DATETIME, EVENT_IN, EVENT_IN_DAYS, EVENT_IN_WEEKS, EVENT_LOCATION, EVENT_RECURRENCE_ID, EVENT_RECURRENCE_RANGE, EVENT_RRULE, EVENT_START, EVENT_START_DATE, EVENT_START_DATETIME, EVENT_SUMMARY, EVENT_TIME_FIELDS, EVENT_TYPES, EVENT_UID, LIST_EVENT_FIELDS

"""Support for Google Calendar event device sensors."""
_LOGGER = ...
DOMAIN = ...
ENTITY_ID_FORMAT = ...
SCAN_INTERVAL = ...
VALID_FREQS = ...
MIN_NEW_EVENT_DURATION = ...
MIN_EVENT_DURATION = ...
CREATE_EVENT_SERVICE = ...
CREATE_EVENT_SCHEMA = ...
WEBSOCKET_EVENT_SCHEMA = ...
CALENDAR_EVENT_SCHEMA = ...
LEGACY_SERVICE_LIST_EVENTS: Final = ...
SERVICE_GET_EVENTS: Final = ...
SERVICE_GET_EVENTS_SCHEMA: Final = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for calendars."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

def get_date(date: dict[str, Any]) -> datetime.datetime:
    """Get the dateTime from date or dateTime as a local."""
    ...

@dataclasses.dataclass
class CalendarEvent:
    """An event on a calendar."""
    start: datetime.date | datetime.datetime
    end: datetime.date | datetime.datetime
    summary: str
    description: str | None = ...
    location: str | None = ...
    uid: str | None = ...
    recurrence_id: str | None = ...
    rrule: str | None = ...
    @property
    def start_datetime_local(self) -> datetime.datetime:
        """Return event start time as a local datetime."""
        ...
    
    @property
    def end_datetime_local(self) -> datetime.datetime:
        """Return event end time as a local datetime."""
        ...
    
    @property
    def all_day(self) -> bool:
        """Return true if the event is an all day event."""
        ...
    
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the event."""
        ...
    
    def __post_init__(self) -> None:
        """Perform validation on the CalendarEvent."""
        ...
    


def extract_offset(summary: str, offset_prefix: str) -> tuple[str, datetime.timedelta]:
    """Extract the offset from the event summary.

    Return a tuple with the updated event summary and offset time.
    """
    ...

def is_offset_reached(start: datetime.datetime, offset_time: datetime.timedelta) -> bool:
    """Have we reached the offset time specified in the event title."""
    ...

class CalendarEntity(Entity):
    """Base class for calendar event entities."""
    _entity_component_unrecorded_attributes = ...
    _alarm_unsubs: list[CALLBACK_TYPE] | None = ...
    @property
    def event(self) -> CalendarEvent | None:
        """Return the next upcoming event."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return the entity state attributes."""
        ...
    
    @final
    @property
    def state(self) -> str:
        """Return the state of the calendar event."""
        ...
    
    @callback
    def async_write_ha_state(self) -> None:
        """Write the state to the state machine.

        This sets up listeners to handle state transitions for start or end of
        the current or upcoming event.
        """
        ...
    
    async def async_will_remove_from_hass(self) -> None:
        """Run when entity will be removed from hass.

        To be extended by integrations.
        """
        ...
    
    async def async_get_events(self, hass: HomeAssistant, start_date: datetime.datetime, end_date: datetime.datetime) -> list[CalendarEvent]:
        """Return calendar events within a datetime range."""
        ...
    
    async def async_create_event(self, **kwargs: Any) -> None:
        """Add a new event to calendar."""
        ...
    
    async def async_delete_event(self, uid: str, recurrence_id: str | None = ..., recurrence_range: str | None = ...) -> None:
        """Delete an event on the calendar."""
        ...
    
    async def async_update_event(self, uid: str, event: dict[str, Any], recurrence_id: str | None = ..., recurrence_range: str | None = ...) -> None:
        """Delete an event on the calendar."""
        ...
    


class CalendarEventView(http.HomeAssistantView):
    """View to retrieve calendar content."""
    url = ...
    name = ...
    def __init__(self, component: EntityComponent[CalendarEntity]) -> None:
        """Initialize calendar view."""
        ...
    
    async def get(self, request: web.Request, entity_id: str) -> web.Response:
        """Return calendar events."""
        ...
    


class CalendarListView(http.HomeAssistantView):
    """View to retrieve calendar list."""
    url = ...
    name = ...
    def __init__(self, component: EntityComponent[CalendarEntity]) -> None:
        """Initialize calendar view."""
        ...
    
    async def get(self, request: web.Request) -> web.Response:
        """Retrieve calendar list."""
        ...
    


@websocket_api.websocket_command({ vol.Required("type"): "calendar/event/create",vol.Required("entity_id"): cv.entity_id,CONF_EVENT: WEBSOCKET_EVENT_SCHEMA })
@websocket_api.async_response
async def handle_calendar_event_create(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle creation of a calendar event."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "calendar/event/delete",vol.Required("entity_id"): cv.entity_id,vol.Required(EVENT_UID): cv.string,vol.Optional(EVENT_RECURRENCE_ID): cv.string,vol.Optional(EVENT_RECURRENCE_RANGE): cv.string })
@websocket_api.async_response
async def handle_calendar_event_delete(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle delete of a calendar event."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "calendar/event/update",vol.Required("entity_id"): cv.entity_id,vol.Required(EVENT_UID): cv.string,vol.Optional(EVENT_RECURRENCE_ID): cv.string,vol.Optional(EVENT_RECURRENCE_RANGE): cv.string,vol.Required(CONF_EVENT): WEBSOCKET_EVENT_SCHEMA })
@websocket_api.async_response
async def handle_calendar_event_update(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle creation of a calendar event."""
    ...

async def async_create_event(entity: CalendarEntity, call: ServiceCall) -> None:
    """Add a new event to calendar."""
    ...

async def async_list_events_service(calendar: CalendarEntity, service_call: ServiceCall) -> ServiceResponse:
    """List events on a calendar during a time range.

    Deprecated: please use async_get_events_service.
    """
    ...

async def async_get_events_service(calendar: CalendarEntity, service_call: ServiceCall) -> ServiceResponse:
    """List events on a calendar during a time range."""
    ...

