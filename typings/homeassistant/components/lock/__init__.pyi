"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import re
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_CODE, ATTR_CODE_FORMAT, SERVICE_LOCK, SERVICE_OPEN, SERVICE_UNLOCK, STATE_JAMMED, STATE_LOCKED, STATE_LOCKING, STATE_UNLOCKED, STATE_UNLOCKING
from homeassistant.core import HomeAssistant, ServiceCall, callback
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, make_entity_service_schema
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.service import remove_entity_service_fields
from homeassistant.helpers.typing import ConfigType, StateType

"""Component to interface with locks that can be controlled remotely."""
_LOGGER = ...
ATTR_CHANGED_BY = ...
CONF_DEFAULT_CODE = ...
DOMAIN = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
MIN_TIME_BETWEEN_SCANS = ...
LOCK_SERVICE_SCHEMA = ...
class LockEntityFeature(IntFlag):
    """Supported features of the lock entity."""
    OPEN = ...


SUPPORT_OPEN = ...
PROP_TO_ATTR = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for locks."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class LockEntityDescription(EntityDescription):
    """A class that describes lock entities."""
    ...


class LockEntity(Entity):
    """Base class for lock entities."""
    entity_description: LockEntityDescription
    _attr_changed_by: str | None = ...
    _attr_code_format: str | None = ...
    _attr_is_locked: bool | None = ...
    _attr_is_locking: bool | None = ...
    _attr_is_unlocking: bool | None = ...
    _attr_is_jammed: bool | None = ...
    _attr_state: None = ...
    _attr_supported_features: LockEntityFeature = ...
    _lock_option_default_code: str = ...
    __code_format_cmp: re.Pattern[str] | None = ...
    @property
    def changed_by(self) -> str | None:
        """Last change triggered by."""
        ...
    
    @property
    def code_format(self) -> str | None:
        """Regex for code format or None if no code is required."""
        ...
    
    @property
    @final
    def code_format_cmp(self) -> re.Pattern[str] | None:
        """Return a compiled code_format."""
        ...
    
    @property
    def is_locked(self) -> bool | None:
        """Return true if the lock is locked."""
        ...
    
    @property
    def is_locking(self) -> bool | None:
        """Return true if the lock is locking."""
        ...
    
    @property
    def is_unlocking(self) -> bool | None:
        """Return true if the lock is unlocking."""
        ...
    
    @property
    def is_jammed(self) -> bool | None:
        """Return true if the lock is jammed (incomplete locking)."""
        ...
    
    def lock(self, **kwargs: Any) -> None:
        """Lock the lock."""
        ...
    
    async def async_lock(self, **kwargs: Any) -> None:
        """Lock the lock."""
        ...
    
    def unlock(self, **kwargs: Any) -> None:
        """Unlock the lock."""
        ...
    
    async def async_unlock(self, **kwargs: Any) -> None:
        """Unlock the lock."""
        ...
    
    def open(self, **kwargs: Any) -> None:
        """Open the door latch."""
        ...
    
    async def async_open(self, **kwargs: Any) -> None:
        """Open the door latch."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, StateType]:
        """Return the state attributes."""
        ...
    
    @final
    @property
    def state(self) -> str | None:
        """Return the state."""
        ...
    
    @property
    def supported_features(self) -> LockEntityFeature:
        """Return the list of supported features."""
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Call when the sensor entity is added to hass."""
        ...
    
    @callback
    def async_registry_entry_updated(self) -> None:
        """Run when the entity registry entry has been updated."""
        ...
    


