"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import voluptuous as vol
from __future__ import annotations
from collections.abc import Callable
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag, StrEnum
from typing import Any, ParamSpec, TypeVar, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import SERVICE_CLOSE_COVER, SERVICE_CLOSE_COVER_TILT, SERVICE_OPEN_COVER, SERVICE_OPEN_COVER_TILT, SERVICE_SET_COVER_POSITION, SERVICE_SET_COVER_TILT_POSITION, SERVICE_STOP_COVER, SERVICE_STOP_COVER_TILT, SERVICE_TOGGLE, SERVICE_TOGGLE_COVER_TILT, STATE_CLOSED, STATE_CLOSING, STATE_OPEN, STATE_OPENING
from homeassistant.core import HomeAssistant
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass

"""Support for Cover devices."""
_LOGGER = ...
DOMAIN = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
_P = ...
_R = TypeVar("_R")
class CoverDeviceClass(StrEnum):
    """Device class for cover."""
    AWNING = ...
    BLIND = ...
    CURTAIN = ...
    DAMPER = ...
    DOOR = ...
    GARAGE = ...
    GATE = ...
    SHADE = ...
    SHUTTER = ...
    WINDOW = ...


DEVICE_CLASSES_SCHEMA = ...
DEVICE_CLASSES = ...
DEVICE_CLASS_AWNING = ...
DEVICE_CLASS_BLIND = ...
DEVICE_CLASS_CURTAIN = ...
DEVICE_CLASS_DAMPER = ...
DEVICE_CLASS_DOOR = ...
DEVICE_CLASS_GARAGE = ...
DEVICE_CLASS_GATE = ...
DEVICE_CLASS_SHADE = ...
DEVICE_CLASS_SHUTTER = ...
DEVICE_CLASS_WINDOW = ...
class CoverEntityFeature(IntFlag):
    """Supported features of the cover entity."""
    OPEN = ...
    CLOSE = ...
    SET_POSITION = ...
    STOP = ...
    OPEN_TILT = ...
    CLOSE_TILT = ...
    STOP_TILT = ...
    SET_TILT_POSITION = ...


SUPPORT_OPEN = ...
SUPPORT_CLOSE = ...
SUPPORT_SET_POSITION = ...
SUPPORT_STOP = ...
SUPPORT_OPEN_TILT = ...
SUPPORT_CLOSE_TILT = ...
SUPPORT_STOP_TILT = ...
SUPPORT_SET_TILT_POSITION = ...
ATTR_CURRENT_POSITION = ...
ATTR_CURRENT_TILT_POSITION = ...
ATTR_POSITION = ...
ATTR_TILT_POSITION = ...
@bind_hass
def is_closed(hass: HomeAssistant, entity_id: str) -> bool:
    """Return if the cover is closed based on the statemachine."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for covers."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class CoverEntityDescription(EntityDescription):
    """A class that describes cover entities."""
    device_class: CoverDeviceClass | None = ...


class CoverEntity(Entity):
    """Base class for cover entities."""
    entity_description: CoverEntityDescription
    _attr_current_cover_position: int | None = ...
    _attr_current_cover_tilt_position: int | None = ...
    _attr_device_class: CoverDeviceClass | None
    _attr_is_closed: bool | None
    _attr_is_closing: bool | None = ...
    _attr_is_opening: bool | None = ...
    _attr_state: None = ...
    _attr_supported_features: CoverEntityFeature | None
    _cover_is_last_toggle_direction_open = ...
    @property
    def current_cover_position(self) -> int | None:
        """Return current position of cover.

        None is unknown, 0 is closed, 100 is fully open.
        """
        ...
    
    @property
    def current_cover_tilt_position(self) -> int | None:
        """Return current position of cover tilt.

        None is unknown, 0 is closed, 100 is fully open.
        """
        ...
    
    @property
    def device_class(self) -> CoverDeviceClass | None:
        """Return the class of this entity."""
        ...
    
    @property
    @final
    def state(self) -> str | None:
        """Return the state of the cover."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the state attributes."""
        ...
    
    @property
    def supported_features(self) -> CoverEntityFeature:
        """Flag supported features."""
        ...
    
    @property
    def is_opening(self) -> bool | None:
        """Return if the cover is opening or not."""
        ...
    
    @property
    def is_closing(self) -> bool | None:
        """Return if the cover is closing or not."""
        ...
    
    @property
    def is_closed(self) -> bool | None:
        """Return if the cover is closed or not."""
        ...
    
    def open_cover(self, **kwargs: Any) -> None:
        """Open the cover."""
        ...
    
    async def async_open_cover(self, **kwargs: Any) -> None:
        """Open the cover."""
        ...
    
    def close_cover(self, **kwargs: Any) -> None:
        """Close cover."""
        ...
    
    async def async_close_cover(self, **kwargs: Any) -> None:
        """Close cover."""
        ...
    
    def toggle(self, **kwargs: Any) -> None:
        """Toggle the entity."""
        ...
    
    async def async_toggle(self, **kwargs: Any) -> None:
        """Toggle the entity."""
        ...
    
    def set_cover_position(self, **kwargs: Any) -> None:
        """Move the cover to a specific position."""
        ...
    
    async def async_set_cover_position(self, **kwargs: Any) -> None:
        """Move the cover to a specific position."""
        ...
    
    def stop_cover(self, **kwargs: Any) -> None:
        """Stop the cover."""
        ...
    
    async def async_stop_cover(self, **kwargs: Any) -> None:
        """Stop the cover."""
        ...
    
    def open_cover_tilt(self, **kwargs: Any) -> None:
        """Open the cover tilt."""
        ...
    
    async def async_open_cover_tilt(self, **kwargs: Any) -> None:
        """Open the cover tilt."""
        ...
    
    def close_cover_tilt(self, **kwargs: Any) -> None:
        """Close the cover tilt."""
        ...
    
    async def async_close_cover_tilt(self, **kwargs: Any) -> None:
        """Close the cover tilt."""
        ...
    
    def set_cover_tilt_position(self, **kwargs: Any) -> None:
        """Move the cover tilt to a specific position."""
        ...
    
    async def async_set_cover_tilt_position(self, **kwargs: Any) -> None:
        """Move the cover tilt to a specific position."""
        ...
    
    def stop_cover_tilt(self, **kwargs: Any) -> None:
        """Stop the cover."""
        ...
    
    async def async_stop_cover_tilt(self, **kwargs: Any) -> None:
        """Stop the cover."""
        ...
    
    def toggle_tilt(self, **kwargs: Any) -> None:
        """Toggle the entity."""
        ...
    
    async def async_toggle_tilt(self, **kwargs: Any) -> None:
        """Toggle the entity."""
        ...
    


