"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import StrEnum
from typing import Literal, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import EntityCategory, STATE_OFF, STATE_ON
from homeassistant.core import HomeAssistant
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType

"""Component to interface with binary sensors."""
_LOGGER = ...
DOMAIN = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
class BinarySensorDeviceClass(StrEnum):
    """Device class for binary sensors."""
    BATTERY = ...
    BATTERY_CHARGING = ...
    CO = ...
    COLD = ...
    CONNECTIVITY = ...
    DOOR = ...
    GARAGE_DOOR = ...
    GAS = ...
    HEAT = ...
    LIGHT = ...
    LOCK = ...
    MOISTURE = ...
    MOTION = ...
    MOVING = ...
    OCCUPANCY = ...
    OPENING = ...
    PLUG = ...
    POWER = ...
    PRESENCE = ...
    PROBLEM = ...
    RUNNING = ...
    SAFETY = ...
    SMOKE = ...
    SOUND = ...
    TAMPER = ...
    UPDATE = ...
    VIBRATION = ...
    WINDOW = ...


DEVICE_CLASSES_SCHEMA = ...
DEVICE_CLASSES = ...
DEVICE_CLASS_BATTERY = ...
DEVICE_CLASS_BATTERY_CHARGING = ...
DEVICE_CLASS_CO = ...
DEVICE_CLASS_COLD = ...
DEVICE_CLASS_CONNECTIVITY = ...
DEVICE_CLASS_DOOR = ...
DEVICE_CLASS_GARAGE_DOOR = ...
DEVICE_CLASS_GAS = ...
DEVICE_CLASS_HEAT = ...
DEVICE_CLASS_LIGHT = ...
DEVICE_CLASS_LOCK = ...
DEVICE_CLASS_MOISTURE = ...
DEVICE_CLASS_MOTION = ...
DEVICE_CLASS_MOVING = ...
DEVICE_CLASS_OCCUPANCY = ...
DEVICE_CLASS_OPENING = ...
DEVICE_CLASS_PLUG = ...
DEVICE_CLASS_POWER = ...
DEVICE_CLASS_PRESENCE = ...
DEVICE_CLASS_PROBLEM = ...
DEVICE_CLASS_RUNNING = ...
DEVICE_CLASS_SAFETY = ...
DEVICE_CLASS_SMOKE = ...
DEVICE_CLASS_SOUND = ...
DEVICE_CLASS_TAMPER = ...
DEVICE_CLASS_UPDATE = ...
DEVICE_CLASS_VIBRATION = ...
DEVICE_CLASS_WINDOW = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for binary sensors."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class BinarySensorEntityDescription(EntityDescription):
    """A class that describes binary sensor entities."""
    device_class: BinarySensorDeviceClass | None = ...


class BinarySensorEntity(Entity):
    """Represent a binary sensor."""
    entity_description: BinarySensorEntityDescription
    _attr_device_class: BinarySensorDeviceClass | None
    _attr_is_on: bool | None = ...
    _attr_state: None = ...
    async def async_internal_added_to_hass(self) -> None:
        """Call when the binary sensor entity is added to hass."""
        ...
    
    @property
    def device_class(self) -> BinarySensorDeviceClass | None:
        """Return the class of this entity."""
        ...
    
    @property
    def is_on(self) -> bool | None:
        """Return true if the binary sensor is on."""
        ...
    
    @final
    @property
    def state(self) -> Literal["on", "off"] | None:
        """Return the state of the binary sensor."""
        ...
    


