"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
import homeassistant.util.dt as dt_util
from __future__ import annotations
from collections.abc import Callable, Mapping
from datetime import datetime
from enum import StrEnum
from typing import Any, Final, TypedDict
from homeassistant.components import websocket_api
from homeassistant.core import CALLBACK_TYPE, HomeAssistant, ServiceCall, callback
from homeassistant.helpers import config_validation as cv, singleton
from homeassistant.helpers.dispatcher import async_dispatcher_connect, async_dispatcher_send
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.util.uuid import random_uuid_hex

"""Support for displaying persistent notifications."""
DOMAIN = ...
ATTR_CREATED_AT: Final = ...
ATTR_MESSAGE: Final = ...
ATTR_NOTIFICATION_ID: Final = ...
ATTR_TITLE: Final = ...
ATTR_STATUS: Final = ...
class Notification(TypedDict):
    """Persistent notification."""
    created_at: datetime
    message: str
    notification_id: str
    title: str | None
    ...


class UpdateType(StrEnum):
    """Persistent notification update type."""
    CURRENT = ...
    ADDED = ...
    REMOVED = ...
    UPDATED = ...


SIGNAL_PERSISTENT_NOTIFICATIONS_UPDATED = ...
SCHEMA_SERVICE_NOTIFICATION = ...
_LOGGER = ...
CONFIG_SCHEMA = ...
@callback
def async_register_callback(hass: HomeAssistant, _callback: Callable[[UpdateType, dict[str, Notification]], None]) -> CALLBACK_TYPE:
    """Register a callback."""
    ...

@bind_hass
def create(hass: HomeAssistant, message: str, title: str | None = ..., notification_id: str | None = ...) -> None:
    """Generate a notification."""
    ...

@bind_hass
def dismiss(hass: HomeAssistant, notification_id: str) -> None:
    """Remove a notification."""
    ...

@callback
@bind_hass
def async_create(hass: HomeAssistant, message: str, title: str | None = ..., notification_id: str | None = ...) -> None:
    """Generate a notification."""
    ...

@callback
@bind_hass
def async_dismiss(hass: HomeAssistant, notification_id: str) -> None:
    """Remove a notification."""
    ...

@callback
def async_dismiss_all(hass: HomeAssistant) -> None:
    """Remove all notifications."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the persistent notification component."""
    ...

@callback
@websocket_api.websocket_command({ vol.Required("type"): "persistent_notification/get" })
def websocket_get_notifications(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: Mapping[str, Any]) -> None:
    """Return a list of persistent_notifications."""
    ...

@callback
@websocket_api.websocket_command({ vol.Required("type"): "persistent_notification/subscribe" })
def websocket_subscribe_notifications(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: Mapping[str, Any]) -> None:
    """Return a list of persistent_notifications."""
    ...

