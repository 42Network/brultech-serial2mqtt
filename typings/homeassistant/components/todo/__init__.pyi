"""
This type stub file was generated by pyright.
"""

import dataclasses
import datetime
import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from collections.abc import Callable, Iterable
from typing import Any, final
from homeassistant.components import frontend, websocket_api
from homeassistant.components.websocket_api import ERR_NOT_FOUND, ERR_NOT_SUPPORTED
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import CONF_ENTITY_ID
from homeassistant.core import CALLBACK_TYPE, HomeAssistant, ServiceCall, SupportsResponse, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from homeassistant.util import dt as dt_util
from homeassistant.util.json import JsonValueType
from .const import ATTR_DESCRIPTION, ATTR_DUE, ATTR_DUE_DATE, ATTR_DUE_DATETIME, DOMAIN, TodoItemStatus, TodoListEntityFeature

"""The todo integration."""
_LOGGER = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
@dataclasses.dataclass
class TodoItemFieldDescription:
    """A description of To-do item fields and validation requirements."""
    service_field: str
    todo_item_field: str
    validation: Callable[[Any], Any]
    required_feature: TodoListEntityFeature
    ...


TODO_ITEM_FIELDS = ...
TODO_ITEM_FIELD_SCHEMA = ...
TODO_ITEM_FIELD_VALIDATIONS = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up Todo entities."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclasses.dataclass
class TodoItem:
    """A To-do item in a To-do list."""
    summary: str | None = ...
    uid: str | None = ...
    status: TodoItemStatus | None = ...
    due: datetime.date | datetime.datetime | None = ...
    description: str | None = ...


class TodoListEntity(Entity):
    """An entity that represents a To-do list."""
    _attr_todo_items: list[TodoItem] | None = ...
    _update_listeners: list[Callable[[list[JsonValueType] | None], None]] | None = ...
    @property
    def state(self) -> int | None:
        """Return the entity state as the count of incomplete items."""
        ...
    
    @property
    def todo_items(self) -> list[TodoItem] | None:
        """Return the To-do items in the To-do list."""
        ...
    
    async def async_create_todo_item(self, item: TodoItem) -> None:
        """Add an item to the To-do list."""
        ...
    
    async def async_update_todo_item(self, item: TodoItem) -> None:
        """Update an item in the To-do list."""
        ...
    
    async def async_delete_todo_items(self, uids: list[str]) -> None:
        """Delete an item in the To-do list."""
        ...
    
    async def async_move_todo_item(self, uid: str, previous_uid: str | None = ...) -> None:
        """Move an item in the To-do list.

        The To-do item with the specified `uid` should be moved to the position
        in the list after the specified by `previous_uid` or `None` for the first
        position in the To-do list.
        """
        ...
    
    @final
    @callback
    def async_subscribe_updates(self, listener: Callable[[list[JsonValueType] | None], None]) -> CALLBACK_TYPE:
        """Subscribe to To-do list item updates.

        Called by websocket API.
        """
        ...
    
    @final
    @callback
    def async_update_listeners(self) -> None:
        """Push updated To-do items to all listeners."""
        ...
    


@websocket_api.websocket_command({ vol.Required("type"): "todo/item/subscribe",vol.Required("entity_id"): cv.entity_domain(DOMAIN) })
@websocket_api.async_response
async def websocket_handle_subscribe_todo_items(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Subscribe to To-do list item updates."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "todo/item/list",vol.Required("entity_id"): cv.entity_id })
@websocket_api.async_response
async def websocket_handle_todo_item_list(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle the list of To-do items in a To-do- list."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "todo/item/move",vol.Required("entity_id"): cv.entity_id,vol.Required("uid"): cv.string,vol.Optional("previous_uid"): cv.string })
@websocket_api.async_response
async def websocket_handle_todo_item_move(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle move of a To-do item within a To-do list."""
    ...

