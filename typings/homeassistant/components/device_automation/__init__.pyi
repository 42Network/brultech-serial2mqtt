"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import voluptuous as vol
import voluptuous_serialize
from __future__ import annotations
from collections.abc import Awaitable, Callable, Coroutine, Iterable, Mapping
from dataclasses import dataclass
from enum import Enum
from functools import wraps
from types import ModuleType
from typing import Any, Literal, TYPE_CHECKING, TypeAlias, overload
from homeassistant.components import websocket_api
from homeassistant.components.websocket_api.connection import ActiveConnection
from homeassistant.const import ATTR_ENTITY_ID, CONF_DEVICE_ID, CONF_DOMAIN, CONF_ENTITY_ID, CONF_PLATFORM
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import config_validation as cv, device_registry as dr, entity_registry as er
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import IntegrationNotFound
from homeassistant.requirements import RequirementsNotFound, async_get_integration_with_requirements
from .const import CONF_IS_OFF, CONF_IS_ON, CONF_TURNED_OFF, CONF_TURNED_ON
from .exceptions import DeviceNotFound, EntityNotFound, InvalidDeviceAutomationConfig
from .action import DeviceAutomationActionProtocol
from .condition import DeviceAutomationConditionProtocol
from .trigger import DeviceAutomationTriggerProtocol

"""Helpers for device automations."""
if TYPE_CHECKING:
    DeviceAutomationPlatformType: TypeAlias = ...
DOMAIN = ...
CONFIG_SCHEMA = ...
DEVICE_TRIGGER_BASE_SCHEMA: vol.Schema = ...
@dataclass
class DeviceAutomationDetails:
    """Details for device automation."""
    section: str
    get_automations_func: str
    get_capabilities_func: str
    ...


class DeviceAutomationType(Enum):
    """Device automation type."""
    TRIGGER = ...
    CONDITION = ...
    ACTION = ...


TYPES = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up device automation."""
    ...

@overload
async def async_get_device_automation_platform(hass: HomeAssistant, domain: str, automation_type: Literal[DeviceAutomationType.TRIGGER]) -> DeviceAutomationTriggerProtocol:
    ...

@overload
async def async_get_device_automation_platform(hass: HomeAssistant, domain: str, automation_type: Literal[DeviceAutomationType.CONDITION]) -> DeviceAutomationConditionProtocol:
    ...

@overload
async def async_get_device_automation_platform(hass: HomeAssistant, domain: str, automation_type: Literal[DeviceAutomationType.ACTION]) -> DeviceAutomationActionProtocol:
    ...

@overload
async def async_get_device_automation_platform(hass: HomeAssistant, domain: str, automation_type: DeviceAutomationType) -> DeviceAutomationPlatformType:
    ...

async def async_get_device_automation_platform(hass: HomeAssistant, domain: str, automation_type: DeviceAutomationType) -> DeviceAutomationPlatformType:
    """Load device automation platform for integration.

    Throws InvalidDeviceAutomationConfig if the integration is not found or does not support device automation.
    """
    ...

async def async_get_device_automations(hass: HomeAssistant, automation_type: DeviceAutomationType, device_ids: Iterable[str] | None = ...) -> Mapping[str, list[dict[str, Any]]]:
    """List device automations."""
    ...

@callback
def async_get_entity_registry_entry_or_raise(hass: HomeAssistant, entity_registry_id: str) -> er.RegistryEntry:
    """Get an entity registry entry from entry ID or raise."""
    ...

@callback
def async_validate_entity_schema(hass: HomeAssistant, config: ConfigType, schema: vol.Schema) -> ConfigType:
    """Validate schema and resolve entity registry entry id to entity_id."""
    ...

def handle_device_errors(func: Callable[[HomeAssistant, ActiveConnection, dict[str, Any]], Awaitable[None]]) -> Callable[[HomeAssistant, ActiveConnection, dict[str, Any]], Coroutine[Any, Any, None]]:
    """Handle device automation errors."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/action/list",vol.Required("device_id"): str })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_list_actions(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device actions."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/condition/list",vol.Required("device_id"): str })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_list_conditions(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device conditions."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/trigger/list",vol.Required("device_id"): str })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_list_triggers(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device triggers."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/action/capabilities",vol.Required("action"): dict })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_get_action_capabilities(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device action capabilities."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/condition/capabilities",vol.Required("condition"): cv.DEVICE_CONDITION_BASE_SCHEMA.extend({}, extra=vol.ALLOW_EXTRA) })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_get_condition_capabilities(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device condition capabilities."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "device_automation/trigger/capabilities",vol.Required("trigger"): DEVICE_TRIGGER_BASE_SCHEMA.extend({}, extra=vol.ALLOW_EXTRA) })
@websocket_api.async_response
@handle_device_errors
async def websocket_device_automation_get_trigger_capabilities(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for device trigger capabilities."""
    ...

