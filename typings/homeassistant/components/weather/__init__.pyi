"""
This type stub file was generated by pyright.
"""

import abc
import asyncio
import logging
import voluptuous as vol
import homeassistant.helpers.issue_registry as ir
from __future__ import annotations
from collections.abc import Callable, Iterable
from contextlib import suppress
from dataclasses import dataclass
from datetime import timedelta
from functools import partial
from typing import Any, Final, Generic, Literal, Required, TypeVar, TypedDict, cast, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import PRECISION_HALVES, PRECISION_TENTHS, PRECISION_WHOLE, UnitOfPressure, UnitOfSpeed, UnitOfTemperature
from homeassistant.core import CALLBACK_TYPE, HomeAssistant, ServiceCall, ServiceResponse, SupportsResponse, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.entity_platform import EntityPlatform
from homeassistant.helpers.typing import ConfigType
from homeassistant.helpers.update_coordinator import CoordinatorEntity, DataUpdateCoordinator, TimestampDataUpdateCoordinator
from homeassistant.loader import async_get_issue_tracker, async_suggest_report_issue
from homeassistant.util.dt import utcnow
from homeassistant.util.json import JsonValueType
from homeassistant.util.unit_system import US_CUSTOMARY_SYSTEM
from .const import ATTR_WEATHER_APPARENT_TEMPERATURE, ATTR_WEATHER_CLOUD_COVERAGE, ATTR_WEATHER_DEW_POINT, ATTR_WEATHER_HUMIDITY, ATTR_WEATHER_OZONE, ATTR_WEATHER_PRECIPITATION_UNIT, ATTR_WEATHER_PRESSURE, ATTR_WEATHER_PRESSURE_UNIT, ATTR_WEATHER_TEMPERATURE, ATTR_WEATHER_TEMPERATURE_UNIT, ATTR_WEATHER_UV_INDEX, ATTR_WEATHER_VISIBILITY, ATTR_WEATHER_VISIBILITY_UNIT, ATTR_WEATHER_WIND_BEARING, ATTR_WEATHER_WIND_GUST_SPEED, ATTR_WEATHER_WIND_SPEED, ATTR_WEATHER_WIND_SPEED_UNIT, DOMAIN, UNIT_CONVERSIONS, VALID_UNITS, WeatherEntityFeature
from .websocket_api import async_setup as async_setup_ws_api

"""Weather component that handles meteorological data for your location."""
_LOGGER = ...
ATTR_CONDITION_CLASS = ...
ATTR_CONDITION_CLEAR_NIGHT = ...
ATTR_CONDITION_CLOUDY = ...
ATTR_CONDITION_EXCEPTIONAL = ...
ATTR_CONDITION_FOG = ...
ATTR_CONDITION_HAIL = ...
ATTR_CONDITION_LIGHTNING = ...
ATTR_CONDITION_LIGHTNING_RAINY = ...
ATTR_CONDITION_PARTLYCLOUDY = ...
ATTR_CONDITION_POURING = ...
ATTR_CONDITION_RAINY = ...
ATTR_CONDITION_SNOWY = ...
ATTR_CONDITION_SNOWY_RAINY = ...
ATTR_CONDITION_SUNNY = ...
ATTR_CONDITION_WINDY = ...
ATTR_CONDITION_WINDY_VARIANT = ...
ATTR_FORECAST = ...
ATTR_FORECAST_IS_DAYTIME: Final = ...
ATTR_FORECAST_CONDITION: Final = ...
ATTR_FORECAST_HUMIDITY: Final = ...
ATTR_FORECAST_NATIVE_PRECIPITATION: Final = ...
ATTR_FORECAST_PRECIPITATION: Final = ...
ATTR_FORECAST_PRECIPITATION_PROBABILITY: Final = ...
ATTR_FORECAST_NATIVE_PRESSURE: Final = ...
ATTR_FORECAST_PRESSURE: Final = ...
ATTR_FORECAST_NATIVE_APPARENT_TEMP: Final = ...
ATTR_FORECAST_APPARENT_TEMP: Final = ...
ATTR_FORECAST_NATIVE_TEMP: Final = ...
ATTR_FORECAST_TEMP: Final = ...
ATTR_FORECAST_NATIVE_TEMP_LOW: Final = ...
ATTR_FORECAST_TEMP_LOW: Final = ...
ATTR_FORECAST_TIME: Final = ...
ATTR_FORECAST_WIND_BEARING: Final = ...
ATTR_FORECAST_NATIVE_WIND_GUST_SPEED: Final = ...
ATTR_FORECAST_WIND_GUST_SPEED: Final = ...
ATTR_FORECAST_NATIVE_WIND_SPEED: Final = ...
ATTR_FORECAST_WIND_SPEED: Final = ...
ATTR_FORECAST_NATIVE_DEW_POINT: Final = ...
ATTR_FORECAST_DEW_POINT: Final = ...
ATTR_FORECAST_CLOUD_COVERAGE: Final = ...
ATTR_FORECAST_UV_INDEX: Final = ...
ENTITY_ID_FORMAT = ...
SCAN_INTERVAL = ...
ROUNDING_PRECISION = ...
LEGACY_SERVICE_GET_FORECAST: Final = ...
SERVICE_GET_FORECASTS: Final = ...
_ObservationUpdateCoordinatorT = TypeVar("_ObservationUpdateCoordinatorT", bound="DataUpdateCoordinator[Any]")
_DailyForecastUpdateCoordinatorT = TypeVar("_DailyForecastUpdateCoordinatorT", bound="TimestampDataUpdateCoordinator[Any]")
_HourlyForecastUpdateCoordinatorT = TypeVar("_HourlyForecastUpdateCoordinatorT", bound="TimestampDataUpdateCoordinator[Any]")
_TwiceDailyForecastUpdateCoordinatorT = TypeVar("_TwiceDailyForecastUpdateCoordinatorT", bound="TimestampDataUpdateCoordinator[Any]")
def round_temperature(temperature: float | None, precision: float) -> float | None:
    """Convert temperature into preferred precision for display."""
    ...

class Forecast(TypedDict, total=False):
    """Typed weather forecast dict.

    All attributes are in native units and old attributes kept
    for backwards compatibility.
    """
    condition: str | None
    datetime: Required[str]
    humidity: float | None
    precipitation_probability: int | None
    cloud_coverage: int | None
    native_precipitation: float | None
    precipitation: None
    native_pressure: float | None
    pressure: None
    native_temperature: float | None
    temperature: None
    native_templow: float | None
    templow: None
    native_apparent_temperature: float | None
    wind_bearing: float | str | None
    native_wind_gust_speed: float | None
    native_wind_speed: float | None
    wind_speed: None
    native_dew_point: float | None
    uv_index: float | None
    is_daytime: bool | None
    ...


async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the weather component."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class WeatherEntityDescription(EntityDescription):
    """A class that describes weather entities."""
    ...


class PostInitMeta(abc.ABCMeta):
    """Meta class which calls __post_init__ after __new__ and __init__."""
    def __call__(cls, *args: Any, **kwargs: Any) -> Any:
        """Create an instance."""
        ...
    


class PostInit(metaclass=PostInitMeta):
    """Class which calls __post_init__ after __new__ and __init__."""
    @abc.abstractmethod
    def __post_init__(self, *args: Any, **kwargs: Any) -> None:
        """Finish initializing."""
        ...
    


class WeatherEntity(Entity, PostInit):
    """ABC for weather data."""
    _entity_component_unrecorded_attributes = ...
    entity_description: WeatherEntityDescription
    _attr_condition: str | None = ...
    _attr_forecast: list[Forecast] | None = ...
    _attr_humidity: float | None = ...
    _attr_ozone: float | None = ...
    _attr_cloud_coverage: int | None = ...
    _attr_uv_index: float | None = ...
    _attr_precision: float
    _attr_state: None = ...
    _attr_wind_bearing: float | str | None = ...
    _attr_native_pressure: float | None = ...
    _attr_native_pressure_unit: str | None = ...
    _attr_native_apparent_temperature: float | None = ...
    _attr_native_temperature: float | None = ...
    _attr_native_temperature_unit: str | None = ...
    _attr_native_visibility: float | None = ...
    _attr_native_visibility_unit: str | None = ...
    _attr_native_precipitation_unit: str | None = ...
    _attr_native_wind_gust_speed: float | None = ...
    _attr_native_wind_speed: float | None = ...
    _attr_native_wind_speed_unit: str | None = ...
    _attr_native_dew_point: float | None = ...
    _forecast_listeners: dict[Literal["daily", "hourly", "twice_daily"], list[Callable[[list[JsonValueType] | None], None]],]
    __weather_reported_legacy_forecast = ...
    __weather_legacy_forecast = ...
    _weather_option_temperature_unit: str | None = ...
    _weather_option_pressure_unit: str | None = ...
    _weather_option_visibility_unit: str | None = ...
    _weather_option_precipitation_unit: str | None = ...
    _weather_option_wind_speed_unit: str | None = ...
    def __post_init__(self, *args: Any, **kwargs: Any) -> None:
        """Finish initializing."""
        ...
    
    def __init_subclass__(cls, **kwargs: Any) -> None:
        """Post initialisation processing."""
        ...
    
    @callback
    def add_to_platform_start(self, hass: HomeAssistant, platform: EntityPlatform, parallel_updates: asyncio.Semaphore | None) -> None:
        """Start adding an entity to a platform."""
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Call when the weather entity is added to hass."""
        ...
    
    @property
    def native_apparent_temperature(self) -> float | None:
        """Return the apparent temperature in native units."""
        ...
    
    @property
    def native_temperature(self) -> float | None:
        """Return the temperature in native units."""
        ...
    
    @property
    def native_temperature_unit(self) -> str | None:
        """Return the native unit of measurement for temperature."""
        ...
    
    @property
    def native_dew_point(self) -> float | None:
        """Return the dew point temperature in native units."""
        ...
    
    @property
    def native_pressure(self) -> float | None:
        """Return the pressure in native units."""
        ...
    
    @property
    def native_pressure_unit(self) -> str | None:
        """Return the native unit of measurement for pressure."""
        ...
    
    @property
    def humidity(self) -> float | None:
        """Return the humidity in native units."""
        ...
    
    @property
    def native_wind_gust_speed(self) -> float | None:
        """Return the wind gust speed in native units."""
        ...
    
    @property
    def native_wind_speed(self) -> float | None:
        """Return the wind speed in native units."""
        ...
    
    @property
    def native_wind_speed_unit(self) -> str | None:
        """Return the native unit of measurement for wind speed."""
        ...
    
    @property
    def wind_bearing(self) -> float | str | None:
        """Return the wind bearing."""
        ...
    
    @property
    def ozone(self) -> float | None:
        """Return the ozone level."""
        ...
    
    @property
    def cloud_coverage(self) -> float | None:
        """Return the Cloud coverage in %."""
        ...
    
    @property
    def uv_index(self) -> float | None:
        """Return the UV index."""
        ...
    
    @property
    def native_visibility(self) -> float | None:
        """Return the visibility in native units."""
        ...
    
    @property
    def native_visibility_unit(self) -> str | None:
        """Return the native unit of measurement for visibility."""
        ...
    
    @property
    def forecast(self) -> list[Forecast] | None:
        """Return the forecast in native units.

        Should not be overridden by integrations. Kept for backwards compatibility.
        """
        ...
    
    async def async_forecast_daily(self) -> list[Forecast] | None:
        """Return the daily forecast in native units."""
        ...
    
    async def async_forecast_twice_daily(self) -> list[Forecast] | None:
        """Return the daily forecast in native units."""
        ...
    
    async def async_forecast_hourly(self) -> list[Forecast] | None:
        """Return the hourly forecast in native units."""
        ...
    
    @property
    def native_precipitation_unit(self) -> str | None:
        """Return the native unit of measurement for accumulated precipitation."""
        ...
    
    @property
    def precision(self) -> float:
        """Return the precision of the temperature value, after unit conversion."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the state attributes, converted.

        Attributes are configured from native units to user-configured units.
        """
        ...
    
    @property
    @final
    def state(self) -> str | None:
        """Return the current state."""
        ...
    
    @property
    def condition(self) -> str | None:
        """Return the current condition."""
        ...
    
    @callback
    def async_registry_entry_updated(self) -> None:
        """Run when the entity registry entry has been updated."""
        ...
    
    @final
    @callback
    def async_subscribe_forecast(self, forecast_type: Literal["daily", "hourly", "twice_daily"], forecast_listener: Callable[[list[JsonValueType] | None], None]) -> CALLBACK_TYPE:
        """Subscribe to forecast updates.

        Called by websocket API.
        """
        ...
    
    @final
    async def async_update_listeners(self, forecast_types: Iterable[Literal["daily", "hourly", "twice_daily"]] | None) -> None:
        """Push updated forecast to all listeners."""
        ...
    


def raise_unsupported_forecast(entity_id: str, forecast_type: str) -> None:
    """Raise error on attempt to get an unsupported forecast."""
    ...

async def async_get_forecast_service(weather: WeatherEntity, service_call: ServiceCall) -> ServiceResponse:
    """Get weather forecast.

    Deprecated: please use async_get_forecasts_service.
    """
    ...

async def async_get_forecasts_service(weather: WeatherEntity, service_call: ServiceCall) -> ServiceResponse:
    """Get weather forecast."""
    ...

class CoordinatorWeatherEntity(CoordinatorEntity[_ObservationUpdateCoordinatorT], WeatherEntity, Generic[_ObservationUpdateCoordinatorT, _DailyForecastUpdateCoordinatorT, _HourlyForecastUpdateCoordinatorT, _TwiceDailyForecastUpdateCoordinatorT,]):
    """A class for weather entities using DataUpdateCoordinators."""
    def __init__(self, observation_coordinator: _ObservationUpdateCoordinatorT, *, context: Any = ..., daily_coordinator: _DailyForecastUpdateCoordinatorT | None = ..., hourly_coordinator: _DailyForecastUpdateCoordinatorT | None = ..., twice_daily_coordinator: _DailyForecastUpdateCoordinatorT | None = ..., daily_forecast_valid: timedelta | None = ..., hourly_forecast_valid: timedelta | None = ..., twice_daily_forecast_valid: timedelta | None = ...) -> None:
        """Initialize."""
        ...
    
    async def async_added_to_hass(self) -> None:
        """When entity is added to hass."""
        ...
    
    @final
    async def async_forecast_daily(self) -> list[Forecast] | None:
        """Return the daily forecast in native units."""
        ...
    
    @final
    async def async_forecast_hourly(self) -> list[Forecast] | None:
        """Return the hourly forecast in native units."""
        ...
    
    @final
    async def async_forecast_twice_daily(self) -> list[Forecast] | None:
        """Return the twice daily forecast in native units."""
        ...
    


class SingleCoordinatorWeatherEntity(CoordinatorWeatherEntity[_ObservationUpdateCoordinatorT, TimestampDataUpdateCoordinator[None], TimestampDataUpdateCoordinator[None], TimestampDataUpdateCoordinator[None],]):
    """A class for weather entities using a single DataUpdateCoordinators.

    This class is added as a convenience because:
    - Deriving from CoordinatorWeatherEntity requires specifying all type parameters
    until we upgrade to Python 3.12 which supports defaults
    - Mypy bug https://github.com/python/mypy/issues/9424 prevents us from making the
    forecast cooordinator type vars optional
    """
    def __init__(self, coordinator: _ObservationUpdateCoordinatorT, context: Any = ...) -> None:
        """Initialize."""
        ...
    


