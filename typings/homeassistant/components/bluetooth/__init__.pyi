"""
This type stub file was generated by pyright.
"""

import datetime
import logging
import platform
from __future__ import annotations
from typing import TYPE_CHECKING
from bleak_retry_connector import BleakSlotManager
from bluetooth_adapters import ADAPTER_ADDRESS, ADAPTER_CONNECTION_SLOTS, ADAPTER_HW_VERSION, ADAPTER_MANUFACTURER, ADAPTER_SW_VERSION, AdapterDetails, DEFAULT_ADDRESS, DEFAULT_CONNECTION_SLOTS, adapter_human_name, adapter_model, adapter_unique_name, get_adapters
from home_assistant_bluetooth import BluetoothServiceInfo, BluetoothServiceInfoBleak
from homeassistant.components import usb
from homeassistant.config_entries import ConfigEntry, SOURCE_INTEGRATION_DISCOVERY
from homeassistant.const import EVENT_HOMEASSISTANT_STOP
from homeassistant.core import Event, HassJob, HomeAssistant, callback as hass_callback
from homeassistant.exceptions import ConfigEntryNotReady
from homeassistant.helpers import config_validation as cv, device_registry as dr, discovery_flow
from homeassistant.helpers.debounce import Debouncer
from homeassistant.helpers.event import async_call_later
from homeassistant.helpers.issue_registry import async_delete_issue
from homeassistant.loader import async_get_bluetooth
from . import models, passive_update_processor
from .api import _get_manager, async_address_present, async_ble_device_from_address, async_discovered_service_info, async_get_advertisement_callback, async_get_fallback_availability_interval, async_get_learned_advertising_interval, async_get_scanner, async_last_service_info, async_process_advertisements, async_rediscover_address, async_register_callback, async_register_scanner, async_scanner_by_source, async_scanner_count, async_scanner_devices_by_address, async_set_fallback_availability_interval, async_track_unavailable
from .base_scanner import BaseHaRemoteScanner, BaseHaScanner, BluetoothScannerDevice
from .const import BLUETOOTH_DISCOVERY_COOLDOWN_SECONDS, CONF_ADAPTER, CONF_DETAILS, CONF_PASSIVE, DATA_MANAGER, DOMAIN, FALLBACK_MAXIMUM_STALE_ADVERTISEMENT_SECONDS, LINUX_FIRMWARE_LOAD_FALLBACK_SECONDS, SOURCE_LOCAL
from .manager import BluetoothManager
from .match import BluetoothCallbackMatcher, IntegrationMatcher
from .models import BluetoothCallback, BluetoothChange, BluetoothScanningMode, HaBluetoothConnector
from .scanner import HaScanner, MONOTONIC_TIME, ScannerStartError
from .storage import BluetoothStorage
from homeassistant.helpers.typing import ConfigType

"""The bluetooth integration."""
if TYPE_CHECKING:
    ...
__all__ = ["async_address_present", "async_ble_device_from_address", "async_discovered_service_info", "async_get_fallback_availability_interval", "async_get_learned_advertising_interval", "async_get_scanner", "async_last_service_info", "async_process_advertisements", "async_rediscover_address", "async_register_callback", "async_register_scanner", "async_set_fallback_availability_interval", "async_track_unavailable", "async_scanner_by_source", "async_scanner_count", "async_scanner_devices_by_address", "BaseHaScanner", "BaseHaRemoteScanner", "BluetoothCallbackMatcher", "BluetoothChange", "BluetoothServiceInfo", "BluetoothServiceInfoBleak", "BluetoothScanningMode", "BluetoothCallback", "BluetoothScannerDevice", "HaBluetoothConnector", "SOURCE_LOCAL", "FALLBACK_MAXIMUM_STALE_ADVERTISEMENT_SECONDS", "MONOTONIC_TIME"]
_LOGGER = ...
CONFIG_SCHEMA = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the bluetooth integration."""
    ...

@hass_callback
def async_migrate_entries(hass: HomeAssistant, adapters: dict[str, AdapterDetails], default_adapter: str) -> None:
    """Migrate config entries to support multiple."""
    ...

async def async_discover_adapters(hass: HomeAssistant, adapters: dict[str, AdapterDetails]) -> None:
    """Discover adapters and start flows."""
    ...

async def async_update_device(hass: HomeAssistant, entry: ConfigEntry, adapter: str, details: AdapterDetails) -> None:
    """Update device registry entry.

    The physical adapter can change from hci0/hci1 on reboot
    or if the user moves around the usb sticks so we need to
    update the device with the new location so they can
    figure out where the adapter is.
    """
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry for a bluetooth scanner."""
    ...

async def async_update_listener(hass: HomeAssistant, entry: ConfigEntry) -> None:
    """Handle options update."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

