"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_TEMPERATURE, PRECISION_TENTHS, PRECISION_WHOLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_OFF, STATE_ON, UnitOfTemperature
from homeassistant.core import HomeAssistant, ServiceCall
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, make_entity_service_schema
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.temperature import display_temp as show_temp
from homeassistant.helpers.typing import ConfigType
from homeassistant.util.unit_conversion import TemperatureConverter
from .const import ATTR_AUX_HEAT, ATTR_CURRENT_HUMIDITY, ATTR_CURRENT_TEMPERATURE, ATTR_FAN_MODE, ATTR_FAN_MODES, ATTR_HUMIDITY, ATTR_HVAC_ACTION, ATTR_HVAC_MODE, ATTR_HVAC_MODES, ATTR_MAX_HUMIDITY, ATTR_MAX_TEMP, ATTR_MIN_HUMIDITY, ATTR_MIN_TEMP, ATTR_PRESET_MODE, ATTR_PRESET_MODES, ATTR_SWING_MODE, ATTR_SWING_MODES, ATTR_TARGET_TEMP_HIGH, ATTR_TARGET_TEMP_LOW, ATTR_TARGET_TEMP_STEP, ClimateEntityFeature, DOMAIN, FAN_AUTO, FAN_DIFFUSE, FAN_FOCUS, FAN_HIGH, FAN_LOW, FAN_MEDIUM, FAN_MIDDLE, FAN_OFF, FAN_ON, FAN_TOP, HVACAction, HVACMode, HVAC_MODES, HVAC_MODE_COOL, HVAC_MODE_HEAT, HVAC_MODE_HEAT_COOL, HVAC_MODE_OFF, PRESET_ACTIVITY, PRESET_AWAY, PRESET_BOOST, PRESET_COMFORT, PRESET_ECO, PRESET_HOME, PRESET_NONE, PRESET_SLEEP, SERVICE_SET_AUX_HEAT, SERVICE_SET_FAN_MODE, SERVICE_SET_HUMIDITY, SERVICE_SET_HVAC_MODE, SERVICE_SET_PRESET_MODE, SERVICE_SET_SWING_MODE, SERVICE_SET_TEMPERATURE, SUPPORT_AUX_HEAT, SUPPORT_FAN_MODE, SUPPORT_PRESET_MODE, SUPPORT_SWING_MODE, SUPPORT_TARGET_HUMIDITY, SUPPORT_TARGET_TEMPERATURE, SUPPORT_TARGET_TEMPERATURE_RANGE, SWING_BOTH, SWING_HORIZONTAL, SWING_OFF, SWING_ON, SWING_VERTICAL

"""Provides functionality to interact with climate devices."""
DEFAULT_MIN_TEMP = ...
DEFAULT_MAX_TEMP = ...
DEFAULT_MIN_HUMIDITY = ...
DEFAULT_MAX_HUMIDITY = ...
ENTITY_ID_FORMAT = ...
SCAN_INTERVAL = ...
CONVERTIBLE_ATTRIBUTE = ...
_LOGGER = ...
SET_TEMPERATURE_SCHEMA = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up climate entities."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class ClimateEntityDescription(EntityDescription):
    """A class that describes climate entities."""
    ...


class ClimateEntity(Entity):
    """Base class for climate entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: ClimateEntityDescription
    _attr_current_humidity: int | None = ...
    _attr_current_temperature: float | None = ...
    _attr_fan_mode: str | None
    _attr_fan_modes: list[str] | None
    _attr_hvac_action: HVACAction | None = ...
    _attr_hvac_mode: HVACMode | None
    _attr_hvac_modes: list[HVACMode]
    _attr_is_aux_heat: bool | None
    _attr_max_humidity: int = ...
    _attr_max_temp: float
    _attr_min_humidity: int = ...
    _attr_min_temp: float
    _attr_precision: float
    _attr_preset_mode: str | None
    _attr_preset_modes: list[str] | None
    _attr_supported_features: ClimateEntityFeature = ...
    _attr_swing_mode: str | None
    _attr_swing_modes: list[str] | None
    _attr_target_humidity: int | None = ...
    _attr_target_temperature_high: float | None
    _attr_target_temperature_low: float | None
    _attr_target_temperature_step: float | None = ...
    _attr_target_temperature: float | None = ...
    _attr_temperature_unit: str
    @final
    @property
    def state(self) -> str | None:
        """Return the current state."""
        ...
    
    @property
    def precision(self) -> float:
        """Return the precision of the system."""
        ...
    
    @property
    def capability_attributes(self) -> dict[str, Any] | None:
        """Return the capability attributes."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the optional state attributes."""
        ...
    
    @property
    def temperature_unit(self) -> str:
        """Return the unit of measurement used by the platform."""
        ...
    
    @property
    def current_humidity(self) -> int | None:
        """Return the current humidity."""
        ...
    
    @property
    def target_humidity(self) -> int | None:
        """Return the humidity we try to reach."""
        ...
    
    @property
    def hvac_mode(self) -> HVACMode | None:
        """Return hvac operation ie. heat, cool mode."""
        ...
    
    @property
    def hvac_modes(self) -> list[HVACMode]:
        """Return the list of available hvac operation modes."""
        ...
    
    @property
    def hvac_action(self) -> HVACAction | None:
        """Return the current running hvac operation if supported."""
        ...
    
    @property
    def current_temperature(self) -> float | None:
        """Return the current temperature."""
        ...
    
    @property
    def target_temperature(self) -> float | None:
        """Return the temperature we try to reach."""
        ...
    
    @property
    def target_temperature_step(self) -> float | None:
        """Return the supported step of target temperature."""
        ...
    
    @property
    def target_temperature_high(self) -> float | None:
        """Return the highbound target temperature we try to reach.

        Requires ClimateEntityFeature.TARGET_TEMPERATURE_RANGE.
        """
        ...
    
    @property
    def target_temperature_low(self) -> float | None:
        """Return the lowbound target temperature we try to reach.

        Requires ClimateEntityFeature.TARGET_TEMPERATURE_RANGE.
        """
        ...
    
    @property
    def preset_mode(self) -> str | None:
        """Return the current preset mode, e.g., home, away, temp.

        Requires ClimateEntityFeature.PRESET_MODE.
        """
        ...
    
    @property
    def preset_modes(self) -> list[str] | None:
        """Return a list of available preset modes.

        Requires ClimateEntityFeature.PRESET_MODE.
        """
        ...
    
    @property
    def is_aux_heat(self) -> bool | None:
        """Return true if aux heater.

        Requires ClimateEntityFeature.AUX_HEAT.
        """
        ...
    
    @property
    def fan_mode(self) -> str | None:
        """Return the fan setting.

        Requires ClimateEntityFeature.FAN_MODE.
        """
        ...
    
    @property
    def fan_modes(self) -> list[str] | None:
        """Return the list of available fan modes.

        Requires ClimateEntityFeature.FAN_MODE.
        """
        ...
    
    @property
    def swing_mode(self) -> str | None:
        """Return the swing setting.

        Requires ClimateEntityFeature.SWING_MODE.
        """
        ...
    
    @property
    def swing_modes(self) -> list[str] | None:
        """Return the list of available swing modes.

        Requires ClimateEntityFeature.SWING_MODE.
        """
        ...
    
    def set_temperature(self, **kwargs: Any) -> None:
        """Set new target temperature."""
        ...
    
    async def async_set_temperature(self, **kwargs: Any) -> None:
        """Set new target temperature."""
        ...
    
    def set_humidity(self, humidity: int) -> None:
        """Set new target humidity."""
        ...
    
    async def async_set_humidity(self, humidity: int) -> None:
        """Set new target humidity."""
        ...
    
    def set_fan_mode(self, fan_mode: str) -> None:
        """Set new target fan mode."""
        ...
    
    async def async_set_fan_mode(self, fan_mode: str) -> None:
        """Set new target fan mode."""
        ...
    
    def set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """Set new target hvac mode."""
        ...
    
    async def async_set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """Set new target hvac mode."""
        ...
    
    def set_swing_mode(self, swing_mode: str) -> None:
        """Set new target swing operation."""
        ...
    
    async def async_set_swing_mode(self, swing_mode: str) -> None:
        """Set new target swing operation."""
        ...
    
    def set_preset_mode(self, preset_mode: str) -> None:
        """Set new preset mode."""
        ...
    
    async def async_set_preset_mode(self, preset_mode: str) -> None:
        """Set new preset mode."""
        ...
    
    def turn_aux_heat_on(self) -> None:
        """Turn auxiliary heater on."""
        ...
    
    async def async_turn_aux_heat_on(self) -> None:
        """Turn auxiliary heater on."""
        ...
    
    def turn_aux_heat_off(self) -> None:
        """Turn auxiliary heater off."""
        ...
    
    async def async_turn_aux_heat_off(self) -> None:
        """Turn auxiliary heater off."""
        ...
    
    async def async_turn_on(self) -> None:
        """Turn the entity on."""
        ...
    
    async def async_turn_off(self) -> None:
        """Turn the entity off."""
        ...
    
    @property
    def supported_features(self) -> ClimateEntityFeature:
        """Return the list of supported features."""
        ...
    
    @property
    def min_temp(self) -> float:
        """Return the minimum temperature."""
        ...
    
    @property
    def max_temp(self) -> float:
        """Return the maximum temperature."""
        ...
    
    @property
    def min_humidity(self) -> int:
        """Return the minimum humidity."""
        ...
    
    @property
    def max_humidity(self) -> int:
        """Return the maximum humidity."""
        ...
    


async def async_service_aux_heat(entity: ClimateEntity, service_call: ServiceCall) -> None:
    """Handle aux heat service."""
    ...

async def async_service_temperature_set(entity: ClimateEntity, service_call: ServiceCall) -> None:
    """Handle set temperature service."""
    ...

