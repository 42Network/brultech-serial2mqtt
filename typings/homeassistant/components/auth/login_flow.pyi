"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from collections.abc import Callable
from typing import Any, TYPE_CHECKING
from aiohttp import web
from homeassistant.auth import AuthManagerFlowManager
from homeassistant.auth.models import Credentials
from homeassistant.components.http.ban import log_invalid_auth
from homeassistant.components.http.data_validator import RequestDataValidator
from homeassistant.components.http.view import HomeAssistantView
from homeassistant.core import HomeAssistant
from . import StoreResultType

"""HTTP views handle login flow.

# GET /auth/providers

Return a list of auth providers. Example:

[
    {
        "name": "Local",
        "id": null,
        "type": "local_provider",
    }
]


# POST /auth/login_flow

Create a login flow. Will return the first step of the flow.

Pass in parameter 'client_id' and 'redirect_url' validate by indieauth.

Pass in parameter 'handler' to specify the auth provider to use. Auth providers
are identified by type and id.

And optional parameter 'type' has to set as 'link_user' if login flow used for
link credential to exist user. Default 'type' is 'authorize'.

{
    "client_id": "https://hassbian.local:8123/",
    "handler": ["local_provider", null],
    "redirect_url": "https://hassbian.local:8123/",
    "type': "authorize"
}

Return value will be a step in a data entry flow. See the docs for data entry
flow for details.

{
    "data_schema": [
        {"name": "username", "type": "string"},
        {"name": "password", "type": "string"}
    ],
    "errors": {},
    "flow_id": "8f7e42faab604bcab7ac43c44ca34d58",
    "handler": ["insecure_example", null],
    "step_id": "init",
    "type": "form"
}


# POST /auth/login_flow/{flow_id}

Progress the flow. Most flows will be 1 page, but could optionally add extra
login challenges, like TFA. Once the flow has finished, the returned step will
have type FlowResultType.CREATE_ENTRY and "result" key will contain an authorization code.
The authorization code associated with an authorized user by default, it will
associate with an credential if "type" set to "link_user" in
"/auth/login_flow"

{
    "flow_id": "8f7e42faab604bcab7ac43c44ca34d58",
    "handler": ["insecure_example", null],
    "result": "411ee2f916e648d691e937ae9344681e",
    "title": "Example",
    "type": "create_entry",
    "version": 1
}
"""
if TYPE_CHECKING:
    ...
async def async_setup(hass: HomeAssistant, store_result: Callable[[str, Credentials], str]) -> None:
    """Component to allow users to login."""
    ...

class WellKnownOAuthInfoView(HomeAssistantView):
    """View to host the OAuth2 information."""
    requires_auth = ...
    url = ...
    name = ...
    async def get(self, request: web.Request) -> web.Response:
        """Return the well known OAuth2 authorization info."""
        ...
    


class AuthProvidersView(HomeAssistantView):
    """View to get available auth providers."""
    url = ...
    name = ...
    requires_auth = ...
    async def get(self, request: web.Request) -> web.Response:
        """Get available auth providers."""
        ...
    


class LoginFlowBaseView(HomeAssistantView):
    """Base class for the login views."""
    requires_auth = ...
    def __init__(self, flow_mgr: AuthManagerFlowManager, store_result: StoreResultType) -> None:
        """Initialize the flow manager index view."""
        ...
    


class LoginFlowIndexView(LoginFlowBaseView):
    """View to create a login flow."""
    url = ...
    name = ...
    async def get(self, request: web.Request) -> web.Response:
        """Do not allow index of flows in progress."""
        ...
    
    @RequestDataValidator(vol.Schema({ vol.Required("client_id"): str,vol.Required("handler"): vol.Any(str, list),vol.Required("redirect_uri"): str,vol.Optional("type", default="authorize"): str }))
    @log_invalid_auth
    async def post(self, request: web.Request, data: dict[str, Any]) -> web.Response:
        """Create a new login flow."""
        ...
    


class LoginFlowResourceView(LoginFlowBaseView):
    """View to interact with the flow manager."""
    url = ...
    name = ...
    async def get(self, request: web.Request) -> web.Response:
        """Do not allow getting status of a flow in progress."""
        ...
    
    @RequestDataValidator(vol.Schema({ vol.Required("client_id"): str }, extra=vol.ALLOW_EXTRA))
    @log_invalid_auth
    async def post(self, request: web.Request, data: dict[str, Any], flow_id: str) -> web.Response:
        """Handle progressing a login flow request."""
        ...
    
    async def delete(self, request: web.Request, flow_id: str) -> web.Response:
        """Cancel a flow in progress."""
        ...
    


