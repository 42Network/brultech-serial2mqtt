"""
This type stub file was generated by pyright.
"""

import asyncio
import uuid
import voluptuous as vol
from __future__ import annotations
from collections.abc import Callable
from datetime import datetime, timedelta
from http import HTTPStatus
from logging import getLogger
from typing import Any, cast
from aiohttp import web
from multidict import MultiDictProxy
from homeassistant.auth import InvalidAuthError
from homeassistant.auth.models import Credentials, RefreshToken, TOKEN_TYPE_LONG_LIVED_ACCESS_TOKEN, User
from homeassistant.components import websocket_api
from homeassistant.components.http.auth import async_sign_path, async_user_not_allowed_do_auth
from homeassistant.components.http.ban import log_invalid_auth
from homeassistant.components.http.data_validator import RequestDataValidator
from homeassistant.components.http.view import HomeAssistantView
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import config_validation as cv
from homeassistant.helpers.config_entry_oauth2_flow import OAuth2AuthorizeCallbackView
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.util import dt as dt_util
from . import indieauth, login_flow, mfa_setup_flow

"""Component to allow users to login and get tokens.

# POST /auth/token

This is an OAuth2 endpoint for granting tokens. We currently support the grant
types "authorization_code" and "refresh_token". Because we follow the OAuth2
spec, data should be send in formatted as x-www-form-urlencoded. Examples will
be in JSON as it's more readable.

## Grant type authorization_code

Exchange the authorization code retrieved from the login flow for tokens.

{
    "client_id": "https://hassbian.local:8123/",
    "grant_type": "authorization_code",
    "code": "411ee2f916e648d691e937ae9344681e"
}

Return value will be the access and refresh tokens. The access token will have
a limited expiration. New access tokens can be requested using the refresh
token. The value ha_auth_provider will contain the auth provider type that was
used to authorize the refresh token.

{
    "access_token": "ABCDEFGH",
    "expires_in": 1800,
    "refresh_token": "IJKLMNOPQRST",
    "token_type": "Bearer",
    "ha_auth_provider": "homeassistant"
}

## Grant type refresh_token

Request a new access token using a refresh token.

{
    "client_id": "https://hassbian.local:8123/",
    "grant_type": "refresh_token",
    "refresh_token": "IJKLMNOPQRST"
}

Return value will be a new access token. The access token will have
a limited expiration.

{
    "access_token": "ABCDEFGH",
    "expires_in": 1800,
    "token_type": "Bearer"
}

## Revoking a refresh token

It is also possible to revoke a refresh token and all access tokens that have
ever been granted by that refresh token. Response code will ALWAYS be 200.

{
    "token": "IJKLMNOPQRST",
    "action": "revoke"
}

# Websocket API

## Get current user

Send websocket command `auth/current_user` will return current user of the
active websocket connection.

{
    "id": 10,
    "type": "auth/current_user",
}

The result payload likes

{
    "id": 10,
    "type": "result",
    "success": true,
    "result": {
        "id": "USER_ID",
        "name": "John Doe",
        "is_owner": true,
        "credentials": [{
            "auth_provider_type": "homeassistant",
            "auth_provider_id": null
        }],
        "mfa_modules": [{
            "id": "totp",
            "name": "TOTP",
            "enabled": true
        }]
    }
}

## Create a long-lived access token

Send websocket command `auth/long_lived_access_token` will create
a long-lived access token for current user. Access token will not be saved in
Home Assistant. User need to record the token in secure place.

{
    "id": 11,
    "type": "auth/long_lived_access_token",
    "client_name": "GPS Logger",
    "lifespan": 365
}

Result will be a long-lived access token:

{
    "id": 11,
    "type": "result",
    "success": true,
    "result": "ABCDEFGH"
}


# POST /auth/external/callback

This is an endpoint for OAuth2 Authorization callbacks used by integrations
that link accounts with other cloud providers using LocalOAuth2Implementation
as part of a config flow.
"""
DOMAIN = ...
StoreResultType = Callable[[str, Credentials], str]
RetrieveResultType = Callable[[str, str], Credentials | None]
CONFIG_SCHEMA = ...
@bind_hass
def create_auth_code(hass: HomeAssistant, client_id: str, credential: Credentials) -> str:
    """Create an authorization code to fetch tokens."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Component to allow users to login."""
    ...

class RevokeTokenView(HomeAssistantView):
    """View to revoke tokens."""
    url = ...
    name = ...
    requires_auth = ...
    cors_allowed = ...
    async def post(self, request: web.Request) -> web.Response:
        """Revoke a token."""
        ...
    


class TokenView(HomeAssistantView):
    """View to issue tokens."""
    url = ...
    name = ...
    requires_auth = ...
    cors_allowed = ...
    def __init__(self, retrieve_auth: RetrieveResultType) -> None:
        """Initialize the token view."""
        ...
    
    @log_invalid_auth
    async def post(self, request: web.Request) -> web.Response:
        """Grant a token."""
        ...
    


class LinkUserView(HomeAssistantView):
    """View to link existing users to new credentials."""
    url = ...
    name = ...
    def __init__(self, retrieve_credentials: RetrieveResultType) -> None:
        """Initialize the link user view."""
        ...
    
    @RequestDataValidator(vol.Schema({ "code": str,"client_id": str }))
    async def post(self, request: web.Request, data: dict[str, Any]) -> web.Response:
        """Link a user."""
        ...
    


@websocket_api.websocket_command({ vol.Required("type"): "auth/current_user" })
@websocket_api.ws_require_user()
@websocket_api.async_response
async def websocket_current_user(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Return the current user."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "auth/long_lived_access_token",vol.Required("lifespan"): int,vol.Required("client_name"): str,vol.Optional("client_icon"): str })
@websocket_api.ws_require_user()
@websocket_api.async_response
async def websocket_create_long_lived_access_token(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Create or a long-lived access token."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "auth/refresh_tokens" })
@websocket_api.ws_require_user()
@callback
def websocket_refresh_tokens(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Return metadata of users refresh tokens."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "auth/delete_refresh_token",vol.Required("refresh_token_id"): str })
@websocket_api.ws_require_user()
@websocket_api.async_response
async def websocket_delete_refresh_token(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle a delete refresh token request."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "auth/delete_all_refresh_tokens" })
@websocket_api.ws_require_user()
@websocket_api.async_response
async def websocket_delete_all_refresh_tokens(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle delete all refresh tokens request."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "auth/sign_path",vol.Required("path"): str,vol.Optional("expires", default=30): int })
@websocket_api.ws_require_user()
@callback
def websocket_sign_path(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle a sign path request."""
    ...

