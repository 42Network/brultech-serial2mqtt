"""
This type stub file was generated by pyright.
"""

import logging
from __future__ import annotations
from ipaddress import IPv4Address, IPv6Address, ip_interface
from homeassistant.core import HomeAssistant, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import config_validation as cv
from homeassistant.helpers.typing import ConfigType, UNDEFINED, UndefinedType
from homeassistant.loader import bind_hass
from . import util
from .const import DOMAIN, IPV4_BROADCAST_ADDR, LOOPBACK_TARGET_IP, MDNS_TARGET_IP, PUBLIC_TARGET_IP
from .models import Adapter
from .network import Network, async_get_network

"""The Network Configuration integration."""
_LOGGER = ...
CONFIG_SCHEMA = ...
@bind_hass
async def async_get_adapters(hass: HomeAssistant) -> list[Adapter]:
    """Get the network adapter configuration."""
    ...

@bind_hass
async def async_get_source_ip(hass: HomeAssistant, target_ip: str | UndefinedType = ...) -> str:
    """Get the source ip for a target ip."""
    ...

@bind_hass
async def async_get_enabled_source_ips(hass: HomeAssistant) -> list[IPv4Address | IPv6Address]:
    """Build the list of enabled source ips."""
    ...

@callback
def async_only_default_interface_enabled(adapters: list[Adapter]) -> bool:
    """Check to see if any non-default adapter is enabled."""
    ...

@bind_hass
async def async_get_ipv4_broadcast_addresses(hass: HomeAssistant) -> set[IPv4Address]:
    """Return a set of broadcast addresses."""
    ...

async def async_get_announce_addresses(hass: HomeAssistant) -> list[str]:
    """Return a list of IP addresses to announce/use via zeroconf/ssdp/etc.

    The default ip address is always returned first if available.
    """
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up network for Home Assistant."""
    ...

