"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Mapping
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_ENTITY_ID, ATTR_TEMPERATURE, PRECISION_TENTHS, PRECISION_WHOLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_OFF, STATE_ON, UnitOfTemperature
from homeassistant.core import HomeAssistant, ServiceCall
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.temperature import display_temp as show_temp
from homeassistant.helpers.typing import ConfigType
from homeassistant.util.unit_conversion import TemperatureConverter

"""Support for water heater devices."""
DEFAULT_MIN_TEMP = ...
DEFAULT_MAX_TEMP = ...
DOMAIN = ...
ENTITY_ID_FORMAT = ...
SCAN_INTERVAL = ...
SERVICE_SET_AWAY_MODE = ...
SERVICE_SET_TEMPERATURE = ...
SERVICE_SET_OPERATION_MODE = ...
STATE_ECO = ...
STATE_ELECTRIC = ...
STATE_PERFORMANCE = ...
STATE_HIGH_DEMAND = ...
STATE_HEAT_PUMP = ...
STATE_GAS = ...
class WaterHeaterEntityFeature(IntFlag):
    """Supported features of the fan entity."""
    TARGET_TEMPERATURE = ...
    OPERATION_MODE = ...
    AWAY_MODE = ...
    ON_OFF = ...


SUPPORT_TARGET_TEMPERATURE = ...
SUPPORT_OPERATION_MODE = ...
SUPPORT_AWAY_MODE = ...
ATTR_MAX_TEMP = ...
ATTR_MIN_TEMP = ...
ATTR_AWAY_MODE = ...
ATTR_OPERATION_MODE = ...
ATTR_OPERATION_LIST = ...
ATTR_TARGET_TEMP_HIGH = ...
ATTR_TARGET_TEMP_LOW = ...
ATTR_CURRENT_TEMPERATURE = ...
CONVERTIBLE_ATTRIBUTE = ...
_LOGGER = ...
ON_OFF_SERVICE_SCHEMA = ...
SET_AWAY_MODE_SCHEMA = ...
SET_TEMPERATURE_SCHEMA = ...
SET_OPERATION_MODE_SCHEMA = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up water_heater devices."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class WaterHeaterEntityEntityDescription(EntityDescription):
    """A class that describes water heater entities."""
    ...


class WaterHeaterEntity(Entity):
    """Base class for water heater entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: WaterHeaterEntityEntityDescription
    _attr_current_operation: str | None = ...
    _attr_current_temperature: float | None = ...
    _attr_is_away_mode_on: bool | None = ...
    _attr_max_temp: float
    _attr_min_temp: float
    _attr_operation_list: list[str] | None = ...
    _attr_precision: float
    _attr_state: None = ...
    _attr_supported_features: WaterHeaterEntityFeature = ...
    _attr_target_temperature_high: float | None = ...
    _attr_target_temperature_low: float | None = ...
    _attr_target_temperature: float | None = ...
    _attr_temperature_unit: str
    @final
    @property
    def state(self) -> str | None:
        """Return the current state."""
        ...
    
    @property
    def precision(self) -> float:
        """Return the precision of the system."""
        ...
    
    @property
    def capability_attributes(self) -> Mapping[str, Any]:
        """Return capability attributes."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any]:
        """Return the optional state attributes."""
        ...
    
    @property
    def temperature_unit(self) -> str:
        """Return the unit of measurement used by the platform."""
        ...
    
    @property
    def current_operation(self) -> str | None:
        """Return current operation ie. eco, electric, performance, ..."""
        ...
    
    @property
    def operation_list(self) -> list[str] | None:
        """Return the list of available operation modes."""
        ...
    
    @property
    def current_temperature(self) -> float | None:
        """Return the current temperature."""
        ...
    
    @property
    def target_temperature(self) -> float | None:
        """Return the temperature we try to reach."""
        ...
    
    @property
    def target_temperature_high(self) -> float | None:
        """Return the highbound target temperature we try to reach."""
        ...
    
    @property
    def target_temperature_low(self) -> float | None:
        """Return the lowbound target temperature we try to reach."""
        ...
    
    @property
    def is_away_mode_on(self) -> bool | None:
        """Return true if away mode is on."""
        ...
    
    def set_temperature(self, **kwargs: Any) -> None:
        """Set new target temperature."""
        ...
    
    async def async_set_temperature(self, **kwargs: Any) -> None:
        """Set new target temperature."""
        ...
    
    def turn_on(self, **kwargs: Any) -> None:
        """Turn the water heater on."""
        ...
    
    async def async_turn_on(self, **kwargs: Any) -> None:
        """Turn the water heater on."""
        ...
    
    def turn_off(self, **kwargs: Any) -> None:
        """Turn the water heater off."""
        ...
    
    async def async_turn_off(self, **kwargs: Any) -> None:
        """Turn the water heater off."""
        ...
    
    def set_operation_mode(self, operation_mode: str) -> None:
        """Set new target operation mode."""
        ...
    
    async def async_set_operation_mode(self, operation_mode: str) -> None:
        """Set new target operation mode."""
        ...
    
    def turn_away_mode_on(self) -> None:
        """Turn away mode on."""
        ...
    
    async def async_turn_away_mode_on(self) -> None:
        """Turn away mode on."""
        ...
    
    def turn_away_mode_off(self) -> None:
        """Turn away mode off."""
        ...
    
    async def async_turn_away_mode_off(self) -> None:
        """Turn away mode off."""
        ...
    
    @property
    def min_temp(self) -> float:
        """Return the minimum temperature."""
        ...
    
    @property
    def max_temp(self) -> float:
        """Return the maximum temperature."""
        ...
    
    @property
    def supported_features(self) -> WaterHeaterEntityFeature:
        """Return the list of supported features."""
        ...
    


async def async_service_away_mode(entity: WaterHeaterEntity, service: ServiceCall) -> None:
    """Handle away mode service."""
    ...

async def async_service_temperature_set(entity: WaterHeaterEntity, service: ServiceCall) -> None:
    """Handle set temperature service."""
    ...

