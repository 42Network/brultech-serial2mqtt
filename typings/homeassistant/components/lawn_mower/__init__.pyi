"""
This type stub file was generated by pyright.
"""

import logging
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from typing import final
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from .const import DOMAIN, LawnMowerActivity, LawnMowerEntityFeature, SERVICE_DOCK, SERVICE_PAUSE, SERVICE_START_MOWING

"""The lawn mower integration."""
SCAN_INTERVAL = ...
_LOGGER = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the lawn_mower component."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up lawn mower devices."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class LawnMowerEntityEntityDescription(EntityDescription):
    """A class that describes lawn mower entities."""
    ...


class LawnMowerEntity(Entity):
    """Base class for lawn mower entities."""
    entity_description: LawnMowerEntityEntityDescription
    _attr_activity: LawnMowerActivity | None = ...
    _attr_supported_features: LawnMowerEntityFeature = ...
    @final
    @property
    def state(self) -> str | None:
        """Return the current state."""
        ...
    
    @property
    def activity(self) -> LawnMowerActivity | None:
        """Return the current lawn mower activity."""
        ...
    
    @property
    def supported_features(self) -> LawnMowerEntityFeature:
        """Flag lawn mower features that are supported."""
        ...
    
    def start_mowing(self) -> None:
        """Start or resume mowing."""
        ...
    
    async def async_start_mowing(self) -> None:
        """Start or resume mowing."""
        ...
    
    def dock(self) -> None:
        """Dock the mower."""
        ...
    
    async def async_dock(self) -> None:
        """Dock the mower."""
        ...
    
    def pause(self) -> None:
        """Pause the lawn mower."""
        ...
    
    async def async_pause(self) -> None:
        """Pause the lawn mower."""
        ...
    


