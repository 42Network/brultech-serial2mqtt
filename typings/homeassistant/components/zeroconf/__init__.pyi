"""
This type stub file was generated by pyright.
"""

import asyncio
import contextlib
import logging
import re
import sys
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from contextlib import suppress
from dataclasses import dataclass
from fnmatch import translate
from functools import lru_cache
from ipaddress import IPv4Address, IPv6Address
from typing import Any, Final, TYPE_CHECKING, cast
from zeroconf import BadTypeInNameException, IPVersion, InterfaceChoice, ServiceStateChange
from zeroconf.asyncio import AsyncServiceInfo
from homeassistant import config_entries
from homeassistant.components import network
from homeassistant.const import EVENT_HOMEASSISTANT_STOP, __version__
from homeassistant.core import Event, HomeAssistant, callback
from homeassistant.data_entry_flow import BaseServiceInfo
from homeassistant.helpers import discovery_flow, instance_id
from homeassistant.helpers.network import NoURLAvailableError, get_url
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import HomeKitDiscoveredIntegration, async_get_homekit, async_get_zeroconf, bind_hass
from homeassistant.setup import async_when_setup_or_start
from .models import HaAsyncServiceBrowser, HaAsyncZeroconf, HaZeroconf
from .usage import install_multiple_zeroconf_catcher

"""Support for exposing Home Assistant via Zeroconf."""
_LOGGER = ...
DOMAIN = ...
ZEROCONF_TYPE = ...
HOMEKIT_TYPES = ...
_HOMEKIT_MODEL_SPLITS = ...
LOWER_MATCH_ATTRS = ...
CONF_DEFAULT_INTERFACE = ...
CONF_IPV6 = ...
DEFAULT_DEFAULT_INTERFACE = ...
DEFAULT_IPV6 = ...
HOMEKIT_PAIRED_STATUS_FLAG = ...
HOMEKIT_MODEL_LOWER = ...
HOMEKIT_MODEL_UPPER = ...
MAX_PROPERTY_VALUE_LEN = ...
MAX_NAME_LEN = ...
ATTR_PROPERTIES: Final = ...
ATTR_PROPERTIES_ID: Final = ...
CONFIG_SCHEMA = ...
@dataclass(slots=True)
class ZeroconfServiceInfo(BaseServiceInfo):
    """Prepared info from mDNS entries.

    The ip_address is the most recently updated address
    that is not a link local or unspecified address.

    The ip_addresses are all addresses in order of most
    recently updated to least recently updated.

    The host is the string representation of the ip_address.

    The addresses are the string representations of the
    ip_addresses.

    It is recommended to use the ip_address to determine
    the address to connect to as it will be the most
    recently updated address that is not a link local
    or unspecified address.
    """
    ip_address: IPv4Address | IPv6Address
    ip_addresses: list[IPv4Address | IPv6Address]
    port: int | None
    hostname: str
    type: str
    name: str
    properties: dict[str, Any]
    @property
    def host(self) -> str:
        """Return the host."""
        ...
    
    @property
    def addresses(self) -> list[str]:
        """Return the addresses."""
        ...
    


@bind_hass
async def async_get_instance(hass: HomeAssistant) -> HaZeroconf:
    """Zeroconf instance to be shared with other integrations that use it."""
    ...

@bind_hass
async def async_get_async_instance(hass: HomeAssistant) -> HaAsyncZeroconf:
    """Zeroconf instance to be shared with other integrations that use it."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up Zeroconf and make Home Assistant discoverable."""
    ...

def is_homekit_paired(props: dict[str, Any]) -> bool:
    """Check properties to see if a device is homekit paired."""
    ...

class ZeroconfDiscovery:
    """Discovery via zeroconf."""
    def __init__(self, hass: HomeAssistant, zeroconf: HaZeroconf, zeroconf_types: dict[str, list[dict[str, str | dict[str, str]]]], homekit_model_lookups: dict[str, HomeKitDiscoveredIntegration], homekit_model_matchers: dict[re.Pattern, HomeKitDiscoveredIntegration], ipv6: bool) -> None:
        """Init discovery."""
        ...
    
    async def async_setup(self) -> None:
        """Start discovery."""
        ...
    
    async def async_stop(self) -> None:
        """Cancel the service browser and stop processing the queue."""
        ...
    
    @callback
    def async_service_update(self, zeroconf: HaZeroconf, service_type: str, name: str, state_change: ServiceStateChange) -> None:
        """Service state changed."""
        ...
    


def async_get_homekit_discovery(homekit_model_lookups: dict[str, HomeKitDiscoveredIntegration], homekit_model_matchers: dict[re.Pattern, HomeKitDiscoveredIntegration], props: dict[str, Any]) -> HomeKitDiscoveredIntegration | None:
    """Handle a HomeKit discovery.

    Return the domain to forward the discovery data to
    """
    ...

_stringify_ip_address = ...
def info_from_service(service: AsyncServiceInfo) -> ZeroconfServiceInfo | None:
    """Return prepared info from mDNS entries."""
    ...

