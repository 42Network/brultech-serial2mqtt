"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from collections.abc import Callable
from typing import Any
from homeassistant.const import MATCH_ALL
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import config_validation as cv
from . import const, decorators
from .connection import ActiveConnection

"""Commands part of Websocket API."""
ALL_SERVICE_DESCRIPTIONS_JSON_CACHE = ...
_LOGGER = ...
@callback
def async_register_commands(hass: HomeAssistant, async_reg: Callable[[HomeAssistant, const.WebSocketCommandHandler], None]) -> None:
    """Register commands."""
    ...

def pong_message(iden: int) -> dict[str, Any]:
    """Return a pong message."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "subscribe_events",vol.Optional("event_type", default=MATCH_ALL): str })
def handle_subscribe_events(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle subscribe events command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "subscribe_bootstrap_integrations" })
def handle_subscribe_bootstrap_integrations(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle subscribe bootstrap integrations command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "unsubscribe_events",vol.Required("subscription"): cv.positive_int })
def handle_unsubscribe_events(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle unsubscribe events command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "call_service",vol.Required("domain"): str,vol.Required("service"): str,vol.Optional("target"): cv.ENTITY_SERVICE_FIELDS,vol.Optional("service_data"): dict,vol.Optional("return_response", default=False): bool })
@decorators.async_response
async def handle_call_service(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle call service command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "get_states" })
def handle_get_states(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle get states command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "subscribe_entities",vol.Optional("entity_ids"): cv.entity_ids })
def handle_subscribe_entities(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle subscribe entities command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "get_services" })
@decorators.async_response
async def handle_get_services(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle get services command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "get_config" })
def handle_get_config(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle get config command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "manifest/list",vol.Optional("integrations"): [str] })
@decorators.async_response
async def handle_manifest_list(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle integrations command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "manifest/get",vol.Required("integration"): str })
@decorators.async_response
async def handle_manifest_get(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle integrations command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "integration/setup_info" })
def handle_integration_setup_info(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle integrations command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "ping" })
def handle_ping(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle ping command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "render_template",vol.Required("template"): str,vol.Optional("entity_ids"): cv.entity_ids,vol.Optional("variables"): dict,vol.Optional("timeout"): vol.Coerce(float),vol.Optional("strict", default=False): bool,vol.Optional("report_errors", default=False): bool })
@decorators.async_response
async def handle_render_template(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle render_template command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "entity/source" })
def handle_entity_source(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle entity source command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "subscribe_trigger",vol.Required("trigger"): cv.TRIGGER_SCHEMA,vol.Optional("variables"): dict })
@decorators.require_admin
@decorators.async_response
async def handle_subscribe_trigger(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle subscribe trigger command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "test_condition",vol.Required("condition"): cv.CONDITION_SCHEMA,vol.Optional("variables"): dict })
@decorators.require_admin
@decorators.async_response
async def handle_test_condition(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle test condition command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "execute_script",vol.Required("sequence"): cv.SCRIPT_SCHEMA,vol.Optional("variables"): dict })
@decorators.require_admin
@decorators.async_response
async def handle_execute_script(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle execute script command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "fire_event",vol.Required("event_type"): str,vol.Optional("event_data"): dict })
@decorators.require_admin
def handle_fire_event(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle fire event command."""
    ...

@decorators.websocket_command({ vol.Required("type"): "validate_config",vol.Optional("trigger"): cv.match_all,vol.Optional("condition"): cv.match_all,vol.Optional("action"): cv.match_all })
@decorators.async_response
async def handle_validate_config(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle validate config command."""
    ...

@callback
@decorators.websocket_command({ vol.Required("type"): "supported_features",vol.Required("features"): { str: int } })
def handle_supported_features(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle setting supported features."""
    ...

@decorators.require_admin
@decorators.websocket_command({ "type": "integration/descriptions" })
@decorators.async_response
async def handle_integration_descriptions(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Get metadata for all brands and integrations."""
    ...

