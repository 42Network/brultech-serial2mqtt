"""
This type stub file was generated by pyright.
"""

from typing import Any, Final
from homeassistant.core import Event

"""Message templates for websocket commands."""
_LOGGER: Final = ...
MINIMAL_MESSAGE_SCHEMA: Final = ...
BASE_COMMAND_MESSAGE_SCHEMA: Final = ...
STATE_DIFF_ADDITIONS = ...
STATE_DIFF_REMOVALS = ...
ENTITY_EVENT_ADD = ...
ENTITY_EVENT_REMOVE = ...
ENTITY_EVENT_CHANGE = ...
BASE_ERROR_MESSAGE = ...
INVALID_JSON_PARTIAL_MESSAGE = ...
def result_message(iden: int, result: Any = ...) -> dict[str, Any]:
    """Return a success result message."""
    ...

def construct_result_message(iden: int, payload: str) -> str:
    """Construct a success result message JSON."""
    ...

def error_message(iden: int | None, code: str, message: str, translation_key: str | None = ..., translation_domain: str | None = ..., translation_placeholders: dict[str, Any] | None = ...) -> dict[str, Any]:
    """Return an error result message."""
    ...

def event_message(iden: int, event: Any) -> dict[str, Any]:
    """Return an event message."""
    ...

def cached_event_message(iden: int, event: Event) -> str:
    """Return an event message.

    Serialize to json once per message.

    Since we can have many clients connected that are
    all getting many of the same events (mostly state changed)
    we can avoid serializing the same data for each connection.
    """
    ...

def cached_state_diff_message(iden: int, event: Event) -> str:
    """Return an event message.

    Serialize to json once per message.

    Since we can have many clients connected that are
    all getting many of the same events (mostly state changed)
    we can avoid serializing the same data for each connection.
    """
    ...

def message_to_json(message: dict[str, Any]) -> str:
    """Serialize a websocket message to json or return an error."""
    ...

