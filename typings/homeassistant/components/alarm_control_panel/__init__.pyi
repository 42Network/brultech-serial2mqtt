"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from typing import Any, Final, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_CODE, ATTR_CODE_FORMAT, SERVICE_ALARM_ARM_AWAY, SERVICE_ALARM_ARM_CUSTOM_BYPASS, SERVICE_ALARM_ARM_HOME, SERVICE_ALARM_ARM_NIGHT, SERVICE_ALARM_ARM_VACATION, SERVICE_ALARM_DISARM, SERVICE_ALARM_TRIGGER
from homeassistant.core import HomeAssistant
from homeassistant.helpers.config_validation import make_entity_service_schema
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from .const import ATTR_CHANGED_BY, ATTR_CODE_ARM_REQUIRED, AlarmControlPanelEntityFeature, CodeFormat, DOMAIN, FORMAT_NUMBER, FORMAT_TEXT, SUPPORT_ALARM_ARM_AWAY, SUPPORT_ALARM_ARM_CUSTOM_BYPASS, SUPPORT_ALARM_ARM_HOME, SUPPORT_ALARM_ARM_NIGHT, SUPPORT_ALARM_ARM_VACATION, SUPPORT_ALARM_TRIGGER

"""Component to interface with an alarm control panel."""
_LOGGER: Final = ...
SCAN_INTERVAL: Final = ...
ENTITY_ID_FORMAT: Final = ...
ALARM_SERVICE_SCHEMA: Final = ...
PLATFORM_SCHEMA: Final = ...
PLATFORM_SCHEMA_BASE: Final = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for sensors."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class AlarmControlPanelEntityDescription(EntityDescription):
    """A class that describes alarm control panel entities."""
    ...


class AlarmControlPanelEntity(Entity):
    """An abstract class for alarm control entities."""
    entity_description: AlarmControlPanelEntityDescription
    _attr_changed_by: str | None = ...
    _attr_code_arm_required: bool = ...
    _attr_code_format: CodeFormat | None = ...
    _attr_supported_features: AlarmControlPanelEntityFeature = ...
    @property
    def code_format(self) -> CodeFormat | None:
        """Code format or None if no code is required."""
        ...
    
    @property
    def changed_by(self) -> str | None:
        """Last change triggered by."""
        ...
    
    @property
    def code_arm_required(self) -> bool:
        """Whether the code is required for arm actions."""
        ...
    
    def alarm_disarm(self, code: str | None = ...) -> None:
        """Send disarm command."""
        ...
    
    async def async_alarm_disarm(self, code: str | None = ...) -> None:
        """Send disarm command."""
        ...
    
    def alarm_arm_home(self, code: str | None = ...) -> None:
        """Send arm home command."""
        ...
    
    async def async_alarm_arm_home(self, code: str | None = ...) -> None:
        """Send arm home command."""
        ...
    
    def alarm_arm_away(self, code: str | None = ...) -> None:
        """Send arm away command."""
        ...
    
    async def async_alarm_arm_away(self, code: str | None = ...) -> None:
        """Send arm away command."""
        ...
    
    def alarm_arm_night(self, code: str | None = ...) -> None:
        """Send arm night command."""
        ...
    
    async def async_alarm_arm_night(self, code: str | None = ...) -> None:
        """Send arm night command."""
        ...
    
    def alarm_arm_vacation(self, code: str | None = ...) -> None:
        """Send arm vacation command."""
        ...
    
    async def async_alarm_arm_vacation(self, code: str | None = ...) -> None:
        """Send arm vacation command."""
        ...
    
    def alarm_trigger(self, code: str | None = ...) -> None:
        """Send alarm trigger command."""
        ...
    
    async def async_alarm_trigger(self, code: str | None = ...) -> None:
        """Send alarm trigger command."""
        ...
    
    def alarm_arm_custom_bypass(self, code: str | None = ...) -> None:
        """Send arm custom bypass command."""
        ...
    
    async def async_alarm_arm_custom_bypass(self, code: str | None = ...) -> None:
        """Send arm custom bypass command."""
        ...
    
    @property
    def supported_features(self) -> AlarmControlPanelEntityFeature:
        """Return the list of supported features."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return the state attributes."""
        ...
    


