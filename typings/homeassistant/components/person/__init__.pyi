"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from __future__ import annotations
from http import HTTPStatus
from ipaddress import ip_address
from typing import Any
from aiohttp import web
from homeassistant.auth import EVENT_USER_REMOVED
from homeassistant.components import persistent_notification, websocket_api
from homeassistant.components.device_tracker import ATTR_SOURCE_TYPE, DOMAIN as DEVICE_TRACKER_DOMAIN, SourceType
from homeassistant.components.http.view import HomeAssistantView
from homeassistant.const import ATTR_EDITABLE, ATTR_ENTITY_ID, ATTR_GPS_ACCURACY, ATTR_ID, ATTR_LATITUDE, ATTR_LONGITUDE, ATTR_NAME, CONF_ID, CONF_NAME, CONF_TYPE, EVENT_HOMEASSISTANT_START, SERVICE_RELOAD, STATE_HOME, STATE_NOT_HOME, STATE_UNAVAILABLE, STATE_UNKNOWN
from homeassistant.core import Event, HomeAssistant, ServiceCall, State, callback, split_entity_id
from homeassistant.helpers import collection, config_validation as cv, entity_registry as er, service
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.event import async_track_state_change_event
from homeassistant.helpers.network import is_cloud_connection
from homeassistant.helpers.restore_state import RestoreEntity
from homeassistant.helpers.storage import Store
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.util.network import is_local

"""Support for tracking people."""
_LOGGER = ...
ATTR_SOURCE = ...
ATTR_USER_ID = ...
ATTR_DEVICE_TRACKERS = ...
CONF_DEVICE_TRACKERS = ...
CONF_USER_ID = ...
CONF_PICTURE = ...
DOMAIN = ...
STORAGE_KEY = ...
STORAGE_VERSION = ...
IGNORE_STATES = ...
PERSON_SCHEMA = ...
CONFIG_SCHEMA = ...
@bind_hass
async def async_create_person(hass, name, *, user_id=..., device_trackers=...): # -> None:
    """Create a new person."""
    ...

@bind_hass
async def async_add_user_device_tracker(hass: HomeAssistant, user_id: str, device_tracker_entity_id: str): # -> None:
    """Add a device tracker to a person linked to a user."""
    ...

@callback
def persons_with_entity(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all persons that reference the entity."""
    ...

@callback
def entities_in_person(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all entities belonging to a person."""
    ...

CREATE_FIELDS = ...
UPDATE_FIELDS = ...
class PersonStore(Store):
    """Person storage."""
    ...


class PersonStorageCollection(collection.DictStorageCollection):
    """Person collection stored in storage."""
    CREATE_SCHEMA = ...
    UPDATE_SCHEMA = ...
    def __init__(self, store: Store, id_manager: collection.IDManager, yaml_collection: collection.YamlCollection) -> None:
        """Initialize a person storage collection."""
        ...
    
    async def async_load(self) -> None:
        """Load the Storage collection."""
        ...
    


async def filter_yaml_data(hass: HomeAssistant, persons: list[dict]) -> list[dict]:
    """Validate YAML data that we can't validate via schema."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the person component."""
    ...

class Person(collection.CollectionEntity, RestoreEntity):
    """Represent a tracked person."""
    _entity_component_unrecorded_attributes = ...
    _attr_should_poll = ...
    editable: bool
    def __init__(self, config) -> None:
        """Set up person."""
        ...
    
    @classmethod
    def from_storage(cls, config: ConfigType): # -> Self@Person:
        """Return entity instance initialized from storage."""
        ...
    
    @classmethod
    def from_yaml(cls, config: ConfigType): # -> Self@Person:
        """Return entity instance initialized from yaml."""
        ...
    
    @property
    def name(self): # -> Any:
        """Return the name of the entity."""
        ...
    
    @property
    def entity_picture(self) -> str | None:
        """Return entity picture."""
        ...
    
    @property
    def state(self): # -> None:
        """Return the state of the person."""
        ...
    
    @property
    def extra_state_attributes(self): # -> dict[str, bool | Unknown | Any]:
        """Return the state attributes of the person."""
        ...
    
    @property
    def unique_id(self): # -> Any:
        """Return a unique ID for the person."""
        ...
    
    @property
    def device_trackers(self): # -> Any:
        """Return the device trackers for the person."""
        ...
    
    async def async_added_to_hass(self): # -> None:
        """Register device trackers."""
        ...
    
    async def async_update_config(self, config: ConfigType): # -> None:
        """Handle when the config is updated."""
        ...
    


@websocket_api.websocket_command({ vol.Required(CONF_TYPE): "person/list" })
def ws_list_person(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """List persons."""
    ...

class ListPersonsView(HomeAssistantView):
    """List all persons if request is made from a local network."""
    requires_auth = ...
    url = ...
    name = ...
    async def get(self, request: web.Request) -> web.Response:
        """Return a list of persons if request comes from a local IP."""
        ...
    


