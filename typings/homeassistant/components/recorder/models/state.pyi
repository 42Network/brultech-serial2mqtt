"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import Any
from sqlalchemy.engine.row import Row
from homeassistant.core import Context, State

"""Models states in for Recorder."""
_LOGGER = ...
def extract_metadata_ids(entity_id_to_metadata_id: dict[str, int | None]) -> list[int]:
    """Extract metadata ids from entity_id_to_metadata_id."""
    ...

class LazyState(State):
    """A lazy version of core State after schema 31."""
    __slots__ = ...
    def __init__(self, row: Row, attr_cache: dict[str, dict[str, Any]], start_time_ts: float | None, entity_id: str, state: str, last_updated_ts: float | None, no_attributes: bool) -> None:
        """Init the lazy state."""
        ...
    
    @property
    def attributes(self) -> dict[str, Any]:
        """State attributes."""
        ...
    
    @attributes.setter
    def attributes(self, value: dict[str, Any]) -> None:
        """Set attributes."""
        ...
    
    @property
    def context(self) -> Context:
        """State context."""
        ...
    
    @context.setter
    def context(self, value: Context) -> None:
        """Set context."""
        ...
    
    @property
    def last_changed(self) -> datetime:
        """Last changed datetime."""
        ...
    
    @last_changed.setter
    def last_changed(self, value: datetime) -> None:
        """Set last changed datetime."""
        ...
    
    @property
    def last_updated(self) -> datetime:
        """Last updated datetime."""
        ...
    
    @last_updated.setter
    def last_updated(self, value: datetime) -> None:
        """Set last updated datetime."""
        ...
    
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the LazyState.

        Async friendly.

        To be used for JSON serialization.
        """
        ...
    


def row_to_compressed_state(row: Row, attr_cache: dict[str, dict[str, Any]], start_time_ts: float | None, entity_id: str, state: str, last_updated_ts: float | None, no_attributes: bool) -> dict[str, Any]:
    """Convert a database row to a compressed state schema 41 and later."""
    ...

