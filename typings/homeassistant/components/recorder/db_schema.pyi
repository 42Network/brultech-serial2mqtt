"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from datetime import datetime, timedelta
from typing import Any, Self
from sqlalchemy import CHAR, ColumnElement, DateTime, JSON, LargeBinary
from sqlalchemy.dialects import sqlite
from sqlalchemy.engine.interfaces import Dialect
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.orm import DeclarativeBase, Mapped
from sqlalchemy.types import TypeDecorator
from homeassistant.core import Event, State
from homeassistant.helpers.entity import EntityInfo
from .const import SupportedDialect
from .models import StatisticData, StatisticDataTimestamp, StatisticMetaData

"""Models for SQLAlchemy."""
class Base(DeclarativeBase):
    """Base class for tables."""
    ...


SCHEMA_VERSION = ...
_LOGGER = ...
TABLE_EVENTS = ...
TABLE_EVENT_DATA = ...
TABLE_EVENT_TYPES = ...
TABLE_STATES = ...
TABLE_STATE_ATTRIBUTES = ...
TABLE_STATES_META = ...
TABLE_RECORDER_RUNS = ...
TABLE_SCHEMA_CHANGES = ...
TABLE_STATISTICS = ...
TABLE_STATISTICS_META = ...
TABLE_STATISTICS_RUNS = ...
TABLE_STATISTICS_SHORT_TERM = ...
STATISTICS_TABLES = ...
MAX_STATE_ATTRS_BYTES = ...
MAX_EVENT_DATA_BYTES = ...
PSQL_DIALECT = ...
ALL_TABLES = ...
TABLES_TO_CHECK = ...
LAST_UPDATED_INDEX_TS = ...
METADATA_ID_LAST_UPDATED_INDEX_TS = ...
EVENTS_CONTEXT_ID_BIN_INDEX = ...
STATES_CONTEXT_ID_BIN_INDEX = ...
LEGACY_STATES_EVENT_ID_INDEX = ...
LEGACY_STATES_ENTITY_ID_LAST_UPDATED_INDEX = ...
CONTEXT_ID_BIN_MAX_LENGTH = ...
MYSQL_COLLATE = ...
MYSQL_DEFAULT_CHARSET = ...
MYSQL_ENGINE = ...
_DEFAULT_TABLE_ARGS = ...
class UnusedDateTime(DateTime):
    """An unused column type that behaves like a datetime."""
    ...


class Unused(CHAR):
    """An unused column type that behaves like a string."""
    ...


@compiles(UnusedDateTime, "mysql", "mariadb", "sqlite")
@compiles(Unused, "mysql", "mariadb", "sqlite")
def compile_char_zero(type_: TypeDecorator, compiler: Any, **kw: Any) -> str:
    """Compile UnusedDateTime and Unused as CHAR(0) on mysql, mariadb, and sqlite."""
    ...

@compiles(Unused, "postgresql")
def compile_char_one(type_: TypeDecorator, compiler: Any, **kw: Any) -> str:
    """Compile Unused as CHAR(1) on postgresql."""
    ...

class FAST_PYSQLITE_DATETIME(sqlite.DATETIME):
    """Use ciso8601 to parse datetimes instead of sqlalchemy built-in regex."""
    def result_processor(self, dialect, coltype): # -> (value: Unknown) -> (datetime | None):
        """Offload the datetime parsing to ciso8601."""
        ...
    


class NativeLargeBinary(LargeBinary):
    """A faster version of LargeBinary for engines that support python bytes natively."""
    def result_processor(self, dialect, coltype): # -> None:
        """No conversion needed for engines that support native bytes."""
        ...
    


UINT_32_TYPE = ...
JSON_VARIANT_CAST = ...
JSONB_VARIANT_CAST = ...
DATETIME_TYPE = ...
DOUBLE_TYPE = ...
UNUSED_LEGACY_COLUMN = ...
UNUSED_LEGACY_DATETIME_COLUMN = ...
UNUSED_LEGACY_INTEGER_COLUMN = ...
DOUBLE_PRECISION_TYPE_SQL = ...
CONTEXT_BINARY_TYPE = ...
TIMESTAMP_TYPE = ...
class JSONLiteral(JSON):
    """Teach SA how to literalize json."""
    def literal_processor(self, dialect: Dialect) -> Callable[[Any], str]:
        """Processor to convert a value to JSON."""
        ...
    


EVENT_ORIGIN_ORDER = ...
EVENT_ORIGIN_TO_IDX = ...
class Events(Base):
    """Event history data."""
    __table_args__ = ...
    __tablename__ = ...
    event_id: Mapped[int] = ...
    event_type: Mapped[str | None] = ...
    event_data: Mapped[str | None] = ...
    origin: Mapped[str | None] = ...
    origin_idx: Mapped[int | None] = ...
    time_fired: Mapped[datetime | None] = ...
    time_fired_ts: Mapped[float | None] = ...
    context_id: Mapped[str | None] = ...
    context_user_id: Mapped[str | None] = ...
    context_parent_id: Mapped[str | None] = ...
    data_id: Mapped[int | None] = ...
    context_id_bin: Mapped[bytes | None] = ...
    context_user_id_bin: Mapped[bytes | None] = ...
    context_parent_id_bin: Mapped[bytes | None] = ...
    event_type_id: Mapped[int | None] = ...
    event_data_rel: Mapped[EventData | None] = ...
    event_type_rel: Mapped[EventTypes | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    
    @staticmethod
    def from_event(event: Event) -> Events:
        """Create an event database object from a native event."""
        ...
    
    def to_native(self, validate_entity_id: bool = ...) -> Event | None:
        """Convert to a native HA Event."""
        ...
    


class EventData(Base):
    """Event data history."""
    __table_args__ = ...
    __tablename__ = ...
    data_id: Mapped[int] = ...
    hash: Mapped[int | None] = ...
    shared_data: Mapped[str | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    
    @staticmethod
    def shared_data_bytes_from_event(event: Event, dialect: SupportedDialect | None) -> bytes:
        """Create shared_data from an event."""
        ...
    
    @staticmethod
    def hash_shared_data_bytes(shared_data_bytes: bytes) -> int:
        """Return the hash of json encoded shared data."""
        ...
    
    def to_native(self) -> dict[str, Any]:
        """Convert to an event data dictionary."""
        ...
    


class EventTypes(Base):
    """Event type history."""
    __table_args__ = ...
    __tablename__ = ...
    event_type_id: Mapped[int] = ...
    event_type: Mapped[str | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    


class States(Base):
    """State change history."""
    __table_args__ = ...
    __tablename__ = ...
    state_id: Mapped[int] = ...
    entity_id: Mapped[str | None] = ...
    state: Mapped[str | None] = ...
    attributes: Mapped[str | None] = ...
    event_id: Mapped[int | None] = ...
    last_changed: Mapped[datetime | None] = ...
    last_changed_ts: Mapped[float | None] = ...
    last_updated: Mapped[datetime | None] = ...
    last_updated_ts: Mapped[float | None] = ...
    old_state_id: Mapped[int | None] = ...
    attributes_id: Mapped[int | None] = ...
    context_id: Mapped[str | None] = ...
    context_user_id: Mapped[str | None] = ...
    context_parent_id: Mapped[str | None] = ...
    origin_idx: Mapped[int | None] = ...
    old_state: Mapped[States | None] = ...
    state_attributes: Mapped[StateAttributes | None] = ...
    context_id_bin: Mapped[bytes | None] = ...
    context_user_id_bin: Mapped[bytes | None] = ...
    context_parent_id_bin: Mapped[bytes | None] = ...
    metadata_id: Mapped[int | None] = ...
    states_meta_rel: Mapped[StatesMeta | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    
    @staticmethod
    def from_event(event: Event) -> States:
        """Create object from a state_changed event."""
        ...
    
    def to_native(self, validate_entity_id: bool = ...) -> State | None:
        """Convert to an HA state object."""
        ...
    


class StateAttributes(Base):
    """State attribute change history."""
    __table_args__ = ...
    __tablename__ = ...
    attributes_id: Mapped[int] = ...
    hash: Mapped[int | None] = ...
    shared_attrs: Mapped[str | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    
    @staticmethod
    def shared_attrs_bytes_from_event(event: Event, entity_sources: dict[str, EntityInfo], dialect: SupportedDialect | None) -> bytes:
        """Create shared_attrs from a state_changed event."""
        ...
    
    @staticmethod
    def hash_shared_attrs_bytes(shared_attrs_bytes: bytes) -> int:
        """Return the hash of json encoded shared attributes."""
        ...
    
    def to_native(self) -> dict[str, Any]:
        """Convert to a state attributes dictionary."""
        ...
    


class StatesMeta(Base):
    """Metadata for states."""
    __table_args__ = ...
    __tablename__ = ...
    metadata_id: Mapped[int] = ...
    entity_id: Mapped[str | None] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    


class StatisticsBase:
    """Statistics base class."""
    id: Mapped[int] = ...
    created: Mapped[datetime | None] = ...
    created_ts: Mapped[float | None] = ...
    metadata_id: Mapped[int | None] = ...
    start: Mapped[datetime | None] = ...
    start_ts: Mapped[float | None] = ...
    mean: Mapped[float | None] = ...
    min: Mapped[float | None] = ...
    max: Mapped[float | None] = ...
    last_reset: Mapped[datetime | None] = ...
    last_reset_ts: Mapped[float | None] = ...
    state: Mapped[float | None] = ...
    sum: Mapped[float | None] = ...
    duration: timedelta
    @classmethod
    def from_stats(cls, metadata_id: int, stats: StatisticData) -> Self:
        """Create object from a statistics with datatime objects."""
        ...
    
    @classmethod
    def from_stats_ts(cls, metadata_id: int, stats: StatisticDataTimestamp) -> Self:
        """Create object from a statistics with timestamps."""
        ...
    


class Statistics(Base, StatisticsBase):
    """Long term statistics."""
    duration = ...
    __table_args__ = ...
    __tablename__ = ...


class StatisticsShortTerm(Base, StatisticsBase):
    """Short term statistics."""
    duration = ...
    __table_args__ = ...
    __tablename__ = ...


class StatisticsMeta(Base):
    """Statistics meta data."""
    __table_args__ = ...
    __tablename__ = ...
    id: Mapped[int] = ...
    statistic_id: Mapped[str | None] = ...
    source: Mapped[str | None] = ...
    unit_of_measurement: Mapped[str | None] = ...
    has_mean: Mapped[bool | None] = ...
    has_sum: Mapped[bool | None] = ...
    name: Mapped[str | None] = ...
    @staticmethod
    def from_meta(meta: StatisticMetaData) -> StatisticsMeta:
        """Create object from meta data."""
        ...
    


class RecorderRuns(Base):
    """Representation of recorder run."""
    __table_args__ = ...
    __tablename__ = ...
    run_id: Mapped[int] = ...
    start: Mapped[datetime] = ...
    end: Mapped[datetime | None] = ...
    closed_incorrect: Mapped[bool] = ...
    created: Mapped[datetime] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    
    def to_native(self, validate_entity_id: bool = ...) -> Self:
        """Return self, native format is this model."""
        ...
    


class SchemaChanges(Base):
    """Representation of schema version changes."""
    __tablename__ = ...
    change_id: Mapped[int] = ...
    schema_version: Mapped[int | None] = ...
    changed: Mapped[datetime] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    


class StatisticsRuns(Base):
    """Representation of statistics run."""
    __tablename__ = ...
    run_id: Mapped[int] = ...
    start: Mapped[datetime] = ...
    def __repr__(self) -> str:
        """Return string representation of instance for debugging."""
        ...
    


EVENT_DATA_JSON = ...
OLD_FORMAT_EVENT_DATA_JSON = ...
SHARED_ATTRS_JSON = ...
OLD_FORMAT_ATTRS_JSON = ...
ENTITY_ID_IN_EVENT: ColumnElement = ...
OLD_ENTITY_ID_IN_EVENT: ColumnElement = ...
DEVICE_ID_IN_EVENT: ColumnElement = ...
OLD_STATE = ...
SHARED_ATTR_OR_LEGACY_ATTRIBUTES = ...
SHARED_DATA_OR_LEGACY_EVENT_DATA = ...
