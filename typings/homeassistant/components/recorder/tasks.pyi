"""
This type stub file was generated by pyright.
"""

import abc
import asyncio
import threading
from collections.abc import Callable, Iterable
from dataclasses import dataclass
from datetime import datetime
from typing import Any, TYPE_CHECKING
from homeassistant.core import Event
from homeassistant.helpers.typing import UndefinedType
from . import statistics
from .db_schema import Statistics, StatisticsShortTerm
from .models import StatisticData, StatisticMetaData
from .core import Recorder

"""Support for recording details."""
_LOGGER = ...
if TYPE_CHECKING:
    ...
@dataclass(slots=True)
class RecorderTask:
    """ABC for recorder tasks."""
    commit_before = ...
    @abc.abstractmethod
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class ChangeStatisticsUnitTask(RecorderTask):
    """Object to store statistics_id and unit to convert unit of statistics."""
    statistic_id: str
    new_unit_of_measurement: str
    old_unit_of_measurement: str
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class ClearStatisticsTask(RecorderTask):
    """Object to store statistics_ids which for which to remove statistics."""
    statistic_ids: list[str]
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class UpdateStatisticsMetadataTask(RecorderTask):
    """Object to store statistics_id and unit for update of statistics metadata."""
    statistic_id: str
    new_statistic_id: str | None | UndefinedType
    new_unit_of_measurement: str | None | UndefinedType
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class UpdateStatesMetadataTask(RecorderTask):
    """Task to update states metadata."""
    entity_id: str
    new_entity_id: str
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class PurgeTask(RecorderTask):
    """Object to store information about purge task."""
    purge_before: datetime
    repack: bool
    apply_filter: bool
    def run(self, instance: Recorder) -> None:
        """Purge the database."""
        ...
    


@dataclass(slots=True)
class PurgeEntitiesTask(RecorderTask):
    """Object to store entity information about purge task."""
    entity_filter: Callable[[str], bool]
    purge_before: datetime
    def run(self, instance: Recorder) -> None:
        """Purge entities from the database."""
        ...
    


@dataclass(slots=True)
class PerodicCleanupTask(RecorderTask):
    """An object to insert into the recorder to trigger cleanup tasks.

    Trigger cleanup tasks when auto purge is disabled.
    """
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class StatisticsTask(RecorderTask):
    """An object to insert into the recorder queue to run a statistics task."""
    start: datetime
    fire_events: bool
    def run(self, instance: Recorder) -> None:
        """Run statistics task."""
        ...
    


@dataclass(slots=True)
class CompileMissingStatisticsTask(RecorderTask):
    """An object to insert into the recorder queue to run a compile missing statistics."""
    def run(self, instance: Recorder) -> None:
        """Run statistics task to compile missing statistics."""
        ...
    


@dataclass(slots=True)
class ImportStatisticsTask(RecorderTask):
    """An object to insert into the recorder queue to run an import statistics task."""
    metadata: StatisticMetaData
    statistics: Iterable[StatisticData]
    table: type[Statistics | StatisticsShortTerm]
    def run(self, instance: Recorder) -> None:
        """Run statistics task."""
        ...
    


@dataclass(slots=True)
class AdjustStatisticsTask(RecorderTask):
    """An object to insert into the recorder queue to run an adjust statistics task."""
    statistic_id: str
    start_time: datetime
    sum_adjustment: float
    adjustment_unit: str
    def run(self, instance: Recorder) -> None:
        """Run statistics task."""
        ...
    


@dataclass(slots=True)
class WaitTask(RecorderTask):
    """An object to insert into the recorder queue.

    Tell it set the _queue_watch event.
    """
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class DatabaseLockTask(RecorderTask):
    """An object to insert into the recorder queue to prevent writes to the database."""
    database_locked: asyncio.Event
    database_unlock: threading.Event
    queue_overflow: bool
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class StopTask(RecorderTask):
    """An object to insert into the recorder queue to stop the event handler."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class EventTask(RecorderTask):
    """An event to be processed."""
    event: Event
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class KeepAliveTask(RecorderTask):
    """A keep alive to be sent."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class CommitTask(RecorderTask):
    """Commit the event session."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class AddRecorderPlatformTask(RecorderTask):
    """Add a recorder platform."""
    domain: str
    platform: Any
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class SynchronizeTask(RecorderTask):
    """Ensure all pending data has been committed."""
    event: asyncio.Event
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class PostSchemaMigrationTask(RecorderTask):
    """Post migration task to update schema."""
    old_version: int
    new_version: int
    def run(self, instance: Recorder) -> None:
        """Handle the task."""
        ...
    


@dataclass(slots=True)
class StatisticsTimestampMigrationCleanupTask(RecorderTask):
    """An object to insert into the recorder queue to run a statistics migration cleanup task."""
    def run(self, instance: Recorder) -> None:
        """Run statistics timestamp cleanup task."""
        ...
    


@dataclass(slots=True)
class AdjustLRUSizeTask(RecorderTask):
    """An object to insert into the recorder queue to adjust the LRU size."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Handle the task to adjust the size."""
        ...
    


@dataclass(slots=True)
class StatesContextIDMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to migrate states context ids."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Run context id migration task."""
        ...
    


@dataclass(slots=True)
class EventsContextIDMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to migrate events context ids."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Run context id migration task."""
        ...
    


@dataclass(slots=True)
class EventTypeIDMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to migrate event type ids."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Run event type id migration task."""
        ...
    


@dataclass(slots=True)
class EntityIDMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to migrate entity_ids to StatesMeta."""
    commit_before = ...
    def run(self, instance: Recorder) -> None:
        """Run entity_id migration task."""
        ...
    


@dataclass(slots=True)
class EntityIDPostMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to cleanup after entity_ids migration."""
    def run(self, instance: Recorder) -> None:
        """Run entity_id post migration task."""
        ...
    


@dataclass(slots=True)
class EventIdMigrationTask(RecorderTask):
    """An object to insert into the recorder queue to cleanup legacy event_ids in the states table.

    This task should only be queued if the ix_states_event_id index exists
    since it is used to scan the states table and it will be removed after this
    task is run if its no longer needed.
    """
    def run(self, instance: Recorder) -> None:
        """Clean up the legacy event_id index on states."""
        ...
    


@dataclass(slots=True)
class RefreshEventTypesTask(RecorderTask):
    """An object to insert into the recorder queue to refresh event types."""
    event_types: list[str]
    def run(self, instance: Recorder) -> None:
        """Refresh event types."""
        ...
    


