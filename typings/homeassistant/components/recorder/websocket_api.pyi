"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from typing import Any
from homeassistant.components import websocket_api
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import config_validation as cv
from .util import PERIOD_SCHEMA

"""The Recorder websocket API."""
_LOGGER: logging.Logger = ...
UNIT_SCHEMA = ...
@callback
def async_setup(hass: HomeAssistant) -> None:
    """Set up the recorder websocket API."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/statistic_during_period",vol.Required("statistic_id"): str,vol.Optional("types"): vol.All([vol.Any("max", "mean", "min", "change")], vol.Coerce(set)),vol.Optional("units"): UNIT_SCHEMA,**PERIOD_SCHEMA.schema })
@websocket_api.async_response
async def ws_get_statistic_during_period(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle statistics websocket command."""
    ...

async def ws_handle_get_statistics_during_period(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict) -> None:
    """Handle statistics websocket command."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/statistics_during_period",vol.Required("start_time"): str,vol.Optional("end_time"): str,vol.Required("statistic_ids"): vol.All([str], vol.Length(min=1)),vol.Required("period"): vol.Any("5minute", "hour", "day", "week", "month"),vol.Optional("units"): UNIT_SCHEMA,vol.Optional("types"): vol.All([vol.Any("change", "last_reset", "max", "mean", "min", "state", "sum")], vol.Coerce(set)) })
@websocket_api.async_response
async def ws_get_statistics_during_period(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle statistics websocket command."""
    ...

async def ws_handle_list_statistic_ids(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict) -> None:
    """Fetch a list of available statistic_id."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/list_statistic_ids",vol.Optional("statistic_type"): vol.Any("sum", "mean") })
@websocket_api.async_response
async def ws_list_statistic_ids(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Fetch a list of available statistic_id."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/validate_statistics" })
@websocket_api.async_response
async def ws_validate_statistics(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Fetch a list of available statistic_id."""
    ...

@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "recorder/clear_statistics",vol.Required("statistic_ids"): [str] })
@callback
def ws_clear_statistics(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Clear statistics for a list of statistic_ids.

    Note: The WS call posts a job to the recorder's queue and then returns, it doesn't
    wait until the job is completed.
    """
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/get_statistics_metadata",vol.Optional("statistic_ids"): [str] })
@websocket_api.async_response
async def ws_get_statistics_metadata(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Get metadata for a list of statistic_ids."""
    ...

@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "recorder/update_statistics_metadata",vol.Required("statistic_id"): str,vol.Required("unit_of_measurement"): vol.Any(str, None) })
@callback
def ws_update_statistics_metadata(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Update statistics metadata for a statistic_id.

    Only the normalized unit of measurement can be updated.
    """
    ...

@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "recorder/change_statistics_unit",vol.Required("statistic_id"): str,vol.Required("new_unit_of_measurement"): vol.Any(str, None),vol.Required("old_unit_of_measurement"): vol.Any(str, None) })
@callback
def ws_change_statistics_unit(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Change the unit_of_measurement for a statistic_id.

    All existing statistics will be converted to the new unit.
    """
    ...

@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "recorder/adjust_sum_statistics",vol.Required("statistic_id"): str,vol.Required("start_time"): str,vol.Required("adjustment"): vol.Any(float, int),vol.Required("adjustment_unit_of_measurement"): vol.Any(str, None) })
@websocket_api.async_response
async def ws_adjust_sum_statistics(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Adjust sum statistics.

    If the statistics is stored as NORMALIZED_UNIT,
    it's allowed to make an adjustment in VALID_UNIT
    """
    ...

@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "recorder/import_statistics",vol.Required("metadata"): { vol.Required("has_mean"): bool,vol.Required("has_sum"): bool,vol.Required("name"): vol.Any(str, None),vol.Required("source"): str,vol.Required("statistic_id"): str,vol.Required("unit_of_measurement"): vol.Any(str, None) },vol.Required("stats"): [{ vol.Required("start"): cv.datetime,vol.Optional("mean"): vol.Any(float, int),vol.Optional("min"): vol.Any(float, int),vol.Optional("max"): vol.Any(float, int),vol.Optional("last_reset"): vol.Any(cv.datetime, None),vol.Optional("state"): vol.Any(float, int),vol.Optional("sum"): vol.Any(float, int) }] })
@callback
def ws_import_statistics(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Import statistics."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "recorder/info" })
@callback
def ws_info(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Return status of the recorder."""
    ...

@websocket_api.ws_require_user(only_supervisor=True)
@websocket_api.websocket_command({ vol.Required("type"): "backup/start" })
@websocket_api.async_response
async def ws_backup_start(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Backup start notification."""
    ...

@websocket_api.ws_require_user(only_supervisor=True)
@websocket_api.websocket_command({ vol.Required("type"): "backup/end" })
@websocket_api.async_response
async def ws_backup_end(hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]) -> None:
    """Backup end notification."""
    ...

