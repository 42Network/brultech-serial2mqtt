"""
This type stub file was generated by pyright.
"""

import threading
from typing import Any
from sqlalchemy.pool import NullPool, SingletonThreadPool, StaticPool

"""A pool for sqlite connections."""
_LOGGER = ...
DEBUG_MUTEX_POOL = ...
DEBUG_MUTEX_POOL_TRACE = ...
POOL_SIZE = ...
ADVISE_MSG = ...
class RecorderPool(SingletonThreadPool, NullPool):
    """A hybrid of NullPool and SingletonThreadPool.

    When called from the creating thread or db executor acts like SingletonThreadPool
    When called from any other thread, acts like NullPool
    """
    def __init__(self, *args: Any, **kw: Any) -> None:
        """Create the pool."""
        ...
    
    @property
    def recorder_or_dbworker(self) -> bool:
        """Check if the thread is a recorder or dbworker thread."""
        ...
    
    def shutdown(self) -> None:
        """Close the connection."""
        ...
    
    def dispose(self) -> None:
        """Dispose of the connection."""
        ...
    


class MutexPool(StaticPool):
    """A pool which prevents concurrent accesses from multiple threads.

    This is used in tests to prevent unsafe concurrent accesses to in-memory SQLite
    databases.
    """
    _reference_counter = ...
    pool_lock: threading.RLock


