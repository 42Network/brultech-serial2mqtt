"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING
from sqlalchemy.orm.session import Session
from homeassistant.core import Event
from ..db_schema import StateAttributes
from . import BaseLRUTableManager
from ..core import Recorder

"""Support managing StateAttributes."""
if TYPE_CHECKING:
    ...
CACHE_SIZE = ...
_LOGGER = ...
class StateAttributesManager(BaseLRUTableManager[StateAttributes]):
    """Manage the StateAttributes table."""
    def __init__(self, recorder: Recorder) -> None:
        """Initialize the event type manager."""
        ...
    
    def serialize_from_event(self, event: Event) -> bytes | None:
        """Serialize event data."""
        ...
    
    def load(self, events: list[Event], session: Session) -> None:
        """Load the shared_attrs to attributes_ids mapping into memory from events.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get(self, shared_attr: str, data_hash: int, session: Session) -> int | None:
        """Resolve shared_attrs to the attributes_id.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get_many(self, shared_attrs_data_hashes: Iterable[tuple[str, int]], session: Session) -> dict[str, int | None]:
        """Resolve shared_attrs to attributes_ids.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def add_pending(self, db_state_attributes: StateAttributes) -> None:
        """Add a pending StateAttributes that will be committed at the next interval.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def post_commit_pending(self) -> None:
        """Call after commit to load the attributes_ids of the new StateAttributes into the LRU.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def evict_purged(self, attributes_ids: set[int]) -> None:
        """Evict purged attributes_ids from the cache when they are no longer used.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


