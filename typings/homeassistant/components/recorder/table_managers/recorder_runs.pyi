"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from datetime import datetime
from sqlalchemy.orm.session import Session
from ..db_schema import RecorderRuns

"""Track recorder run history."""
@dataclass(frozen=True)
class _RecorderRunsHistory:
    """Bisectable history of RecorderRuns."""
    run_timestamps: list[int]
    runs_by_timestamp: dict[int, RecorderRuns]
    ...


class RecorderRunsManager:
    """Track recorder run history."""
    def __init__(self) -> None:
        """Track recorder run history."""
        ...
    
    @property
    def recording_start(self) -> datetime:
        """Return the time the recorder started recording states."""
        ...
    
    @property
    def first(self) -> RecorderRuns:
        """Get the first run."""
        ...
    
    @property
    def current(self) -> RecorderRuns:
        """Get the current run."""
        ...
    
    @property
    def active(self) -> bool:
        """Return if a run is active."""
        ...
    
    def get(self, start: datetime) -> RecorderRuns | None:
        """Return the recorder run that started before or at start.

        If the first run started after the start, return None
        """
        ...
    
    def start(self, session: Session) -> None:
        """Start a new run.

        Must run in the recorder thread.
        """
        ...
    
    def reset(self) -> None:
        """Reset the run when the database is changed or fails.

        Must run in the recorder thread.
        """
        ...
    
    def end(self, session: Session) -> None:
        """End the current run.

        Must run in the recorder thread.
        """
        ...
    
    def load_from_db(self, session: Session) -> None:
        """Update the run cache.

        Must run in the recorder thread.
        """
        ...
    
    def clear(self) -> None:
        """Clear the current run after ending it.

        Must run in the recorder thread.
        """
        ...
    


