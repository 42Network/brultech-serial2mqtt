"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING
from sqlalchemy.orm.session import Session
from homeassistant.core import Event
from ..db_schema import EventTypes
from . import BaseLRUTableManager
from ..core import Recorder

"""Support managing EventTypes."""
if TYPE_CHECKING:
    ...
CACHE_SIZE = ...
class EventTypeManager(BaseLRUTableManager[EventTypes]):
    """Manage the EventTypes table."""
    def __init__(self, recorder: Recorder) -> None:
        """Initialize the event type manager."""
        ...
    
    def load(self, events: list[Event], session: Session) -> None:
        """Load the event_type to event_type_ids mapping into memory.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get(self, event_type: str, session: Session, from_recorder: bool = ...) -> int | None:
        """Resolve event_type to the event_type_id.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get_many(self, event_types: Iterable[str], session: Session, from_recorder: bool = ...) -> dict[str, int | None]:
        """Resolve event_types to event_type_ids.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def add_pending(self, db_event_type: EventTypes) -> None:
        """Add a pending EventTypes that will be committed at the next interval.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def post_commit_pending(self) -> None:
        """Call after commit to load the event_type_ids of the new EventTypes into the LRU.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def clear_non_existent(self, event_type: str) -> None:
        """Clear a non-existent event type from the cache.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def evict_purged(self, event_types: Iterable[str]) -> None:
        """Evict purged event_types from the cache when they are no longer used.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


