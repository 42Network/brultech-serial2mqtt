"""
This type stub file was generated by pyright.
"""

from typing import Literal, TYPE_CHECKING
from sqlalchemy.orm.session import Session
from ..models import StatisticMetaData
from ..core import Recorder

"""Support managing StatesMeta."""
if TYPE_CHECKING:
    ...
CACHE_SIZE = ...
_LOGGER = ...
QUERY_STATISTIC_META = ...
class StatisticsMetaManager:
    """Manage the StatisticsMeta table."""
    def __init__(self, recorder: Recorder) -> None:
        """Initialize the statistics meta manager."""
        ...
    
    def load(self, session: Session) -> None:
        """Load the statistic_id to metadata_id mapping into memory.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get(self, session: Session, statistic_id: str) -> tuple[int, StatisticMetaData] | None:
        """Resolve statistic_id to the metadata_id."""
        ...
    
    def get_many(self, session: Session, statistic_ids: set[str] | None = ..., statistic_type: Literal["mean"] | Literal["sum"] | None = ..., statistic_source: str | None = ...) -> dict[str, tuple[int, StatisticMetaData]]:
        """Fetch meta data.

        Returns a dict of (metadata_id, StatisticMetaData) tuples indexed by statistic_id.

        If statistic_ids is given, fetch metadata only for the listed statistics_ids.
        If statistic_type is given, fetch metadata only for statistic_ids supporting it.
        """
        ...
    
    def get_from_cache_threadsafe(self, statistic_ids: set[str]) -> dict[str, tuple[int, StatisticMetaData]]:
        """Get metadata from cache.

        This call is thread safe and can be run in the event loop,
        the database executor, or the recorder thread.
        """
        ...
    
    def update_or_add(self, session: Session, new_metadata: StatisticMetaData, old_metadata_dict: dict[str, tuple[int, StatisticMetaData]]) -> tuple[str | None, int]:
        """Get metadata_id for a statistic_id.

        If the statistic_id is previously unknown, add it. If it's already known, update
        metadata if needed.

        Updating metadata source is not possible.

        Returns a tuple of (statistic_id | None, metadata_id).

        statistic_id is None if the metadata was not updated

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def update_unit_of_measurement(self, session: Session, statistic_id: str, new_unit: str | None) -> None:
        """Update the unit of measurement for a statistic_id.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def update_statistic_id(self, session: Session, source: str, old_statistic_id: str, new_statistic_id: str) -> None:
        """Update the statistic_id for a statistic_id.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def delete(self, session: Session, statistic_ids: list[str]) -> None:
        """Clear statistics for a list of statistic_ids.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def reset(self) -> None:
        """Reset the cache."""
        ...
    
    def adjust_lru_size(self, new_size: int) -> None:
        """Adjust the LRU cache size.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


