"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING
from sqlalchemy.orm.session import Session
from homeassistant.core import Event
from ..db_schema import EventData
from . import BaseLRUTableManager
from ..core import Recorder

"""Support managing EventData."""
if TYPE_CHECKING:
    ...
CACHE_SIZE = ...
_LOGGER = ...
class EventDataManager(BaseLRUTableManager[EventData]):
    """Manage the EventData table."""
    def __init__(self, recorder: Recorder) -> None:
        """Initialize the event type manager."""
        ...
    
    def serialize_from_event(self, event: Event) -> bytes | None:
        """Serialize event data."""
        ...
    
    def load(self, events: list[Event], session: Session) -> None:
        """Load the shared_datas to data_ids mapping into memory from events.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get(self, shared_data: str, data_hash: int, session: Session) -> int | None:
        """Resolve shared_datas to the data_id.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get_many(self, shared_data_data_hashs: Iterable[tuple[str, int]], session: Session) -> dict[str, int | None]:
        """Resolve shared_datas to data_ids.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def add_pending(self, db_event_data: EventData) -> None:
        """Add a pending EventData that will be committed at the next interval.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def post_commit_pending(self) -> None:
        """Call after commit to load the data_ids of the new EventData into the LRU.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def evict_purged(self, data_ids: set[int]) -> None:
        """Evict purged data_ids from the cache when they are no longer used.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


