"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableMapping
from typing import Generic, TYPE_CHECKING, TypeVar
from lru import LRU
from ..core import Recorder

"""Managers for each table."""
if TYPE_CHECKING:
    ...
_DataT = TypeVar("_DataT")
class BaseTableManager(Generic[_DataT]):
    """Base class for table managers."""
    def __init__(self, recorder: Recorder) -> None:
        """Initialize the table manager.

        The table manager is responsible for managing the id mappings
        for a table. When data is committed to the database, the
        manager will move the data from the pending to the id map.
        """
        ...
    
    def get_from_cache(self, data: str) -> int | None:
        """Resolve data to the id without accessing the underlying database.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def get_pending(self, shared_data: str) -> _DataT | None:
        """Get pending data that have not be assigned ids yet.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    
    def reset(self) -> None:
        """Reset after the database has been reset or changed.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


class BaseLRUTableManager(BaseTableManager[_DataT]):
    """Base class for LRU table managers."""
    def __init__(self, recorder: Recorder, lru_size: int) -> None:
        """Initialize the LRU table manager.

        We keep track of the most recently used items
        and evict the least recently used items when the cache is full.
        """
        ...
    
    def adjust_lru_size(self, new_size: int) -> None:
        """Adjust the LRU cache size.

        This call is not thread-safe and must be called from the
        recorder thread.
        """
        ...
    


