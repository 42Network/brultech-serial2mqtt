"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from typing import Any, TypedDict, cast, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON
from homeassistant.core import HomeAssistant, ServiceCall
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import ToggleEntity, ToggleEntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from .const import ATTR_AVAILABLE_TONES, ATTR_DURATION, ATTR_TONE, ATTR_VOLUME_LEVEL, DOMAIN, SUPPORT_DURATION, SUPPORT_TONES, SUPPORT_TURN_OFF, SUPPORT_TURN_ON, SUPPORT_VOLUME_SET, SirenEntityFeature

"""Component to interface with various sirens/chimes."""
_LOGGER = ...
SCAN_INTERVAL = ...
TURN_ON_SCHEMA = ...
class SirenTurnOnServiceParameters(TypedDict, total=False):
    """Represent possible parameters to siren.turn_on service data dict type."""
    tone: int | str
    duration: int
    volume_level: float
    ...


def process_turn_on_params(siren: SirenEntity, params: SirenTurnOnServiceParameters) -> SirenTurnOnServiceParameters:
    """Process turn_on service params.

    Filters out unsupported params and validates the rest.
    """
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up siren devices."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class SirenEntityDescription(ToggleEntityDescription):
    """A class that describes siren entities."""
    available_tones: list[int | str] | dict[int, str] | None = ...


class SirenEntity(ToggleEntity):
    """Representation of a siren device."""
    _entity_component_unrecorded_attributes = ...
    entity_description: SirenEntityDescription
    _attr_available_tones: list[int | str] | dict[int, str] | None
    _attr_supported_features: SirenEntityFeature = ...
    @final
    @property
    def capability_attributes(self) -> dict[str, Any] | None:
        """Return capability attributes."""
        ...
    
    @property
    def available_tones(self) -> list[int | str] | dict[int, str] | None:
        """Return a list of available tones.

        Requires SirenEntityFeature.TONES.
        """
        ...
    
    @property
    def supported_features(self) -> SirenEntityFeature:
        """Return the list of supported features."""
        ...
    


