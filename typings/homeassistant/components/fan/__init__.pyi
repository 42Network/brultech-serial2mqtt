"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import math
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_ON
from homeassistant.core import HomeAssistant, callback
from homeassistant.exceptions import ServiceValidationError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import ToggleEntity, ToggleEntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.util.percentage import percentage_to_ranged_value, ranged_value_to_percentage

"""Provides functionality to interact with fans."""
_LOGGER = ...
DOMAIN = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
class FanEntityFeature(IntFlag):
    """Supported features of the fan entity."""
    SET_SPEED = ...
    OSCILLATE = ...
    DIRECTION = ...
    PRESET_MODE = ...


SUPPORT_SET_SPEED = ...
SUPPORT_OSCILLATE = ...
SUPPORT_DIRECTION = ...
SUPPORT_PRESET_MODE = ...
SERVICE_INCREASE_SPEED = ...
SERVICE_DECREASE_SPEED = ...
SERVICE_OSCILLATE = ...
SERVICE_SET_DIRECTION = ...
SERVICE_SET_PERCENTAGE = ...
SERVICE_SET_PRESET_MODE = ...
DIRECTION_FORWARD = ...
DIRECTION_REVERSE = ...
ATTR_PERCENTAGE = ...
ATTR_PERCENTAGE_STEP = ...
ATTR_OSCILLATING = ...
ATTR_DIRECTION = ...
ATTR_PRESET_MODE = ...
ATTR_PRESET_MODES = ...
class NotValidPresetModeError(ServiceValidationError):
    """Raised when the preset_mode is not in the preset_modes list."""
    def __init__(self, *args: object, translation_placeholders: dict[str, str] | None = ...) -> None:
        """Initialize the exception."""
        ...
    


@bind_hass
def is_on(hass: HomeAssistant, entity_id: str) -> bool:
    """Return if the fans are on based on the statemachine."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Expose fan control via statemachine and services."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class FanEntityDescription(ToggleEntityDescription):
    """A class that describes fan entities."""
    ...


class FanEntity(ToggleEntity):
    """Base class for fan entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: FanEntityDescription
    _attr_current_direction: str | None = ...
    _attr_oscillating: bool | None = ...
    _attr_percentage: int | None
    _attr_preset_mode: str | None
    _attr_preset_modes: list[str] | None
    _attr_speed_count: int
    _attr_supported_features: FanEntityFeature = ...
    def set_percentage(self, percentage: int) -> None:
        """Set the speed of the fan, as a percentage."""
        ...
    
    async def async_set_percentage(self, percentage: int) -> None:
        """Set the speed of the fan, as a percentage."""
        ...
    
    async def async_increase_speed(self, percentage_step: int | None = ...) -> None:
        """Increase the speed of the fan."""
        ...
    
    async def async_decrease_speed(self, percentage_step: int | None = ...) -> None:
        """Decrease the speed of the fan."""
        ...
    
    def set_preset_mode(self, preset_mode: str) -> None:
        """Set new preset mode."""
        ...
    
    @final
    async def async_handle_set_preset_mode_service(self, preset_mode: str) -> None:
        """Validate and set new preset mode."""
        ...
    
    async def async_set_preset_mode(self, preset_mode: str) -> None:
        """Set new preset mode."""
        ...
    
    def set_direction(self, direction: str) -> None:
        """Set the direction of the fan."""
        ...
    
    async def async_set_direction(self, direction: str) -> None:
        """Set the direction of the fan."""
        ...
    
    def turn_on(self, percentage: int | None = ..., preset_mode: str | None = ..., **kwargs: Any) -> None:
        """Turn on the fan."""
        ...
    
    @final
    async def async_handle_turn_on_service(self, percentage: int | None = ..., preset_mode: str | None = ..., **kwargs: Any) -> None:
        """Validate and turn on the fan."""
        ...
    
    async def async_turn_on(self, percentage: int | None = ..., preset_mode: str | None = ..., **kwargs: Any) -> None:
        """Turn on the fan."""
        ...
    
    def oscillate(self, oscillating: bool) -> None:
        """Oscillate the fan."""
        ...
    
    async def async_oscillate(self, oscillating: bool) -> None:
        """Oscillate the fan."""
        ...
    
    @property
    def is_on(self) -> bool | None:
        """Return true if the entity is on."""
        ...
    
    @property
    def percentage(self) -> int | None:
        """Return the current speed as a percentage."""
        ...
    
    @property
    def speed_count(self) -> int:
        """Return the number of speeds the fan supports."""
        ...
    
    @property
    def percentage_step(self) -> float:
        """Return the step size for percentage."""
        ...
    
    @property
    def current_direction(self) -> str | None:
        """Return the current direction of the fan."""
        ...
    
    @property
    def oscillating(self) -> bool | None:
        """Return whether or not the fan is currently oscillating."""
        ...
    
    @property
    def capability_attributes(self) -> dict[str, list[str] | None]:
        """Return capability attributes."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, float | str | None]:
        """Return optional state attributes."""
        ...
    
    @property
    def supported_features(self) -> FanEntityFeature:
        """Flag supported features."""
        ...
    
    @property
    def preset_mode(self) -> str | None:
        """Return the current preset mode, e.g., auto, smart, interval, favorite.

        Requires FanEntityFeature.SET_SPEED.
        """
        ...
    
    @property
    def preset_modes(self) -> list[str] | None:
        """Return a list of available preset modes.

        Requires FanEntityFeature.SET_SPEED.
        """
        ...
    


