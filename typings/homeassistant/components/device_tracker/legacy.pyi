"""
This type stub file was generated by pyright.
"""

import attr
import voluptuous as vol
from collections.abc import Callable, Coroutine, Sequence
from datetime import datetime, timedelta
from types import ModuleType
from typing import Any, Final, Protocol, final
from homeassistant.backports.functools import cached_property
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.restore_state import RestoreEntity
from homeassistant.helpers.typing import ConfigType, GPSType, StateType
from .const import SourceType

"""Legacy device tracker classes."""
SERVICE_SEE: Final = ...
SOURCE_TYPES = ...
NEW_DEVICE_DEFAULTS_SCHEMA = ...
PLATFORM_SCHEMA: Final = ...
PLATFORM_SCHEMA_BASE: Final[vol.Schema] = ...
SERVICE_SEE_PAYLOAD_SCHEMA: Final[vol.Schema] = ...
YAML_DEVICES: Final = ...
EVENT_NEW_DEVICE: Final = ...
class SeeCallback(Protocol):
    """Protocol type for DeviceTracker.see callback."""
    def __call__(self, mac: str | None = ..., dev_id: str | None = ..., host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ..., source_type: SourceType | str = ..., picture: str | None = ..., icon: str | None = ..., consider_home: timedelta | None = ...) -> None:
        """Define see type."""
        ...
    


class AsyncSeeCallback(Protocol):
    """Protocol type for DeviceTracker.async_see callback."""
    async def __call__(self, mac: str | None = ..., dev_id: str | None = ..., host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ..., source_type: SourceType | str = ..., picture: str | None = ..., icon: str | None = ..., consider_home: timedelta | None = ...) -> None:
        """Define async_see type."""
        ...
    


def see(hass: HomeAssistant, mac: str | None = ..., dev_id: str | None = ..., host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ...) -> None:
    """Call service to notify you see device."""
    ...

async def async_setup_integration(hass: HomeAssistant, config: ConfigType) -> None:
    """Set up the legacy integration."""
    ...

@attr.s
class DeviceTrackerPlatform:
    """Class to hold platform information."""
    LEGACY_SETUP: Final[tuple[str, ...]] = ...
    name: str = ...
    platform: ModuleType = ...
    config: dict = ...
    @cached_property
    def type(self) -> str | None:
        """Return platform type."""
        ...
    
    async def async_setup_legacy(self, hass: HomeAssistant, tracker: DeviceTracker, discovery_info: dict[str, Any] | None = ...) -> None:
        """Set up a legacy platform."""
        ...
    


async def async_extract_config(hass: HomeAssistant, config: ConfigType) -> list[DeviceTrackerPlatform]:
    """Extract device tracker config and split between legacy and modern."""
    ...

async def async_create_platform_type(hass: HomeAssistant, config: ConfigType, p_type: str, p_config: dict) -> DeviceTrackerPlatform | None:
    """Determine type of platform."""
    ...

@callback
def async_setup_scanner_platform(hass: HomeAssistant, config: ConfigType, scanner: DeviceScanner, async_see_device: Callable[..., Coroutine[None, None, None]], platform: str) -> None:
    """Set up the connect scanner-based platform to device tracker.

    This method must be run in the event loop.
    """
    ...

async def get_tracker(hass: HomeAssistant, config: ConfigType) -> DeviceTracker:
    """Create a tracker."""
    ...

class DeviceTracker:
    """Representation of a device tracker."""
    def __init__(self, hass: HomeAssistant, consider_home: timedelta, track_new: bool, defaults: dict[str, Any], devices: Sequence[Device]) -> None:
        """Initialize a device tracker."""
        ...
    
    def see(self, mac: str | None = ..., dev_id: str | None = ..., host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ..., source_type: SourceType | str = ..., picture: str | None = ..., icon: str | None = ..., consider_home: timedelta | None = ...) -> None:
        """Notify the device tracker that you see a device."""
        ...
    
    async def async_see(self, mac: str | None = ..., dev_id: str | None = ..., host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ..., source_type: SourceType | str = ..., picture: str | None = ..., icon: str | None = ..., consider_home: timedelta | None = ...) -> None:
        """Notify the device tracker that you see a device.

        This method is a coroutine.
        """
        ...
    
    async def async_update_config(self, path: str, dev_id: str, device: Device) -> None:
        """Add device to YAML configuration file.

        This method is a coroutine.
        """
        ...
    
    @callback
    def async_update_stale(self, now: datetime) -> None:
        """Update stale devices.

        This method must be run in the event loop.
        """
        ...
    
    async def async_setup_tracked_device(self) -> None:
        """Set up all not exists tracked devices.

        This method is a coroutine.
        """
        ...
    


class Device(RestoreEntity):
    """Base class for a tracked device."""
    _no_platform_reported = ...
    host_name: str | None = ...
    location_name: str | None = ...
    gps: GPSType | None = ...
    gps_accuracy: int = ...
    last_seen: datetime | None = ...
    battery: int | None = ...
    attributes: dict | None = ...
    last_update_home: bool = ...
    _state: str = ...
    def __init__(self, hass: HomeAssistant, consider_home: timedelta, track: bool, dev_id: str, mac: str | None, name: str | None = ..., picture: str | None = ..., gravatar: str | None = ..., icon: str | None = ...) -> None:
        """Initialize a device."""
        ...
    
    @property
    def name(self) -> str:
        """Return the name of the entity."""
        ...
    
    @property
    def state(self) -> str:
        """Return the state of the device."""
        ...
    
    @property
    def entity_picture(self) -> str | None:
        """Return the picture of the device."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, StateType]:
        """Return the device state attributes."""
        ...
    
    @property
    def extra_state_attributes(self) -> dict[str, Any]:
        """Return device state attributes."""
        ...
    
    @property
    def icon(self) -> str | None:
        """Return device icon."""
        ...
    
    async def async_seen(self, host_name: str | None = ..., location_name: str | None = ..., gps: GPSType | None = ..., gps_accuracy: int | None = ..., battery: int | None = ..., attributes: dict[str, Any] | None = ..., source_type: SourceType | str = ..., consider_home: timedelta | None = ...) -> None:
        """Mark the device as seen."""
        ...
    
    def stale(self, now: datetime | None = ...) -> bool:
        """Return if device state is stale.

        Async friendly.
        """
        ...
    
    def mark_stale(self) -> None:
        """Mark the device state as stale."""
        ...
    
    async def async_update(self) -> None:
        """Update state of entity.

        This method is a coroutine.
        """
        ...
    
    async def async_added_to_hass(self) -> None:
        """Add an entity."""
        ...
    


class DeviceScanner:
    """Device scanner object."""
    hass: HomeAssistant | None = ...
    def scan_devices(self) -> list[str]:
        """Scan for devices."""
        ...
    
    async def async_scan_devices(self) -> list[str]:
        """Scan for devices."""
        ...
    
    def get_device_name(self, device: str) -> str | None:
        """Get the name of a device."""
        ...
    
    async def async_get_device_name(self, device: str) -> str | None:
        """Get the name of a device."""
        ...
    
    def get_extra_attributes(self, device: str) -> dict:
        """Get the extra attributes of a device."""
        ...
    
    async def async_get_extra_attributes(self, device: str) -> dict:
        """Get the extra attributes of a device."""
        ...
    


async def async_load_config(path: str, hass: HomeAssistant, consider_home: timedelta) -> list[Device]:
    """Load devices from YAML configuration file.

    This method is a coroutine.
    """
    ...

def update_config(path: str, dev_id: str, device: Device) -> None:
    """Add device to YAML configuration file."""
    ...

def get_gravatar_for_email(email: str) -> str:
    """Return an 80px Gravatar for the given email address.

    Async friendly.
    """
    ...

