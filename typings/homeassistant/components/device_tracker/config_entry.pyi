"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import final
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import device_registry as dr
from homeassistant.helpers.device_registry import DeviceInfo
from homeassistant.helpers.entity import Entity
from homeassistant.helpers.entity_platform import EntityPlatform
from homeassistant.helpers.typing import StateType
from .const import SourceType

"""Code to set up a device tracker platform using a config entry."""
async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up an entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload an entry."""
    ...

class BaseTrackerEntity(Entity):
    """Represent a tracked device."""
    _attr_device_info: None = ...
    _attr_entity_category = ...
    @property
    def battery_level(self) -> int | None:
        """Return the battery level of the device.

        Percentage from 0-100.
        """
        ...
    
    @property
    def source_type(self) -> SourceType | str:
        """Return the source type, eg gps or router, of the device."""
        ...
    
    @property
    def state_attributes(self) -> dict[str, StateType]:
        """Return the device state attributes."""
        ...
    


class TrackerEntity(BaseTrackerEntity):
    """Base class for a tracked device."""
    @property
    def should_poll(self) -> bool:
        """No polling for entities that have location pushed."""
        ...
    
    @property
    def force_update(self) -> bool:
        """All updates need to be written to the state machine if we're not polling."""
        ...
    
    @property
    def location_accuracy(self) -> int:
        """Return the location accuracy of the device.

        Value in meters.
        """
        ...
    
    @property
    def location_name(self) -> str | None:
        """Return a location name for the current location of the device."""
        ...
    
    @property
    def latitude(self) -> float | None:
        """Return latitude value of the device."""
        ...
    
    @property
    def longitude(self) -> float | None:
        """Return longitude value of the device."""
        ...
    
    @property
    def state(self) -> str | None:
        """Return the state of the device."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, StateType]:
        """Return the device state attributes."""
        ...
    


class ScannerEntity(BaseTrackerEntity):
    """Base class for a tracked device that is on a scanned network."""
    @property
    def ip_address(self) -> str | None:
        """Return the primary ip address of the device."""
        ...
    
    @property
    def mac_address(self) -> str | None:
        """Return the mac address of the device."""
        ...
    
    @property
    def hostname(self) -> str | None:
        """Return hostname of the device."""
        ...
    
    @property
    def state(self) -> str:
        """Return the state of the device."""
        ...
    
    @property
    def is_connected(self) -> bool:
        """Return true if the device is connected to the network."""
        ...
    
    @property
    def unique_id(self) -> str | None:
        """Return unique ID of the entity."""
        ...
    
    @final
    @property
    def device_info(self) -> DeviceInfo | None:
        """Device tracker entities should not create device registry entries."""
        ...
    
    @property
    def entity_registry_enabled_default(self) -> bool:
        """Return if entity is enabled by default."""
        ...
    
    @callback
    def add_to_platform_start(self, hass: HomeAssistant, platform: EntityPlatform, parallel_updates: asyncio.Semaphore | None) -> None:
        """Start adding an entity to a platform."""
        ...
    
    @callback
    def find_device_entry(self) -> dr.DeviceEntry | None:
        """Return device entry."""
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Handle added to Home Assistant."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, StateType]:
        """Return the device state attributes."""
        ...
    


