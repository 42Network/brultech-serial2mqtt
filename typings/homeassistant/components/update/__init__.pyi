"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import StrEnum
from functools import lru_cache
from typing import Any, Final, final
from awesomeversion import AwesomeVersion, AwesomeVersionCompareException
from homeassistant.components import websocket_api
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_ENTITY_PICTURE, EntityCategory, STATE_OFF, STATE_ON
from homeassistant.core import HomeAssistant, ServiceCall
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import config_validation as cv
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.restore_state import RestoreEntity
from homeassistant.helpers.typing import ConfigType
from .const import ATTR_AUTO_UPDATE, ATTR_BACKUP, ATTR_INSTALLED_VERSION, ATTR_IN_PROGRESS, ATTR_LATEST_VERSION, ATTR_RELEASE_SUMMARY, ATTR_RELEASE_URL, ATTR_SKIPPED_VERSION, ATTR_TITLE, ATTR_VERSION, DOMAIN, SERVICE_INSTALL, SERVICE_SKIP, UpdateEntityFeature

"""Component to allow for providing device or service updates."""
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT: Final = ...
_LOGGER = ...
class UpdateDeviceClass(StrEnum):
    """Device class for update."""
    FIRMWARE = ...


DEVICE_CLASSES_SCHEMA = ...
__all__ = ["ATTR_BACKUP", "ATTR_INSTALLED_VERSION", "ATTR_LATEST_VERSION", "ATTR_VERSION", "DEVICE_CLASSES_SCHEMA", "DOMAIN", "PLATFORM_SCHEMA_BASE", "PLATFORM_SCHEMA", "SERVICE_INSTALL", "SERVICE_SKIP", "UpdateDeviceClass", "UpdateEntity", "UpdateEntityDescription", "UpdateEntityFeature"]
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up Select entities."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

async def async_install(entity: UpdateEntity, service_call: ServiceCall) -> None:
    """Service call wrapper to validate the call."""
    ...

async def async_skip(entity: UpdateEntity, service_call: ServiceCall) -> None:
    """Service call wrapper to validate the call."""
    ...

async def async_clear_skipped(entity: UpdateEntity, service_call: ServiceCall) -> None:
    """Service call wrapper to validate the call."""
    ...

@dataclass
class UpdateEntityDescription(EntityDescription):
    """A class that describes update entities."""
    device_class: UpdateDeviceClass | None = ...
    entity_category: EntityCategory | None = ...


class UpdateEntity(RestoreEntity):
    """Representation of an update entity."""
    _entity_component_unrecorded_attributes = ...
    entity_description: UpdateEntityDescription
    _attr_auto_update: bool = ...
    _attr_installed_version: str | None = ...
    _attr_device_class: UpdateDeviceClass | None
    _attr_in_progress: bool | int = ...
    _attr_latest_version: str | None = ...
    _attr_release_summary: str | None = ...
    _attr_release_url: str | None = ...
    _attr_state: None = ...
    _attr_supported_features: UpdateEntityFeature = ...
    _attr_title: str | None = ...
    __skipped_version: str | None = ...
    __in_progress: bool = ...
    @property
    def auto_update(self) -> bool:
        """Indicate if the device or service has auto update enabled."""
        ...
    
    @property
    def installed_version(self) -> str | None:
        """Version installed and in use."""
        ...
    
    @property
    def device_class(self) -> UpdateDeviceClass | None:
        """Return the class of this entity."""
        ...
    
    @property
    def entity_category(self) -> EntityCategory | None:
        """Return the category of the entity, if any."""
        ...
    
    @property
    def entity_picture(self) -> str | None:
        """Return the entity picture to use in the frontend.

        Update entities return the brand icon based on the integration
        domain by default.
        """
        ...
    
    @property
    def in_progress(self) -> bool | int | None:
        """Update installation progress.

        Needs UpdateEntityFeature.PROGRESS flag to be set for it to be used.

        Can either return a boolean (True if in progress, False if not)
        or an integer to indicate the progress in from 0 to 100%.
        """
        ...
    
    @property
    def latest_version(self) -> str | None:
        """Latest version available for install."""
        ...
    
    @property
    def release_summary(self) -> str | None:
        """Summary of the release notes or changelog.

        This is not suitable for long changelogs, but merely suitable
        for a short excerpt update description of max 255 characters.
        """
        ...
    
    @property
    def release_url(self) -> str | None:
        """URL to the full release notes of the latest version available."""
        ...
    
    @property
    def supported_features(self) -> UpdateEntityFeature:
        """Flag supported features."""
        ...
    
    @property
    def title(self) -> str | None:
        """Title of the software.

        This helps to differentiate between the device or entity name
        versus the title of the software installed.
        """
        ...
    
    @final
    async def async_skip(self) -> None:
        """Skip the current offered version to update."""
        ...
    
    @final
    async def async_clear_skipped(self) -> None:
        """Clear the skipped version."""
        ...
    
    async def async_install(self, version: str | None, backup: bool, **kwargs: Any) -> None:
        """Install an update.

        Version can be specified to install a specific version. When `None`, the
        latest version needs to be installed.

        The backup parameter indicates a backup should be taken before
        installing the update.
        """
        ...
    
    def install(self, version: str | None, backup: bool, **kwargs: Any) -> None:
        """Install an update.

        Version can be specified to install a specific version. When `None`, the
        latest version needs to be installed.

        The backup parameter indicates a backup should be taken before
        installing the update.
        """
        ...
    
    async def async_release_notes(self) -> str | None:
        """Return full release notes.

        This is suitable for a long changelog that does not fit in the release_summary
        property. The returned string can contain markdown.
        """
        ...
    
    def release_notes(self) -> str | None:
        """Return full release notes.

        This is suitable for a long changelog that does not fit in the release_summary
        property. The returned string can contain markdown.
        """
        ...
    
    @property
    @final
    def state(self) -> str | None:
        """Return the entity state."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return state attributes."""
        ...
    
    @final
    async def async_install_with_progress(self, version: str | None, backup: bool) -> None:
        """Install update and handle progress if needed.

        Handles setting the in_progress state in case the entity doesn't
        support it natively.
        """
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Call when the update entity is added to hass.

        It is used to restore the skipped version, if any.
        """
        ...
    


@websocket_api.require_admin
@websocket_api.websocket_command({ vol.Required("type"): "update/release_notes",vol.Required("entity_id"): cv.entity_id })
@websocket_api.async_response
async def websocket_release_notes(hass: HomeAssistant, connection: websocket_api.connection.ActiveConnection, msg: dict[str, Any]) -> None:
    """Get the full release notes for a entity."""
    ...

