"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
from __future__ import annotations
from collections.abc import Mapping
from contextlib import suppress
from dataclasses import dataclass
from datetime import UTC, date, datetime, timedelta
from decimal import Decimal, InvalidOperation as DecimalInvalidOperation
from math import ceil, floor, isfinite, log10
from typing import Any, Final, Self, cast, final
from typing_extensions import override
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_UNIT_OF_MEASUREMENT, CONF_UNIT_OF_MEASUREMENT, DEVICE_CLASS_AQI, DEVICE_CLASS_BATTERY, DEVICE_CLASS_CO, DEVICE_CLASS_CO2, DEVICE_CLASS_CURRENT, DEVICE_CLASS_DATE, DEVICE_CLASS_ENERGY, DEVICE_CLASS_FREQUENCY, DEVICE_CLASS_GAS, DEVICE_CLASS_HUMIDITY, DEVICE_CLASS_ILLUMINANCE, DEVICE_CLASS_MONETARY, DEVICE_CLASS_NITROGEN_DIOXIDE, DEVICE_CLASS_NITROGEN_MONOXIDE, DEVICE_CLASS_NITROUS_OXIDE, DEVICE_CLASS_OZONE, DEVICE_CLASS_PM1, DEVICE_CLASS_PM10, DEVICE_CLASS_PM25, DEVICE_CLASS_POWER, DEVICE_CLASS_POWER_FACTOR, DEVICE_CLASS_PRESSURE, DEVICE_CLASS_SIGNAL_STRENGTH, DEVICE_CLASS_SULPHUR_DIOXIDE, DEVICE_CLASS_TEMPERATURE, DEVICE_CLASS_TIMESTAMP, DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS, DEVICE_CLASS_VOLTAGE, EntityCategory, UnitOfTemperature
from homeassistant.core import HomeAssistant, State, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import entity_registry as er
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.entity_platform import EntityPlatform
from homeassistant.helpers.restore_state import ExtraStoredData, RestoreEntity
from homeassistant.helpers.typing import ConfigType, StateType, UNDEFINED, UndefinedType
from homeassistant.util import dt as dt_util
from homeassistant.util.enum import try_parse_enum
from .const import ATTR_LAST_RESET, ATTR_OPTIONS, ATTR_STATE_CLASS, CONF_STATE_CLASS, DEVICE_CLASSES, DEVICE_CLASSES_SCHEMA, DEVICE_CLASS_STATE_CLASSES, DEVICE_CLASS_UNITS, DOMAIN, NON_NUMERIC_DEVICE_CLASSES, STATE_CLASSES, STATE_CLASSES_SCHEMA, STATE_CLASS_MEASUREMENT, STATE_CLASS_TOTAL, STATE_CLASS_TOTAL_INCREASING, SensorDeviceClass, SensorStateClass, UNIT_CONVERTERS
from .websocket_api import async_setup as async_setup_ws_api

"""Component to interface with various sensors that can be monitored."""
_LOGGER: Final = ...
ENTITY_ID_FORMAT: Final = ...
SCAN_INTERVAL: Final = ...
__all__ = ["ATTR_LAST_RESET", "ATTR_OPTIONS", "ATTR_STATE_CLASS", "CONF_STATE_CLASS", "DEVICE_CLASS_STATE_CLASSES", "DOMAIN", "PLATFORM_SCHEMA_BASE", "PLATFORM_SCHEMA", "RestoreSensor", "SensorDeviceClass", "SensorEntity", "SensorEntityDescription", "SensorExtraStoredData", "SensorStateClass"]
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for sensors."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class SensorEntityDescription(EntityDescription):
    """A class that describes sensor entities."""
    device_class: SensorDeviceClass | None = ...
    last_reset: datetime | None = ...
    native_unit_of_measurement: str | None = ...
    options: list[str] | None = ...
    state_class: SensorStateClass | str | None = ...
    suggested_display_precision: int | None = ...
    suggested_unit_of_measurement: str | None = ...
    unit_of_measurement: None = ...


class SensorEntity(Entity):
    """Base class for sensor entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: SensorEntityDescription
    _attr_device_class: SensorDeviceClass | None
    _attr_last_reset: datetime | None
    _attr_native_unit_of_measurement: str | None
    _attr_native_value: StateType | date | datetime | Decimal = ...
    _attr_options: list[str] | None
    _attr_state_class: SensorStateClass | str | None
    _attr_state: None = ...
    _attr_suggested_display_precision: int | None
    _attr_suggested_unit_of_measurement: str | None
    _attr_unit_of_measurement: None = ...
    _invalid_state_class_reported = ...
    _invalid_unit_of_measurement_reported = ...
    _last_reset_reported = ...
    _sensor_option_display_precision: int | None = ...
    _sensor_option_unit_of_measurement: str | None | UndefinedType = ...
    @callback
    def add_to_platform_start(self, hass: HomeAssistant, platform: EntityPlatform, parallel_updates: asyncio.Semaphore | None) -> None:
        """Start adding an entity to a platform.

        Allows integrations to remove legacy custom unit conversion which is no longer
        needed without breaking existing sensors. Only works for sensors which are in
        the entity registry.

        This can be removed once core integrations have dropped unneeded custom unit
        conversion.
        """
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Call when the sensor entity is added to hass."""
        ...
    
    @property
    @override
    def device_class(self) -> SensorDeviceClass | None:
        """Return the class of this entity."""
        ...
    
    @property
    def options(self) -> list[str] | None:
        """Return a set of possible options."""
        ...
    
    @property
    def state_class(self) -> SensorStateClass | str | None:
        """Return the state class of this entity, if any."""
        ...
    
    @property
    def last_reset(self) -> datetime | None:
        """Return the time when the sensor was last reset, if any."""
        ...
    
    @property
    @override
    def capability_attributes(self) -> Mapping[str, Any] | None:
        """Return the capability attributes."""
        ...
    
    def get_initial_entity_options(self) -> er.EntityOptionsType | None:
        """Return initial entity options.

        These will be stored in the entity registry the first time the entity is seen,
        and then only updated if the unit system is changed.
        """
        ...
    
    @final
    @property
    @override
    def state_attributes(self) -> dict[str, Any] | None:
        """Return state attributes."""
        ...
    
    @property
    def native_value(self) -> StateType | date | datetime | Decimal:
        """Return the value reported by the sensor."""
        ...
    
    @property
    def suggested_display_precision(self) -> int | None:
        """Return the suggested number of decimal digits for display."""
        ...
    
    @property
    def native_unit_of_measurement(self) -> str | None:
        """Return the unit of measurement of the sensor, if any."""
        ...
    
    @property
    def suggested_unit_of_measurement(self) -> str | None:
        """Return the unit which should be used for the sensor's state.

        This can be used by integrations to override automatic unit conversion rules,
        for example to make a temperature sensor display in Â°C even if the configured
        unit system prefers Â°F.

        For sensors without a `unique_id`, this takes precedence over legacy
        temperature conversion rules only.

        For sensors with a `unique_id`, this is applied only if the unit is not set by
        the user, and takes precedence over automatic device-class conversion rules.

        Note:
            suggested_unit_of_measurement is stored in the entity registry the first
            time the entity is seen, and then never updated.
        """
        ...
    
    @final
    @property
    @override
    def unit_of_measurement(self) -> str | None:
        """Return the unit of measurement of the entity, after unit conversion."""
        ...
    
    @final
    @property
    @override
    def state(self) -> Any:
        """Return the state of the sensor and perform unit conversions, if needed."""
        ...
    
    def __repr__(self) -> str:
        """Return the representation.

        Entity.__repr__ includes the state in the generated string, this fails if we're
        called before self.hass is set.
        """
        ...
    
    @callback
    def async_registry_entry_updated(self) -> None:
        """Run when the entity registry entry has been updated."""
        ...
    


@dataclass
class SensorExtraStoredData(ExtraStoredData):
    """Object to hold extra stored data."""
    native_value: StateType | date | datetime | Decimal
    native_unit_of_measurement: str | None
    def as_dict(self) -> dict[str, Any]:
        """Return a dict representation of the sensor data."""
        ...
    
    @classmethod
    def from_dict(cls, restored: dict[str, Any]) -> Self | None:
        """Initialize a stored sensor state from a dict."""
        ...
    


class RestoreSensor(SensorEntity, RestoreEntity):
    """Mixin class for restoring previous sensor state."""
    @property
    def extra_restore_state_data(self) -> SensorExtraStoredData:
        """Return sensor specific state data to be restored."""
        ...
    
    async def async_get_last_sensor_data(self) -> SensorExtraStoredData | None:
        """Restore native_value and native_unit_of_measurement."""
        ...
    


@callback
def async_update_suggested_units(hass: HomeAssistant) -> None:
    """Update the suggested_unit_of_measurement according to the unit system."""
    ...

@callback
def async_rounded_state(hass: HomeAssistant, entity_id: str, state: State) -> str:
    """Return the state rounded for presentation."""
    ...

