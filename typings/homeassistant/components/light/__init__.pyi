"""
This type stub file was generated by pyright.
"""

import csv
import dataclasses
import logging
import os
import voluptuous as vol
import homeassistant.util.color as color_util
from __future__ import annotations
from collections.abc import Iterable
from datetime import timedelta
from enum import IntFlag, StrEnum
from typing import Any, Self, cast, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_ON
from homeassistant.core import HomeAssistant, ServiceCall, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import config_validation as cv, entity_registry as er
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, make_entity_service_schema
from homeassistant.helpers.entity import ToggleEntity, ToggleEntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass

"""Provides functionality to interact with lights."""
DOMAIN = ...
SCAN_INTERVAL = ...
DATA_PROFILES = ...
ENTITY_ID_FORMAT = ...
class LightEntityFeature(IntFlag):
    """Supported features of the light entity."""
    EFFECT = ...
    FLASH = ...
    TRANSITION = ...


SUPPORT_BRIGHTNESS = ...
SUPPORT_COLOR_TEMP = ...
SUPPORT_EFFECT = ...
SUPPORT_FLASH = ...
SUPPORT_COLOR = ...
SUPPORT_TRANSITION = ...
ATTR_COLOR_MODE = ...
ATTR_SUPPORTED_COLOR_MODES = ...
class ColorMode(StrEnum):
    """Possible light color modes."""
    UNKNOWN = ...
    ONOFF = ...
    BRIGHTNESS = ...
    COLOR_TEMP = ...
    HS = ...
    XY = ...
    RGB = ...
    RGBW = ...
    RGBWW = ...
    WHITE = ...


COLOR_MODE_UNKNOWN = ...
COLOR_MODE_ONOFF = ...
COLOR_MODE_BRIGHTNESS = ...
COLOR_MODE_COLOR_TEMP = ...
COLOR_MODE_HS = ...
COLOR_MODE_XY = ...
COLOR_MODE_RGB = ...
COLOR_MODE_RGBW = ...
COLOR_MODE_RGBWW = ...
COLOR_MODE_WHITE = ...
VALID_COLOR_MODES = ...
COLOR_MODES_BRIGHTNESS = ...
COLOR_MODES_COLOR = ...
def filter_supported_color_modes(color_modes: Iterable[ColorMode]) -> set[ColorMode]:
    """Filter the given color modes."""
    ...

def valid_supported_color_modes(color_modes: Iterable[ColorMode | str]) -> set[ColorMode | str]:
    """Validate the given color modes."""
    ...

def brightness_supported(color_modes: Iterable[ColorMode | str] | None) -> bool:
    """Test if brightness is supported."""
    ...

def color_supported(color_modes: Iterable[ColorMode | str] | None) -> bool:
    """Test if color is supported."""
    ...

def color_temp_supported(color_modes: Iterable[ColorMode | str] | None) -> bool:
    """Test if color temperature is supported."""
    ...

def get_supported_color_modes(hass: HomeAssistant, entity_id: str) -> set[str] | None:
    """Get supported color modes for a light entity.

    First try the statemachine, then entity registry.
    This is the equivalent of entity helper get_supported_features.
    """
    ...

ATTR_TRANSITION = ...
ATTR_RGB_COLOR = ...
ATTR_RGBW_COLOR = ...
ATTR_RGBWW_COLOR = ...
ATTR_XY_COLOR = ...
ATTR_HS_COLOR = ...
ATTR_COLOR_TEMP = ...
ATTR_KELVIN = ...
ATTR_MIN_MIREDS = ...
ATTR_MAX_MIREDS = ...
ATTR_COLOR_TEMP_KELVIN = ...
ATTR_MIN_COLOR_TEMP_KELVIN = ...
ATTR_MAX_COLOR_TEMP_KELVIN = ...
ATTR_COLOR_NAME = ...
ATTR_WHITE = ...
ATTR_BRIGHTNESS = ...
ATTR_BRIGHTNESS_PCT = ...
ATTR_BRIGHTNESS_STEP = ...
ATTR_BRIGHTNESS_STEP_PCT = ...
ATTR_PROFILE = ...
ATTR_FLASH = ...
FLASH_SHORT = ...
FLASH_LONG = ...
ATTR_EFFECT_LIST = ...
ATTR_EFFECT = ...
EFFECT_COLORLOOP = ...
EFFECT_RANDOM = ...
EFFECT_WHITE = ...
COLOR_GROUP = ...
LIGHT_PROFILES_FILE = ...
VALID_TRANSITION = ...
VALID_BRIGHTNESS = ...
VALID_BRIGHTNESS_PCT = ...
VALID_BRIGHTNESS_STEP = ...
VALID_BRIGHTNESS_STEP_PCT = ...
VALID_FLASH = ...
LIGHT_TURN_ON_SCHEMA = ...
LIGHT_TURN_OFF_SCHEMA = ...
_LOGGER = ...
@bind_hass
def is_on(hass: HomeAssistant, entity_id: str) -> bool:
    """Return if the lights are on based on the statemachine."""
    ...

def preprocess_turn_on_alternatives(hass: HomeAssistant, params: dict[str, Any]) -> None:
    """Process extra data for turn light on request.

    Async friendly.
    """
    ...

def filter_turn_off_params(light: LightEntity, params: dict[str, Any]) -> dict[str, Any]:
    """Filter out params not used in turn off or not supported by the light."""
    ...

def filter_turn_on_params(light: LightEntity, params: dict[str, Any]) -> dict[str, Any]:
    """Filter out params not supported by the light."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Expose light control via state machine and services."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclasses.dataclass
class Profile:
    """Representation of a profile."""
    name: str
    color_x: float | None = ...
    color_y: float | None = ...
    brightness: int | None
    transition: int | None = ...
    hs_color: tuple[float, float] | None = ...
    SCHEMA = ...
    def __post_init__(self) -> None:
        """Convert xy to hs color."""
        ...
    
    @classmethod
    def from_csv_row(cls, csv_row: list[str]) -> Self:
        """Create profile from a CSV row tuple."""
        ...
    


class Profiles:
    """Representation of available color profiles."""
    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize profiles."""
        ...
    
    async def async_initialize(self) -> None:
        """Load and cache profiles."""
        ...
    
    @callback
    def apply_default(self, entity_id: str, state_on: bool | None, params: dict[str, Any]) -> None:
        """Return the default profile for the given light."""
        ...
    
    @callback
    def apply_profile(self, name: str, params: dict[str, Any]) -> None:
        """Apply a profile."""
        ...
    


@dataclasses.dataclass
class LightEntityDescription(ToggleEntityDescription):
    """A class that describes binary sensor entities."""
    ...


class LightEntity(ToggleEntity):
    """Base class for light entities."""
    _entity_component_unrecorded_attributes = ...
    entity_description: LightEntityDescription
    _attr_brightness: int | None = ...
    _attr_color_mode: ColorMode | str | None = ...
    _attr_color_temp: int | None = ...
    _attr_color_temp_kelvin: int | None = ...
    _attr_effect_list: list[str] | None = ...
    _attr_effect: str | None = ...
    _attr_hs_color: tuple[float, float] | None = ...
    _attr_max_color_temp_kelvin: int | None = ...
    _attr_min_color_temp_kelvin: int | None = ...
    _attr_max_mireds: int = ...
    _attr_min_mireds: int = ...
    _attr_rgb_color: tuple[int, int, int] | None = ...
    _attr_rgbw_color: tuple[int, int, int, int] | None = ...
    _attr_rgbww_color: tuple[int, int, int, int, int] | None = ...
    _attr_supported_color_modes: set[ColorMode] | set[str] | None = ...
    _attr_supported_features: LightEntityFeature = ...
    _attr_xy_color: tuple[float, float] | None = ...
    @property
    def brightness(self) -> int | None:
        """Return the brightness of this light between 0..255."""
        ...
    
    @property
    def color_mode(self) -> ColorMode | str | None:
        """Return the color mode of the light."""
        ...
    
    @property
    def hs_color(self) -> tuple[float, float] | None:
        """Return the hue and saturation color value [float, float]."""
        ...
    
    @property
    def xy_color(self) -> tuple[float, float] | None:
        """Return the xy color value [float, float]."""
        ...
    
    @property
    def rgb_color(self) -> tuple[int, int, int] | None:
        """Return the rgb color value [int, int, int]."""
        ...
    
    @property
    def rgbw_color(self) -> tuple[int, int, int, int] | None:
        """Return the rgbw color value [int, int, int, int]."""
        ...
    
    @property
    def rgbww_color(self) -> tuple[int, int, int, int, int] | None:
        """Return the rgbww color value [int, int, int, int, int]."""
        ...
    
    @property
    def color_temp(self) -> int | None:
        """Return the CT color value in mireds."""
        ...
    
    @property
    def color_temp_kelvin(self) -> int | None:
        """Return the CT color value in Kelvin."""
        ...
    
    @property
    def min_mireds(self) -> int:
        """Return the coldest color_temp that this light supports."""
        ...
    
    @property
    def max_mireds(self) -> int:
        """Return the warmest color_temp that this light supports."""
        ...
    
    @property
    def min_color_temp_kelvin(self) -> int:
        """Return the warmest color_temp_kelvin that this light supports."""
        ...
    
    @property
    def max_color_temp_kelvin(self) -> int:
        """Return the coldest color_temp_kelvin that this light supports."""
        ...
    
    @property
    def effect_list(self) -> list[str] | None:
        """Return the list of supported effects."""
        ...
    
    @property
    def effect(self) -> str | None:
        """Return the current effect."""
        ...
    
    @property
    def capability_attributes(self) -> dict[str, Any]:
        """Return capability attributes."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return state attributes."""
        ...
    
    @property
    def supported_color_modes(self) -> set[ColorMode] | set[str] | None:
        """Flag supported color modes."""
        ...
    
    @property
    def supported_features(self) -> LightEntityFeature:
        """Flag supported features."""
        ...
    


