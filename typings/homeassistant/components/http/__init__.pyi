"""
This type stub file was generated by pyright.
"""

import asyncio
import datetime
import logging
import os
import ssl
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from ipaddress import IPv4Network, IPv6Network, ip_network
from tempfile import NamedTemporaryFile
from typing import Any, Final, TypedDict, cast
from aiohttp import web
from aiohttp.abc import AbstractStreamWriter
from aiohttp.http_parser import RawRequestMessage
from aiohttp.streams import StreamReader
from aiohttp.typedefs import JSONDecoder, StrOrURL
from aiohttp.web_exceptions import HTTPMovedPermanently, HTTPRedirection
from aiohttp.web_protocol import RequestHandler
from aiohttp_fast_url_dispatcher import FastUrlDispatcher, attach_fast_url_dispatcher
from aiohttp_zlib_ng import enable_zlib_ng
from cryptography import x509
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import NameOID
from yarl import URL
from homeassistant.components.network import async_get_source_ip
from homeassistant.const import EVENT_HOMEASSISTANT_STOP, SERVER_PORT
from homeassistant.core import Event, HomeAssistant
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import storage
from homeassistant.helpers.network import NoURLAvailableError, get_url
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.setup import async_start_setup, async_when_setup_or_start
from homeassistant.util import dt as dt_util, ssl as ssl_util
from homeassistant.util.json import json_loads
from .auth import async_setup_auth
from .ban import setup_bans
from .const import KEY_AUTHENTICATED, KEY_HASS, KEY_HASS_REFRESH_TOKEN_ID, KEY_HASS_USER
from .cors import setup_cors
from .decorators import require_admin
from .forwarded import async_setup_forwarded
from .headers import setup_headers
from .request_context import current_request, setup_request_context
from .security_filter import setup_security_filter
from .static import CACHE_HEADERS, CachingStaticResource
from .view import HomeAssistantView
from .web_runner import HomeAssistantTCPSite

"""Support to serve the Home Assistant API as WSGI application."""
DOMAIN: Final = ...
CONF_SERVER_HOST: Final = ...
CONF_SERVER_PORT: Final = ...
CONF_BASE_URL: Final = ...
CONF_SSL_CERTIFICATE: Final = ...
CONF_SSL_PEER_CERTIFICATE: Final = ...
CONF_SSL_KEY: Final = ...
CONF_CORS_ORIGINS: Final = ...
CONF_USE_X_FORWARDED_FOR: Final = ...
CONF_USE_X_FRAME_OPTIONS: Final = ...
CONF_TRUSTED_PROXIES: Final = ...
CONF_LOGIN_ATTEMPTS_THRESHOLD: Final = ...
CONF_IP_BAN_ENABLED: Final = ...
CONF_SSL_PROFILE: Final = ...
SSL_MODERN: Final = ...
SSL_INTERMEDIATE: Final = ...
_LOGGER: Final = ...
DEFAULT_DEVELOPMENT: Final = ...
DEFAULT_CORS: Final[list[str]] = ...
NO_LOGIN_ATTEMPT_THRESHOLD: Final = ...
MAX_CLIENT_SIZE: Final = ...
MAX_LINE_SIZE: Final = ...
STORAGE_KEY: Final = ...
STORAGE_VERSION: Final = ...
SAVE_DELAY: Final = ...
HTTP_SCHEMA: Final = ...
CONFIG_SCHEMA: Final = ...
class ConfData(TypedDict, total=False):
    """Typed dict for config data."""
    server_host: list[str]
    server_port: int
    base_url: str
    ssl_certificate: str
    ssl_peer_certificate: str
    ssl_key: str
    cors_allowed_origins: list[str]
    use_x_forwarded_for: bool
    use_x_frame_options: bool
    trusted_proxies: list[IPv4Network | IPv6Network]
    login_attempts_threshold: int
    ip_ban_enabled: bool
    ssl_profile: str
    ...


@bind_hass
async def async_get_last_config(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return the last known working config."""
    ...

class ApiConfig:
    """Configuration settings for API server."""
    def __init__(self, local_ip: str, host: str, port: int, use_ssl: bool) -> None:
        """Initialize a new API config object."""
        ...
    


async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the HTTP API and debug interface."""
    ...

class HomeAssistantRequest(web.Request):
    """Home Assistant request object."""
    async def json(self, *, loads: JSONDecoder = ...) -> Any:
        """Return body as JSON."""
        ...
    


class HomeAssistantApplication(web.Application):
    """Home Assistant application."""
    ...


class HomeAssistantHTTP:
    """HTTP server for Home Assistant."""
    def __init__(self, hass: HomeAssistant, ssl_certificate: str | None, ssl_peer_certificate: str | None, ssl_key: str | None, server_host: list[str] | None, server_port: int, trusted_proxies: list[IPv4Network | IPv6Network], ssl_profile: str) -> None:
        """Initialize the HTTP Home Assistant server."""
        ...
    
    async def async_initialize(self, *, cors_origins: list[str], use_x_forwarded_for: bool, login_threshold: int, is_ban_enabled: bool, use_x_frame_options: bool) -> None:
        """Initialize the server."""
        ...
    
    def register_view(self, view: HomeAssistantView | type[HomeAssistantView]) -> None:
        """Register a view with the WSGI server.

        The view argument must be a class that inherits from HomeAssistantView.
        It is optional to instantiate it before registering; this method will
        handle it either way.
        """
        ...
    
    def register_redirect(self, url: str, redirect_to: StrOrURL, *, redirect_exc: type[HTTPRedirection] = ...) -> None:
        """Register a redirect with the server.

        If given this must be either a string or callable. In case of a
        callable it's called with the url adapter that triggered the match and
        the values of the URL as keyword arguments and has to return the target
        for the redirect, otherwise it has to be a string with placeholders in
        rule syntax.
        """
        ...
    
    def register_static_path(self, url_path: str, path: str, cache_headers: bool = ...) -> None:
        """Register a folder or file to serve as a static path."""
        ...
    
    async def start(self) -> None:
        """Start the aiohttp server."""
        ...
    
    async def stop(self) -> None:
        """Stop the aiohttp server."""
        ...
    


async def start_http_server_and_save_config(hass: HomeAssistant, conf: dict, server: HomeAssistantHTTP) -> None:
    """Startup the http server and save the config."""
    ...

