"""
This type stub file was generated by pyright.
"""

import functools as ft
import importlib
import logging
import voluptuous as vol
from __future__ import annotations
from typing import Any, Final, final
from homeassistant.components.light import ATTR_TRANSITION
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import CONF_PLATFORM, SERVICE_TURN_ON, STATE_UNAVAILABLE
from homeassistant.core import DOMAIN as HA_DOMAIN, HomeAssistant
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.restore_state import RestoreEntity
from homeassistant.helpers.typing import ConfigType
from homeassistant.util import dt as dt_util

"""Allow users to set and activate scenes."""
DOMAIN: Final = ...
STATES: Final = ...
PLATFORM_SCHEMA = ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the scenes."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

class Scene(RestoreEntity):
    """A scene is a group of entities and the states we want them to be."""
    _attr_should_poll = ...
    __last_activated: str | None = ...
    @property
    @final
    def state(self) -> str | None:
        """Return the state of the scene."""
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Call when the scene is added to hass."""
        ...
    
    def activate(self, **kwargs: Any) -> None:
        """Activate scene. Try to get entities into requested state."""
        ...
    
    async def async_activate(self, **kwargs: Any) -> None:
        """Activate scene. Try to get entities into requested state."""
        ...
    


