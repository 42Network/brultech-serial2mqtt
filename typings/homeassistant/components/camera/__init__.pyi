"""
This type stub file was generated by pyright.
"""

import asyncio
import collections
import logging
import os
import attr
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Awaitable, Callable, Iterable
from contextlib import suppress
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from enum import IntFlag
from functools import partial
from random import SystemRandom
from typing import Any, Final, cast, final
from aiohttp import hdrs, web
from homeassistant.components import websocket_api
from homeassistant.components.http import HomeAssistantView, KEY_AUTHENTICATED
from homeassistant.components.media_player import ATTR_MEDIA_CONTENT_ID, ATTR_MEDIA_CONTENT_TYPE, DOMAIN as DOMAIN_MP, SERVICE_PLAY_MEDIA
from homeassistant.components.stream import FORMAT_CONTENT_TYPE, OUTPUT_FORMATS, Orientation, Stream, create_stream
from homeassistant.components.websocket_api import ActiveConnection
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_ENTITY_ID, CONF_FILENAME, CONTENT_TYPE_MULTIPART, EVENT_HOMEASSISTANT_STARTED, EVENT_HOMEASSISTANT_STOP, SERVICE_TURN_OFF, SERVICE_TURN_ON
from homeassistant.core import Event, HomeAssistant, ServiceCall, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.event import async_track_time_interval
from homeassistant.helpers.network import get_url
from homeassistant.helpers.template import Template
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from .const import CAMERA_IMAGE_TIMEOUT, CAMERA_STREAM_SOURCE_TIMEOUT, CONF_DURATION, CONF_LOOKBACK, DATA_CAMERA_PREFS, DATA_RTSP_TO_WEB_RTC, DOMAIN, PREF_ORIENTATION, PREF_PRELOAD_STREAM, SERVICE_RECORD, STREAM_TYPE_HLS, STREAM_TYPE_WEB_RTC, StreamType
from .img_util import scale_jpeg_camera_image
from .prefs import CameraPreferences, DynamicStreamSettings

"""Component to interface with cameras."""
_LOGGER = ...
SERVICE_ENABLE_MOTION: Final = ...
SERVICE_DISABLE_MOTION: Final = ...
SERVICE_SNAPSHOT: Final = ...
SERVICE_PLAY_STREAM: Final = ...
SCAN_INTERVAL: Final = ...
ENTITY_ID_FORMAT: Final = ...
ATTR_FILENAME: Final = ...
ATTR_MEDIA_PLAYER: Final = ...
ATTR_FORMAT: Final = ...
STATE_RECORDING: Final = ...
STATE_STREAMING: Final = ...
STATE_IDLE: Final = ...
class CameraEntityFeature(IntFlag):
    """Supported features of the camera entity."""
    ON_OFF = ...
    STREAM = ...


SUPPORT_ON_OFF: Final = ...
SUPPORT_STREAM: Final = ...
RTSP_PREFIXES = ...
DEFAULT_CONTENT_TYPE: Final = ...
ENTITY_IMAGE_URL: Final = ...
TOKEN_CHANGE_INTERVAL: Final = ...
_RND: Final = ...
MIN_STREAM_INTERVAL: Final = ...
CAMERA_SERVICE_SNAPSHOT: Final = ...
CAMERA_SERVICE_PLAY_STREAM: Final = ...
CAMERA_SERVICE_RECORD: Final = ...
@dataclass
class CameraEntityDescription(EntityDescription):
    """A class that describes camera entities."""
    ...


@attr.s
class Image:
    """Represent an image."""
    content_type: str = ...
    content: bytes = ...


@bind_hass
async def async_request_stream(hass: HomeAssistant, entity_id: str, fmt: str) -> str:
    """Request a stream for a camera entity."""
    ...

@bind_hass
async def async_get_image(hass: HomeAssistant, entity_id: str, timeout: int = ..., width: int | None = ..., height: int | None = ...) -> Image:
    """Fetch an image from a camera entity.

    width and height will be passed to the underlying camera.
    """
    ...

@bind_hass
async def async_get_stream_source(hass: HomeAssistant, entity_id: str) -> str | None:
    """Fetch the stream source for a camera entity."""
    ...

@bind_hass
async def async_get_mjpeg_stream(hass: HomeAssistant, request: web.Request, entity_id: str) -> web.StreamResponse | None:
    """Fetch an mjpeg stream from a camera entity."""
    ...

async def async_get_still_stream(request: web.Request, image_cb: Callable[[], Awaitable[bytes | None]], content_type: str, interval: float) -> web.StreamResponse:
    """Generate an HTTP MJPEG stream from camera images.

    This method must be run in the event loop.
    """
    ...

RtspToWebRtcProviderType = Callable[[str, str, str], Awaitable[str | None]]
def async_register_rtsp_to_web_rtc_provider(hass: HomeAssistant, domain: str, provider: RtspToWebRtcProviderType) -> Callable[[], None]:
    """Register an RTSP to WebRTC provider.

    The first provider to satisfy the offer will be used.
    """
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the camera component."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

class Camera(Entity):
    """The base class for camera entities."""
    _entity_component_unrecorded_attributes = ...
    _attr_brand: str | None = ...
    _attr_frame_interval: float = ...
    _attr_frontend_stream_type: StreamType | None
    _attr_is_on: bool = ...
    _attr_is_recording: bool = ...
    _attr_is_streaming: bool = ...
    _attr_model: str | None = ...
    _attr_motion_detection_enabled: bool = ...
    _attr_should_poll: bool = ...
    _attr_state: None = ...
    _attr_supported_features: CameraEntityFeature = ...
    def __init__(self) -> None:
        """Initialize a camera."""
        ...
    
    @property
    def entity_picture(self) -> str:
        """Return a link to the camera feed as entity picture."""
        ...
    
    @property
    def use_stream_for_stills(self) -> bool:
        """Whether or not to use stream to generate stills."""
        ...
    
    @property
    def supported_features(self) -> CameraEntityFeature:
        """Flag supported features."""
        ...
    
    @property
    def is_recording(self) -> bool:
        """Return true if the device is recording."""
        ...
    
    @property
    def is_streaming(self) -> bool:
        """Return true if the device is streaming."""
        ...
    
    @property
    def brand(self) -> str | None:
        """Return the camera brand."""
        ...
    
    @property
    def motion_detection_enabled(self) -> bool:
        """Return the camera motion detection status."""
        ...
    
    @property
    def model(self) -> str | None:
        """Return the camera model."""
        ...
    
    @property
    def frame_interval(self) -> float:
        """Return the interval between frames of the mjpeg stream."""
        ...
    
    @property
    def frontend_stream_type(self) -> StreamType | None:
        """Return the type of stream supported by this camera.

        A camera may have a single stream type which is used to inform the
        frontend which camera attributes and player to use. The default type
        is to use HLS, and components can override to change the type.
        """
        ...
    
    @property
    def available(self) -> bool:
        """Return True if entity is available."""
        ...
    
    async def async_create_stream(self) -> Stream | None:
        """Create a Stream for stream_source."""
        ...
    
    async def stream_source(self) -> str | None:
        """Return the source of the stream.

        This is used by cameras with CameraEntityFeature.STREAM
        and StreamType.HLS.
        """
        ...
    
    async def async_handle_web_rtc_offer(self, offer_sdp: str) -> str | None:
        """Handle the WebRTC offer and return an answer.

        This is used by cameras with CameraEntityFeature.STREAM
        and StreamType.WEB_RTC.

        Integrations can override with a native WebRTC implementation.
        """
        ...
    
    def camera_image(self, width: int | None = ..., height: int | None = ...) -> bytes | None:
        """Return bytes of camera image."""
        ...
    
    async def async_camera_image(self, width: int | None = ..., height: int | None = ...) -> bytes | None:
        """Return bytes of camera image."""
        ...
    
    async def handle_async_still_stream(self, request: web.Request, interval: float) -> web.StreamResponse:
        """Generate an HTTP MJPEG stream from camera images."""
        ...
    
    async def handle_async_mjpeg_stream(self, request: web.Request) -> web.StreamResponse | None:
        """Serve an HTTP MJPEG stream from the camera.

        This method can be overridden by camera platforms to proxy
        a direct stream from the camera.
        """
        ...
    
    @property
    @final
    def state(self) -> str:
        """Return the camera state."""
        ...
    
    @property
    def is_on(self) -> bool:
        """Return true if on."""
        ...
    
    def turn_off(self) -> None:
        """Turn off camera."""
        ...
    
    async def async_turn_off(self) -> None:
        """Turn off camera."""
        ...
    
    def turn_on(self) -> None:
        """Turn off camera."""
        ...
    
    async def async_turn_on(self) -> None:
        """Turn off camera."""
        ...
    
    def enable_motion_detection(self) -> None:
        """Enable motion detection in the camera."""
        ...
    
    async def async_enable_motion_detection(self) -> None:
        """Call the job and enable motion detection."""
        ...
    
    def disable_motion_detection(self) -> None:
        """Disable motion detection in camera."""
        ...
    
    async def async_disable_motion_detection(self) -> None:
        """Call the job and disable motion detection."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, str | None]:
        """Return the camera state attributes."""
        ...
    
    @callback
    def async_update_token(self) -> None:
        """Update the used token."""
        ...
    
    async def async_internal_added_to_hass(self) -> None:
        """Run when entity about to be added to hass."""
        ...
    
    async def async_refresh_providers(self) -> None:
        """Determine if any of the registered providers are suitable for this entity.

        This affects state attributes, so it should be invoked any time the registered
        providers or inputs to the state attributes change.

        Returns True if any state was updated (and needs to be written)
        """
        ...
    


class CameraView(HomeAssistantView):
    """Base CameraView."""
    requires_auth = ...
    def __init__(self, component: EntityComponent[Camera]) -> None:
        """Initialize a basic camera view."""
        ...
    
    async def get(self, request: web.Request, entity_id: str) -> web.StreamResponse:
        """Start a GET request."""
        ...
    
    async def handle(self, request: web.Request, camera: Camera) -> web.StreamResponse:
        """Handle the camera request."""
        ...
    


class CameraImageView(CameraView):
    """Camera view to serve an image."""
    url = ...
    name = ...
    async def handle(self, request: web.Request, camera: Camera) -> web.Response:
        """Serve camera image."""
        ...
    


class CameraMjpegStream(CameraView):
    """Camera View to serve an MJPEG stream."""
    url = ...
    name = ...
    async def handle(self, request: web.Request, camera: Camera) -> web.StreamResponse:
        """Serve camera stream, possibly with interval."""
        ...
    


@websocket_api.websocket_command({ vol.Required("type"): "camera/stream",vol.Required("entity_id"): cv.entity_id,vol.Optional("format", default="hls"): vol.In(OUTPUT_FORMATS) })
@websocket_api.async_response
async def ws_camera_stream(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle get camera stream websocket command.

    Async friendly.
    """
    ...

@websocket_api.websocket_command({ vol.Required("type"): "camera/web_rtc_offer",vol.Required("entity_id"): cv.entity_id,vol.Required("offer"): str })
@websocket_api.async_response
async def ws_camera_web_rtc_offer(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle the signal path for a WebRTC stream.

    This signal path is used to route the offer created by the client to the
    camera device through the integration for negotiation on initial setup,
    which returns an answer. The actual streaming is handled entirely between
    the client and camera device.

    Async friendly.
    """
    ...

@websocket_api.websocket_command({ vol.Required("type"): "camera/get_prefs",vol.Required("entity_id"): cv.entity_id })
@websocket_api.async_response
async def websocket_get_prefs(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for account info."""
    ...

@websocket_api.websocket_command({ vol.Required("type"): "camera/update_prefs",vol.Required("entity_id"): cv.entity_id,vol.Optional(PREF_PRELOAD_STREAM): bool,vol.Optional(PREF_ORIENTATION): vol.Coerce(Orientation) })
@websocket_api.async_response
async def websocket_update_prefs(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None:
    """Handle request for account info."""
    ...

async def async_handle_snapshot_service(camera: Camera, service_call: ServiceCall) -> None:
    """Handle snapshot services calls."""
    ...

async def async_handle_play_stream_service(camera: Camera, service_call: ServiceCall) -> None:
    """Handle play stream services calls."""
    ...

async def async_handle_record_service(camera: Camera, service_call: ServiceCall) -> None:
    """Handle stream recording service calls."""
    ...

