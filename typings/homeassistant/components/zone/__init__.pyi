"""
This type stub file was generated by pyright.
"""

import logging
import voluptuous as vol
from __future__ import annotations
from collections.abc import Callable
from operator import attrgetter
from typing import Any, Self, cast
from homeassistant import config_entries
from homeassistant.const import ATTR_EDITABLE, ATTR_LATITUDE, ATTR_LONGITUDE, ATTR_PERSONS, CONF_ICON, CONF_ID, CONF_LATITUDE, CONF_LONGITUDE, CONF_NAME, CONF_RADIUS, EVENT_CORE_CONFIG_UPDATE, SERVICE_RELOAD, STATE_HOME, STATE_NOT_HOME, STATE_UNAVAILABLE, STATE_UNKNOWN
from homeassistant.core import Event, HomeAssistant, ServiceCall, State, callback
from homeassistant.helpers import collection, config_validation as cv, entity_component, event, service, storage
from homeassistant.helpers.typing import ConfigType, EventType
from homeassistant.loader import bind_hass
from homeassistant.util.location import distance
from .const import ATTR_PASSIVE, ATTR_RADIUS, CONF_PASSIVE, DOMAIN, HOME_ZONE

"""Support for the definition of zones."""
_LOGGER = ...
DEFAULT_PASSIVE = ...
DEFAULT_RADIUS = ...
ENTITY_ID_FORMAT = ...
ENTITY_ID_HOME = ...
ICON_HOME = ...
ICON_IMPORT = ...
CREATE_FIELDS = ...
UPDATE_FIELDS = ...
def empty_value(value: Any) -> Any:
    """Test if the user has the default config value from adding "zone:"."""
    ...

CONFIG_SCHEMA = ...
RELOAD_SERVICE_SCHEMA = ...
STORAGE_KEY = ...
STORAGE_VERSION = ...
ENTITY_ID_SORTER = ...
ZONE_ENTITY_IDS = ...
@bind_hass
def async_active_zone(hass: HomeAssistant, latitude: float, longitude: float, radius: int = ...) -> State | None:
    """Find the active zone for given latitude, longitude.

    This method must be run in the event loop.
    """
    ...

@callback
def async_setup_track_zone_entity_ids(hass: HomeAssistant) -> None:
    """Set up track of entity IDs for zones."""
    ...

def in_zone(zone: State, latitude: float, longitude: float, radius: float = ...) -> bool:
    """Test if given latitude, longitude is in given zone.

    Async friendly.
    """
    ...

class ZoneStorageCollection(collection.DictStorageCollection):
    """Zone collection stored in storage."""
    CREATE_SCHEMA = ...
    UPDATE_SCHEMA = ...


async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up configured zones as well as Home Assistant zone if necessary."""
    ...

async def async_setup_entry(hass: HomeAssistant, config_entry: config_entries.ConfigEntry) -> bool:
    """Set up zone as config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, config_entry: config_entries.ConfigEntry) -> bool:
    """Will be called once we remove it."""
    ...

class Zone(collection.CollectionEntity):
    """Representation of a Zone."""
    editable: bool
    def __init__(self, config: ConfigType) -> None:
        """Initialize the zone."""
        ...
    
    @classmethod
    def from_storage(cls, config: ConfigType) -> Self:
        """Return entity instance initialized from storage."""
        ...
    
    @classmethod
    def from_yaml(cls, config: ConfigType) -> Self:
        """Return entity instance initialized from yaml."""
        ...
    
    @property
    def state(self) -> int:
        """Return the state property really does nothing for a zone."""
        ...
    
    @property
    def name(self) -> str:
        """Return name."""
        ...
    
    @property
    def unique_id(self) -> str | None:
        """Return unique ID."""
        ...
    
    @property
    def icon(self) -> str | None:
        """Return the icon if any."""
        ...
    
    @property
    def should_poll(self) -> bool:
        """Zone does not poll."""
        ...
    
    async def async_update_config(self, config: ConfigType) -> None:
        """Handle when the config is updated."""
        ...
    
    async def async_added_to_hass(self) -> None:
        """Run when entity about to be added to hass."""
        ...
    


