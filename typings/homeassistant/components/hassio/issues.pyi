"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import NotRequired, TypedDict
from homeassistant.core import HomeAssistant
from .const import SupervisorIssueContext
from .handler import HassIO

"""Supervisor events monitor."""
ISSUE_KEY_UNHEALTHY = ...
ISSUE_KEY_UNSUPPORTED = ...
ISSUE_ID_UNHEALTHY = ...
ISSUE_ID_UNSUPPORTED = ...
INFO_URL_UNHEALTHY = ...
INFO_URL_UNSUPPORTED = ...
PLACEHOLDER_KEY_REASON = ...
UNSUPPORTED_REASONS = ...
UNSUPPORTED_SKIP_REPAIR = ...
UNHEALTHY_REASONS = ...
ISSUE_KEYS_FOR_REPAIRS = ...
_LOGGER = ...
class SuggestionDataType(TypedDict):
    """Suggestion dictionary as received from supervisor."""
    uuid: str
    type: str
    context: str
    reference: str | None
    ...


@dataclass(slots=True, frozen=True)
class Suggestion:
    """Suggestion from Supervisor which resolves an issue."""
    uuid: str
    type: str
    context: SupervisorIssueContext
    reference: str | None = ...
    @property
    def key(self) -> str:
        """Get key for suggestion (combination of context and type)."""
        ...
    
    @classmethod
    def from_dict(cls, data: SuggestionDataType) -> Suggestion:
        """Convert from dictionary representation."""
        ...
    


class IssueDataType(TypedDict):
    """Issue dictionary as received from supervisor."""
    uuid: str
    type: str
    context: str
    reference: str | None
    suggestions: NotRequired[list[SuggestionDataType]]
    ...


@dataclass(slots=True, frozen=True)
class Issue:
    """Issue from Supervisor."""
    uuid: str
    type: str
    context: SupervisorIssueContext
    reference: str | None = ...
    suggestions: list[Suggestion] = ...
    @property
    def key(self) -> str:
        """Get key for issue (combination of context and type)."""
        ...
    
    @classmethod
    def from_dict(cls, data: IssueDataType) -> Issue:
        """Convert from dictionary representation."""
        ...
    


class SupervisorIssues:
    """Create issues from supervisor events."""
    def __init__(self, hass: HomeAssistant, client: HassIO) -> None:
        """Initialize supervisor issues."""
        ...
    
    @property
    def unhealthy_reasons(self) -> set[str]:
        """Get unhealthy reasons. Returns empty set if system is healthy."""
        ...
    
    @unhealthy_reasons.setter
    def unhealthy_reasons(self, reasons: set[str]) -> None:
        """Set unhealthy reasons. Create or delete repairs as necessary."""
        ...
    
    @property
    def unsupported_reasons(self) -> set[str]:
        """Get unsupported reasons. Returns empty set if system is supported."""
        ...
    
    @unsupported_reasons.setter
    def unsupported_reasons(self, reasons: set[str]) -> None:
        """Set unsupported reasons. Create or delete repairs as necessary."""
        ...
    
    @property
    def issues(self) -> set[Issue]:
        """Get issues."""
        ...
    
    def add_issue(self, issue: Issue) -> None:
        """Add or update an issue in the list. Create or update a repair if necessary."""
        ...
    
    async def add_issue_from_data(self, data: IssueDataType) -> None:
        """Add issue from data to list after getting latest suggestions."""
        ...
    
    def remove_issue(self, issue: Issue) -> None:
        """Remove an issue from the list. Delete a repair if necessary."""
        ...
    
    def get_issue(self, issue_id: str) -> Issue | None:
        """Get issue from key."""
        ...
    
    async def setup(self) -> None:
        """Create supervisor events listener."""
        ...
    
    async def update(self) -> None:
        """Update issues from Supervisor resolution center."""
        ...
    


