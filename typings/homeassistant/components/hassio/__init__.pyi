"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import os
import re
import voluptuous as vol
from __future__ import annotations
from collections import defaultdict
from contextlib import suppress
from datetime import datetime, timedelta
from typing import Any, NamedTuple
from homeassistant.auth.const import GROUP_ID_ADMIN
from homeassistant.components import panel_custom
from homeassistant.components.homeassistant import async_set_stop_handler
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_MANUFACTURER, ATTR_NAME, EVENT_CORE_CONFIG_UPDATE, HASSIO_USER_NAME, Platform
from homeassistant.core import CALLBACK_TYPE, HassJob, HomeAssistant, ServiceCall, async_get_hass, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import config_validation as cv, device_registry as dr
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from homeassistant.helpers.debounce import Debouncer
from homeassistant.helpers.device_registry import DeviceInfo
from homeassistant.helpers.event import async_call_later
from homeassistant.helpers.storage import Store
from homeassistant.helpers.typing import ConfigType
from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed
from homeassistant.loader import bind_hass
from homeassistant.util.dt import now
from .addon_manager import AddonError, AddonInfo, AddonManager, AddonState
from .addon_panel import async_setup_addon_panel
from .auth import async_setup_auth_view
from .const import ATTR_ADDON, ATTR_ADDONS, ATTR_AUTO_UPDATE, ATTR_CHANGELOG, ATTR_COMPRESSED, ATTR_FOLDERS, ATTR_HOMEASSISTANT, ATTR_HOMEASSISTANT_EXCLUDE_DATABASE, ATTR_INPUT, ATTR_LOCATION, ATTR_PASSWORD, ATTR_REPOSITORY, ATTR_SLUG, ATTR_STARTED, ATTR_STATE, ATTR_URL, ATTR_VERSION, CONTAINER_CHANGELOG, CONTAINER_INFO, CONTAINER_STATS, CORE_CONTAINER, DATA_KEY_ADDONS, DATA_KEY_CORE, DATA_KEY_HOST, DATA_KEY_OS, DATA_KEY_SUPERVISOR, DATA_KEY_SUPERVISOR_ISSUES, DOMAIN, REQUEST_REFRESH_DELAY, SUPERVISOR_CONTAINER, SupervisorEntityModel
from .discovery import HassioServiceInfo, async_setup_discovery_view
from .handler import HassIO, HassioAPIError, async_create_backup, async_get_addon_discovery_info, async_get_addon_info, async_get_addon_store_info, async_get_green_settings, async_get_yellow_settings, async_install_addon, async_reboot_host, async_restart_addon, async_set_addon_options, async_set_green_settings, async_set_yellow_settings, async_start_addon, async_stop_addon, async_uninstall_addon, async_update_addon, async_update_core, async_update_diagnostics, async_update_os, async_update_supervisor
from .http import HassIOView
from .ingress import async_setup_ingress_view
from .issues import SupervisorIssues
from .websocket_api import async_load_websocket_api

"""Support for Hass.io."""
_LOGGER = ...
STORAGE_KEY = ...
STORAGE_VERSION = ...
PLATFORMS = ...
CONF_FRONTEND_REPO = ...
CONFIG_SCHEMA = ...
DATA_CORE_INFO = ...
DATA_CORE_STATS = ...
DATA_HOST_INFO = ...
DATA_STORE = ...
DATA_INFO = ...
DATA_OS_INFO = ...
DATA_SUPERVISOR_INFO = ...
DATA_SUPERVISOR_STATS = ...
DATA_ADDONS_CHANGELOGS = ...
DATA_ADDONS_INFO = ...
DATA_ADDONS_STATS = ...
HASSIO_UPDATE_INTERVAL = ...
ADDONS_COORDINATOR = ...
SERVICE_ADDON_START = ...
SERVICE_ADDON_STOP = ...
SERVICE_ADDON_RESTART = ...
SERVICE_ADDON_UPDATE = ...
SERVICE_ADDON_STDIN = ...
SERVICE_HOST_SHUTDOWN = ...
SERVICE_HOST_REBOOT = ...
SERVICE_BACKUP_FULL = ...
SERVICE_BACKUP_PARTIAL = ...
SERVICE_RESTORE_FULL = ...
SERVICE_RESTORE_PARTIAL = ...
VALID_ADDON_SLUG = ...
def valid_addon(value: Any) -> str:
    """Validate value is a valid addon slug."""
    ...

SCHEMA_NO_DATA = ...
SCHEMA_ADDON = ...
SCHEMA_ADDON_STDIN = ...
SCHEMA_BACKUP_FULL = ...
SCHEMA_BACKUP_PARTIAL = ...
SCHEMA_RESTORE_FULL = ...
SCHEMA_RESTORE_PARTIAL = ...
class APIEndpointSettings(NamedTuple):
    """Settings for API endpoint."""
    command: str
    schema: vol.Schema
    timeout: int | None = ...
    pass_data: bool = ...


MAP_SERVICE_API = ...
HARDWARE_INTEGRATIONS = ...
def hostname_from_addon_slug(addon_slug: str) -> str:
    """Return hostname of add-on."""
    ...

@callback
@bind_hass
def get_info(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return generic information from Supervisor.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_host_info(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return generic host information.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_store(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return store information.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_supervisor_info(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return Supervisor information.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_addons_info(hass: HomeAssistant) -> dict[str, dict[str, Any]] | None:
    """Return Addons info.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_addons_stats(hass): # -> dict[Any, Any]:
    """Return Addons stats.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_core_stats(hass): # -> dict[Any, Any]:
    """Return core stats.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_supervisor_stats(hass): # -> dict[Any, Any]:
    """Return supervisor stats.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_addons_changelogs(hass):
    """Return Addons changelogs.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_os_info(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return OS information.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_core_info(hass: HomeAssistant) -> dict[str, Any] | None:
    """Return Home Assistant Core information from Supervisor.

    Async friendly.
    """
    ...

@callback
@bind_hass
def get_issues_info(hass: HomeAssistant) -> SupervisorIssues | None:
    """Return Supervisor issues info.

    Async friendly.
    """
    ...

@callback
@bind_hass
def is_hassio(hass: HomeAssistant) -> bool:
    """Return true if Hass.io is loaded.

    Async friendly.
    """
    ...

@callback
def get_supervisor_ip() -> str | None:
    """Return the supervisor ip address."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the Hass.io component."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@callback
def async_register_addons_in_dev_reg(entry_id: str, dev_reg: dr.DeviceRegistry, addons: list[dict[str, Any]]) -> None:
    """Register addons in the device registry."""
    ...

@callback
def async_register_os_in_dev_reg(entry_id: str, dev_reg: dr.DeviceRegistry, os_dict: dict[str, Any]) -> None:
    """Register OS in the device registry."""
    ...

@callback
def async_register_host_in_dev_reg(entry_id: str, dev_reg: dr.DeviceRegistry) -> None:
    """Register host in the device registry."""
    ...

@callback
def async_register_core_in_dev_reg(entry_id: str, dev_reg: dr.DeviceRegistry, core_dict: dict[str, Any]) -> None:
    """Register OS in the device registry."""
    ...

@callback
def async_register_supervisor_in_dev_reg(entry_id: str, dev_reg: dr.DeviceRegistry, supervisor_dict: dict[str, Any]) -> None:
    """Register OS in the device registry."""
    ...

@callback
def async_remove_addons_from_dev_reg(dev_reg: dr.DeviceRegistry, addons: set[str]) -> None:
    """Remove addons from the device registry."""
    ...

class HassioDataUpdateCoordinator(DataUpdateCoordinator):
    """Class to retrieve Hass.io status."""
    def __init__(self, hass: HomeAssistant, config_entry: ConfigEntry, dev_reg: dr.DeviceRegistry) -> None:
        """Initialize coordinator."""
        ...
    
    async def force_info_update_supervisor(self) -> None:
        """Force update of the supervisor info."""
        ...
    
    async def force_data_refresh(self, first_update: bool) -> None:
        """Force update of the addon info."""
        ...
    
    @callback
    def async_enable_container_updates(self, slug: str, entity_id: str, types: set[str]) -> CALLBACK_TYPE:
        """Enable updates for an add-on."""
        ...
    


