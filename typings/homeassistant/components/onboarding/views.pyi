"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from homeassistant.components.http.data_validator import RequestDataValidator
from homeassistant.components.http.view import HomeAssistantView

"""Onboarding views."""
async def async_setup(hass, data, store): # -> None:
    """Set up the onboarding view."""
    ...

class OnboardingView(HomeAssistantView):
    """Return the onboarding status."""
    requires_auth = ...
    url = ...
    name = ...
    def __init__(self, data, store) -> None:
        """Initialize the onboarding view."""
        ...
    
    async def get(self, request): # -> Response:
        """Return the onboarding status."""
        ...
    


class InstallationTypeOnboardingView(HomeAssistantView):
    """Return the installation type during onboarding."""
    requires_auth = ...
    url = ...
    name = ...
    def __init__(self, data) -> None:
        """Initialize the onboarding installation type view."""
        ...
    
    async def get(self, request): # -> Response:
        """Return the onboarding status."""
        ...
    


class _BaseOnboardingView(HomeAssistantView):
    """Base class for onboarding."""
    step: str | None = ...
    def __init__(self, data, store) -> None:
        """Initialize the onboarding view."""
        ...
    


class UserOnboardingView(_BaseOnboardingView):
    """View to handle create user onboarding step."""
    url = ...
    name = ...
    requires_auth = ...
    step = ...
    @RequestDataValidator(vol.Schema({ vol.Required("name"): str,vol.Required("username"): str,vol.Required("password"): str,vol.Required("client_id"): str,vol.Required("language"): str }))
    async def post(self, request, data): # -> Response:
        """Handle user creation, area creation."""
        ...
    


class CoreConfigOnboardingView(_BaseOnboardingView):
    """View to finish core config onboarding step."""
    url = ...
    name = ...
    step = ...
    async def post(self, request): # -> Response:
        """Handle finishing core config step."""
        ...
    


class IntegrationOnboardingView(_BaseOnboardingView):
    """View to finish integration onboarding step."""
    url = ...
    name = ...
    step = ...
    @RequestDataValidator(vol.Schema({ vol.Required("client_id"): str,vol.Required("redirect_uri"): str }))
    async def post(self, request, data): # -> Response:
        """Handle token creation."""
        ...
    


class AnalyticsOnboardingView(_BaseOnboardingView):
    """View to finish analytics onboarding step."""
    url = ...
    name = ...
    step = ...
    async def post(self, request): # -> Response:
        """Handle finishing analytics step."""
        ...
    


