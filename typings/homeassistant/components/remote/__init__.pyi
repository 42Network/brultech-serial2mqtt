"""
This type stub file was generated by pyright.
"""

import functools as ft
import logging
import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from __future__ import annotations
from collections.abc import Iterable
from dataclasses import dataclass
from datetime import timedelta
from enum import IntFlag
from typing import Any, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_COMMAND, SERVICE_TOGGLE, SERVICE_TURN_OFF, SERVICE_TURN_ON, STATE_ON
from homeassistant.core import HomeAssistant
from homeassistant.helpers.config_validation import PLATFORM_SCHEMA, PLATFORM_SCHEMA_BASE, make_entity_service_schema
from homeassistant.helpers.entity import ToggleEntity, ToggleEntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass

"""Support to interface with universal remote control devices."""
_LOGGER = ...
ATTR_ACTIVITY = ...
ATTR_ACTIVITY_LIST = ...
ATTR_CURRENT_ACTIVITY = ...
ATTR_COMMAND_TYPE = ...
ATTR_DEVICE = ...
ATTR_NUM_REPEATS = ...
ATTR_DELAY_SECS = ...
ATTR_HOLD_SECS = ...
ATTR_ALTERNATIVE = ...
ATTR_TIMEOUT = ...
DOMAIN = ...
SCAN_INTERVAL = ...
ENTITY_ID_FORMAT = ...
MIN_TIME_BETWEEN_SCANS = ...
SERVICE_SEND_COMMAND = ...
SERVICE_LEARN_COMMAND = ...
SERVICE_DELETE_COMMAND = ...
SERVICE_SYNC = ...
DEFAULT_NUM_REPEATS = ...
DEFAULT_DELAY_SECS = ...
DEFAULT_HOLD_SECS = ...
class RemoteEntityFeature(IntFlag):
    """Supported features of the remote entity."""
    LEARN_COMMAND = ...
    DELETE_COMMAND = ...
    ACTIVITY = ...


SUPPORT_LEARN_COMMAND = ...
SUPPORT_DELETE_COMMAND = ...
SUPPORT_ACTIVITY = ...
REMOTE_SERVICE_ACTIVITY_SCHEMA = ...
@bind_hass
def is_on(hass: HomeAssistant, entity_id: str) -> bool:
    """Return if the remote is on based on the statemachine."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for remotes."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class RemoteEntityDescription(ToggleEntityDescription):
    """A class that describes remote entities."""
    ...


class RemoteEntity(ToggleEntity):
    """Base class for remote entities."""
    entity_description: RemoteEntityDescription
    _attr_activity_list: list[str] | None = ...
    _attr_current_activity: str | None = ...
    _attr_supported_features: RemoteEntityFeature = ...
    @property
    def supported_features(self) -> RemoteEntityFeature:
        """Flag supported features."""
        ...
    
    @property
    def current_activity(self) -> str | None:
        """Active activity."""
        ...
    
    @property
    def activity_list(self) -> list[str] | None:
        """List of available activities."""
        ...
    
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return optional state attributes."""
        ...
    
    def send_command(self, command: Iterable[str], **kwargs: Any) -> None:
        """Send commands to a device."""
        ...
    
    async def async_send_command(self, command: Iterable[str], **kwargs: Any) -> None:
        """Send commands to a device."""
        ...
    
    def learn_command(self, **kwargs: Any) -> None:
        """Learn a command from a device."""
        ...
    
    async def async_learn_command(self, **kwargs: Any) -> None:
        """Learn a command from a device."""
        ...
    
    def delete_command(self, **kwargs: Any) -> None:
        """Delete commands from the database."""
        ...
    
    async def async_delete_command(self, **kwargs: Any) -> None:
        """Delete commands from the database."""
        ...
    


