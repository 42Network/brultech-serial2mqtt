"""
This type stub file was generated by pyright.
"""

from datetime import timedelta
from typing import Any
from jwt import PyJWS, PyJWT

"""Provide a wrapper around JWT that caches decoding tokens.

Since we decode the same tokens over and over again
we can cache the result of the decode of valid tokens
to speed up the process.
"""
JWT_TOKEN_CACHE_SIZE = ...
MAX_TOKEN_SIZE = ...
_VERIFY_KEYS = ...
_VERIFY_OPTIONS: dict[str, Any] = ...
_NO_VERIFY_OPTIONS = ...
class _PyJWSWithLoadCache(PyJWS):
    """PyJWS with a dedicated load implementation."""
    ...


_jws = ...
class _PyJWTWithVerify(PyJWT):
    """PyJWT with a fast decode implementation."""
    def decode_payload(self, jwt: str, key: str, options: dict[str, Any], algorithms: list[str]) -> dict[str, Any]:
        """Decode a JWT's payload."""
        ...
    
    def verify_and_decode(self, jwt: str, key: str, algorithms: list[str], issuer: str | None = ..., leeway: int | float | timedelta = ..., options: dict[str, Any] | None = ...) -> dict[str, Any]:
        """Verify a JWT's signature and claims."""
        ...
    


_jwt = ...
verify_and_decode = ...
unverified_hs256_token_decode = ...
__all__ = ["unverified_hs256_token_decode", "verify_and_decode"]
