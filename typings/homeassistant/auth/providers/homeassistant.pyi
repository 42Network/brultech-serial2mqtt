"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from typing import Any
from homeassistant.core import HomeAssistant, callback
from homeassistant.data_entry_flow import FlowResult
from homeassistant.exceptions import HomeAssistantError
from ..models import Credentials, UserMeta
from . import AUTH_PROVIDERS, AuthProvider, LoginFlow

"""Home Assistant auth provider."""
STORAGE_VERSION = ...
STORAGE_KEY = ...
CONFIG_SCHEMA = ...
@callback
def async_get_provider(hass: HomeAssistant) -> HassAuthProvider:
    """Get the provider."""
    ...

class InvalidAuth(HomeAssistantError):
    """Raised when we encounter invalid authentication."""
    ...


class InvalidUser(HomeAssistantError):
    """Raised when invalid user is specified.

    Will not be raised when validating authentication.
    """
    ...


class Data:
    """Hold the user data."""
    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize the user data store."""
        ...
    
    @callback
    def normalize_username(self, username: str) -> str:
        """Normalize a username based on the mode."""
        ...
    
    async def async_load(self) -> None:
        """Load stored data."""
        ...
    
    @property
    def users(self) -> list[dict[str, str]]:
        """Return users."""
        ...
    
    def validate_login(self, username: str, password: str) -> None:
        """Validate a username and password.

        Raises InvalidAuth if auth invalid.
        """
        ...
    
    def hash_password(self, password: str, for_storage: bool = ...) -> bytes:
        """Encode a password."""
        ...
    
    def add_auth(self, username: str, password: str) -> None:
        """Add a new authenticated user/pass."""
        ...
    
    @callback
    def async_remove_auth(self, username: str) -> None:
        """Remove authentication."""
        ...
    
    def change_password(self, username: str, new_password: str) -> None:
        """Update the password.

        Raises InvalidUser if user cannot be found.
        """
        ...
    
    async def async_save(self) -> None:
        """Save data."""
        ...
    


@AUTH_PROVIDERS.register("homeassistant")
class HassAuthProvider(AuthProvider):
    """Auth provider based on a local storage of users in Home Assistant config dir."""
    DEFAULT_TITLE = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize an Home Assistant auth provider."""
        ...
    
    async def async_initialize(self) -> None:
        """Initialize the auth provider."""
        ...
    
    async def async_login_flow(self, context: dict[str, Any] | None) -> LoginFlow:
        """Return a flow to login."""
        ...
    
    async def async_validate_login(self, username: str, password: str) -> None:
        """Validate a username and password."""
        ...
    
    async def async_add_auth(self, username: str, password: str) -> None:
        """Call add_auth on data."""
        ...
    
    async def async_remove_auth(self, username: str) -> None:
        """Call remove_auth on data."""
        ...
    
    async def async_change_password(self, username: str, new_password: str) -> None:
        """Call change_password on data."""
        ...
    
    async def async_get_or_create_credentials(self, flow_result: Mapping[str, str]) -> Credentials:
        """Get credentials based on the flow result."""
        ...
    
    async def async_user_meta_for_credentials(self, credentials: Credentials) -> UserMeta:
        """Get extra info for this credential."""
        ...
    
    async def async_will_remove_credentials(self, credentials: Credentials) -> None:
        """When credentials get removed, also remove the auth."""
        ...
    


class HassLoginFlow(LoginFlow):
    """Handler for the login flow."""
    async def async_step_init(self, user_input: dict[str, str] | None = ...) -> FlowResult:
        """Handle the step of the form."""
        ...
    


