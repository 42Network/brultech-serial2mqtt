"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from ipaddress import IPv4Address, IPv4Network, IPv6Address, IPv6Network
from typing import Any
from homeassistant.core import callback
from homeassistant.data_entry_flow import FlowResult
from homeassistant.exceptions import HomeAssistantError
from ..models import Credentials, RefreshToken, UserMeta
from . import AUTH_PROVIDERS, AuthProvider, LoginFlow

"""Trusted Networks auth provider.

It shows list of users if access from trusted network.
Abort login flow if not access from trusted network.
"""
IPAddress = IPv4Address | IPv6Address
IPNetwork = IPv4Network | IPv6Network
CONF_TRUSTED_NETWORKS = ...
CONF_TRUSTED_USERS = ...
CONF_GROUP = ...
CONF_ALLOW_BYPASS_LOGIN = ...
CONFIG_SCHEMA = ...
class InvalidUserError(HomeAssistantError):
    """Raised when try to login as invalid user."""
    ...


@AUTH_PROVIDERS.register("trusted_networks")
class TrustedNetworksAuthProvider(AuthProvider):
    """Trusted Networks auth provider.

    Allow passwordless access from trusted network.
    """
    DEFAULT_TITLE = ...
    @property
    def trusted_networks(self) -> list[IPNetwork]:
        """Return trusted networks."""
        ...
    
    @property
    def trusted_users(self) -> dict[IPNetwork, Any]:
        """Return trusted users per network."""
        ...
    
    @property
    def trusted_proxies(self) -> list[IPNetwork]:
        """Return trusted proxies in the system."""
        ...
    
    @property
    def support_mfa(self) -> bool:
        """Trusted Networks auth provider does not support MFA."""
        ...
    
    async def async_login_flow(self, context: dict[str, Any] | None) -> LoginFlow:
        """Return a flow to login."""
        ...
    
    async def async_get_or_create_credentials(self, flow_result: Mapping[str, str]) -> Credentials:
        """Get credentials based on the flow result."""
        ...
    
    async def async_user_meta_for_credentials(self, credentials: Credentials) -> UserMeta:
        """Return extra user metadata for credentials.

        Trusted network auth provider should never create new user.
        """
        ...
    
    @callback
    def async_validate_access(self, ip_addr: IPAddress) -> None:
        """Make sure the access from trusted networks.

        Raise InvalidAuthError if not.
        Raise InvalidAuthError if trusted_networks is not configured.
        """
        ...
    
    @callback
    def async_validate_refresh_token(self, refresh_token: RefreshToken, remote_ip: str | None = ...) -> None:
        """Verify a refresh token is still valid."""
        ...
    


class TrustedNetworksLoginFlow(LoginFlow):
    """Handler for the login flow."""
    def __init__(self, auth_provider: TrustedNetworksAuthProvider, ip_addr: IPAddress, available_users: dict[str, str | None], allow_bypass_login: bool) -> None:
        """Initialize the login flow."""
        ...
    
    async def async_step_init(self, user_input: dict[str, str] | None = ...) -> FlowResult:
        """Handle the step of the form."""
        ...
    


