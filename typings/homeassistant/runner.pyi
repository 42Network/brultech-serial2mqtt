"""
This type stub file was generated by pyright.
"""

import asyncio
import dataclasses

"""Run Home Assistant."""
MAX_EXECUTOR_WORKERS = ...
TASK_CANCELATION_TIMEOUT = ...
_LOGGER = ...
@dataclasses.dataclass(slots=True)
class RuntimeConfig:
    """Class to hold the information for running Home Assistant."""
    config_dir: str
    skip_pip: bool = ...
    skip_pip_packages: list[str] = ...
    recovery_mode: bool = ...
    verbose: bool = ...
    log_rotate_days: int | None = ...
    log_file: str | None = ...
    log_no_color: bool = ...
    debug: bool = ...
    open_ui: bool = ...
    safe_mode: bool = ...


def can_use_pidfd() -> bool:
    """Check if pidfd_open is available.

    Back ported from cpython 3.12
    """
    ...

class HassEventLoopPolicy(asyncio.DefaultEventLoopPolicy):
    """Event loop policy for Home Assistant."""
    def __init__(self, debug: bool) -> None:
        """Init the event loop policy."""
        ...
    
    @property
    def loop_name(self) -> str:
        """Return name of the loop."""
        ...
    
    def new_event_loop(self) -> asyncio.AbstractEventLoop:
        """Get the event loop."""
        ...
    


async def setup_and_run_hass(runtime_config: RuntimeConfig) -> int:
    """Set up Home Assistant and run."""
    ...

def run(runtime_config: RuntimeConfig) -> int:
    """Run Home Assistant."""
    ...

